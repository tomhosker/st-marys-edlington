(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){(function (){
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(require,module,exports){
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("moment")):"function"==typeof define&&define.amd?define("moment-range",["moment"],e):"object"==typeof exports?exports["moment-range"]=e(require("moment")):t["moment-range"]=e(t.moment)}(this,function(t){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};return e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=3)}([function(t,e,n){"use strict";var r=n(5)();t.exports=function(t){return t!==r&&null!==t}},function(t,e,n){"use strict";t.exports=n(18)()?Symbol:n(20)},function(e,n){e.exports=t},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t){return t.range=function(e,n){var r=this;return"string"==typeof e&&y.hasOwnProperty(e)?new h(t(r).startOf(e),t(r).endOf(e)):new h(e,n)},t.rangeFromInterval=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t();if(t.isMoment(r)||(r=t(r)),!r.isValid())throw new Error("Invalid date.");var o=r.clone().add(n,e),i=[];return i.push(t.min(r,o)),i.push(t.max(r,o)),new h(i)},t.rangeFromISOString=function(e){var n=a(e),r=t.parseZone(n[0]),o=t.parseZone(n[1]);return new h(r,o)},t.parseZoneRange=t.rangeFromISOString,t.fn.range=t.range,t.range.constructor=h,t.isRange=function(t){return t instanceof h},t.fn.within=function(t){return t.contains(this.toDate())},t}function a(t){return t.split("/")}Object.defineProperty(e,"__esModule",{value:!0}),e.DateRange=void 0;var s=function(){function t(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var u,a=t[Symbol.iterator]();!(r=(u=a.next()).done)&&(n.push(u.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&a.return&&a.return()}finally{if(o)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();e.extendMoment=u;var l=n(2),v=r(l),d=n(1),p=r(d),y={year:!0,quarter:!0,month:!0,week:!0,day:!0,hour:!0,minute:!0,second:!0},h=e.DateRange=function(){function t(e,n){i(this,t);var r=e,o=n;if(1===arguments.length||void 0===n)if("object"===(void 0===e?"undefined":c(e))&&2===e.length){var u=s(e,2);r=u[0],o=u[1]}else if("string"==typeof e){var f=a(e),l=s(f,2);r=l[0],o=l[1]}this.start=r||0===r?(0,v.default)(r):(0,v.default)(-864e13),this.end=o||0===o?(0,v.default)(o):(0,v.default)(864e13)}return f(t,[{key:"adjacent",value:function(t){var e=this.start.isSame(t.end),n=this.end.isSame(t.start);return e&&t.start.valueOf()<=this.start.valueOf()||n&&t.end.valueOf()>=this.end.valueOf()}},{key:"add",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{adjacent:!1};return this.overlaps(t,e)?new this.constructor(v.default.min(this.start,t.start),v.default.max(this.end,t.end)):null}},{key:"by",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{excludeEnd:!1,step:1},n=this;return o({},p.default.iterator,function(){var r=e.step||1,o=Math.abs(n.start.diff(n.end,t))/r,i=e.excludeEnd||!1,u=0;return e.hasOwnProperty("exclusive")&&(i=e.exclusive),{next:function(){var e=n.start.clone().add(u*r,t),a=i?!(u<o):!(u<=o);return u++,{done:a,value:a?void 0:e}}}})}},{key:"byRange",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{excludeEnd:!1,step:1},n=this,r=e.step||1,i=this.valueOf()/t.valueOf()/r,u=Math.floor(i),a=e.excludeEnd||!1,s=0;return e.hasOwnProperty("exclusive")&&(a=e.exclusive),o({},p.default.iterator,function(){return u===1/0?{done:!0}:{next:function(){var e=(0,v.default)(n.start.valueOf()+t.valueOf()*s*r),o=u===i&&a?!(s<u):!(s<=u);return s++,{done:o,value:o?void 0:e}}}})}},{key:"center",value:function(){var t=this.start.valueOf()+this.diff()/2;return(0,v.default)(t)}},{key:"clone",value:function(){return new this.constructor(this.start.clone(),this.end.clone())}},{key:"contains",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{excludeStart:!1,excludeEnd:!1},r=this.start.valueOf(),o=this.end.valueOf(),i=e.valueOf(),u=e.valueOf(),a=n.excludeStart||!1,s=n.excludeEnd||!1;n.hasOwnProperty("exclusive")&&(a=s=n.exclusive),e instanceof t&&(i=e.start.valueOf(),u=e.end.valueOf());var c=r<i||r<=i&&!a,f=o>u||o>=u&&!s;return c&&f}},{key:"diff",value:function(t,e){return this.end.diff(this.start,t,e)}},{key:"duration",value:function(t,e){return this.diff(t,e)}},{key:"intersect",value:function(t){var e=this.start.valueOf(),n=this.end.valueOf(),r=t.start.valueOf(),o=t.end.valueOf(),i=e==n,u=r==o;if(i){var a=e;if(a==r||a==o)return null;if(a>r&&a<o)return this.clone()}else if(u){var s=r;if(s==e||s==n)return null;if(s>e&&s<n)return new this.constructor(s,s)}return e<=r&&r<n&&n<o?new this.constructor(r,n):r<e&&e<o&&o<=n?new this.constructor(e,o):r<e&&e<=n&&n<o?this.clone():e<=r&&r<=o&&o<=n?new this.constructor(r,o):null}},{key:"isEqual",value:function(t){return this.start.isSame(t.start)&&this.end.isSame(t.end)}},{key:"isSame",value:function(t){return this.isEqual(t)}},{key:"overlaps",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{adjacent:!1},n=null!==this.intersect(t);return e.adjacent&&!n?this.adjacent(t):n}},{key:"reverseBy",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{excludeStart:!1,step:1},n=this;return o({},p.default.iterator,function(){var r=e.step||1,o=Math.abs(n.start.diff(n.end,t))/r,i=e.excludeStart||!1,u=0;return e.hasOwnProperty("exclusive")&&(i=e.exclusive),{next:function(){var e=n.end.clone().subtract(u*r,t),a=i?!(u<o):!(u<=o);return u++,{done:a,value:a?void 0:e}}}})}},{key:"reverseByRange",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{excludeStart:!1,step:1},n=this,r=e.step||1,i=this.valueOf()/t.valueOf()/r,u=Math.floor(i),a=e.excludeStart||!1,s=0;return e.hasOwnProperty("exclusive")&&(a=e.exclusive),o({},p.default.iterator,function(){return u===1/0?{done:!0}:{next:function(){var e=(0,v.default)(n.end.valueOf()-t.valueOf()*s*r),o=u===i&&a?!(s<u):!(s<=u);return s++,{done:o,value:o?void 0:e}}}})}},{key:"snapTo",value:function(t){var e=this.clone();return e.start.isSame((0,v.default)(-864e13))||(e.start=e.start.startOf(t)),e.end.isSame((0,v.default)(864e13))||(e.end=e.end.endOf(t)),e}},{key:"subtract",value:function(t){var e=this.start.valueOf(),n=this.end.valueOf(),r=t.start.valueOf(),o=t.end.valueOf();return null===this.intersect(t)?[this]:r<=e&&e<n&&n<=o?[]:r<=e&&e<o&&o<n?[new this.constructor(o,n)]:e<r&&r<n&&n<=o?[new this.constructor(e,r)]:e<r&&r<o&&o<n?[new this.constructor(e,r),new this.constructor(o,n)]:e<r&&r<n&&o<n?[new this.constructor(e,r),new this.constructor(r,n)]:[]}},{key:"toDate",value:function(){return[this.start.toDate(),this.end.toDate()]}},{key:"toString",value:function(){return this.start.format()+"/"+this.end.format()}},{key:"valueOf",value:function(){return this.end.valueOf()-this.start.valueOf()}}]),t}()},function(t,e,n){"use strict";var r,o=n(6),i=n(13),u=n(9),a=n(15);r=t.exports=function(t,e){var n,r,u,s,c;return arguments.length<2||"string"!=typeof t?(s=e,e=t,t=null):s=arguments[2],null==t?(n=u=!0,r=!1):(n=a.call(t,"c"),r=a.call(t,"e"),u=a.call(t,"w")),c={value:e,configurable:n,enumerable:r,writable:u},s?o(i(s),c):c},r.gs=function(t,e,n){var r,s,c,f;return"string"!=typeof t?(c=n,n=e,e=t,t=null):c=arguments[3],null==e?e=void 0:u(e)?null==n?n=void 0:u(n)||(c=n,n=void 0):(c=e,e=n=void 0),null==t?(r=!0,s=!1):(r=a.call(t,"c"),s=a.call(t,"e")),f={get:e,set:n,configurable:r,enumerable:s},c?o(i(c),f):f}},function(t,e,n){"use strict";t.exports=function(){}},function(t,e,n){"use strict";t.exports=n(7)()?Object.assign:n(8)},function(t,e,n){"use strict";t.exports=function(){var t,e=Object.assign;return"function"==typeof e&&(t={foo:"raz"},e(t,{bar:"dwa"},{trzy:"trzy"}),t.foo+t.bar+t.trzy==="razdwatrzy")}},function(t,e,n){"use strict";var r=n(10),o=n(14),i=Math.max;t.exports=function(t,e){var n,u,a,s=i(arguments.length,2);for(t=Object(o(t)),a=function(r){try{t[r]=e[r]}catch(t){n||(n=t)}},u=1;u<s;++u)e=arguments[u],r(e).forEach(a);if(void 0!==n)throw n;return t}},function(t,e,n){"use strict";t.exports=function(t){return"function"==typeof t}},function(t,e,n){"use strict";t.exports=n(11)()?Object.keys:n(12)},function(t,e,n){"use strict";t.exports=function(){try{return Object.keys("primitive"),!0}catch(t){return!1}}},function(t,e,n){"use strict";var r=n(0),o=Object.keys;t.exports=function(t){return o(r(t)?Object(t):t)}},function(t,e,n){"use strict";var r=n(0),o=Array.prototype.forEach,i=Object.create,u=function(t,e){var n;for(n in t)e[n]=t[n]};t.exports=function(t){var e=i(null);return o.call(arguments,function(t){r(t)&&u(Object(t),e)}),e}},function(t,e,n){"use strict";var r=n(0);t.exports=function(t){if(!r(t))throw new TypeError("Cannot use null or undefined");return t}},function(t,e,n){"use strict";t.exports=n(16)()?String.prototype.contains:n(17)},function(t,e,n){"use strict";var r="razdwatrzy";t.exports=function(){return"function"==typeof r.contains&&(!0===r.contains("dwa")&&!1===r.contains("foo"))}},function(t,e,n){"use strict";var r=String.prototype.indexOf;t.exports=function(t){return r.call(this,t,arguments[1])>-1}},function(t,e,n){"use strict";var r={object:!0,symbol:!0};t.exports=function(){var t;if("function"!=typeof Symbol)return!1;t=Symbol("test symbol");try{String(t)}catch(t){return!1}return!!r[typeof Symbol.iterator]&&(!!r[typeof Symbol.toPrimitive]&&!!r[typeof Symbol.toStringTag])}},function(t,e,n){"use strict";t.exports=function(t){return!!t&&("symbol"==typeof t||!!t.constructor&&("Symbol"===t.constructor.name&&"Symbol"===t[t.constructor.toStringTag]))}},function(t,e,n){"use strict";var r,o,i,u,a=n(4),s=n(21),c=Object.create,f=Object.defineProperties,l=Object.defineProperty,v=Object.prototype,d=c(null);if("function"==typeof Symbol){r=Symbol;try{String(r()),u=!0}catch(t){}}var p=function(){var t=c(null);return function(e){for(var n,r,o=0;t[e+(o||"")];)++o;return e+=o||"",t[e]=!0,n="@@"+e,l(v,n,a.gs(null,function(t){r||(r=!0,l(this,n,a(t)),r=!1)})),n}}();i=function(t){if(this instanceof i)throw new TypeError("Symbol is not a constructor");return o(t)},t.exports=o=function t(e){var n;if(this instanceof t)throw new TypeError("Symbol is not a constructor");return u?r(e):(n=c(i.prototype),e=void 0===e?"":String(e),f(n,{__description__:a("",e),__name__:a("",p(e))}))},f(o,{for:a(function(t){return d[t]?d[t]:d[t]=o(String(t))}),keyFor:a(function(t){var e;s(t);for(e in d)if(d[e]===t)return e}),hasInstance:a("",r&&r.hasInstance||o("hasInstance")),isConcatSpreadable:a("",r&&r.isConcatSpreadable||o("isConcatSpreadable")),iterator:a("",r&&r.iterator||o("iterator")),match:a("",r&&r.match||o("match")),replace:a("",r&&r.replace||o("replace")),search:a("",r&&r.search||o("search")),species:a("",r&&r.species||o("species")),split:a("",r&&r.split||o("split")),toPrimitive:a("",r&&r.toPrimitive||o("toPrimitive")),toStringTag:a("",r&&r.toStringTag||o("toStringTag")),unscopables:a("",r&&r.unscopables||o("unscopables"))}),f(i.prototype,{constructor:a(o),toString:a("",function(){return this.__name__})}),f(o.prototype,{toString:a(function(){return"Symbol ("+s(this).__description__+")"}),valueOf:a(function(){return s(this)})}),l(o.prototype,o.toPrimitive,a("",function(){var t=s(this);return"symbol"==typeof t?t:t.toString()})),l(o.prototype,o.toStringTag,a("c","Symbol")),l(i.prototype,o.toStringTag,a("c",o.prototype[o.toStringTag])),l(i.prototype,o.toPrimitive,a("c",o.prototype[o.toPrimitive]))},function(t,e,n){"use strict";var r=n(19);t.exports=function(t){if(!r(t))throw new TypeError(t+" is not a symbol");return t}}])});

},{"moment":4}],3:[function(require,module,exports){
(function (root, factory) {
    if (typeof exports === 'object') {
        module.exports = factory(require('moment'));
    } else if (typeof define === 'function' && define.amd) {
        define('moment-recur', ['moment'], factory);
    } else {
        root.moment = factory(root.moment);
    }
}(this, function (moment) {
    var hasModule;

    hasModule = (typeof module !== "undefined" && module !== null) && (module.exports != null);

    if (typeof moment === 'undefined') {
      throw Error("Can't find moment");
    }

    // Interval object for creating and matching interval-based rules
    var Interval = (function() {
        function createInterval(units, measure) {
            // Make sure all of the units are integers greater than 0.
            for (var unit in units) {
                if (units.hasOwnProperty(unit)) {
                    if (parseInt(unit, 10) <= 0) {
                        throw Error('Intervals must be greater than zero');
                    }
                }
            }

            return {
                measure: measure.toLowerCase(),
                units: units
            };
        }

        function matchInterval(type, units, start, date) {
            // Get the difference between the start date and the provided date,
            // using the required measure based on the type of rule'
            var diff = null;
            if (date.isBefore(start)) {
                diff = start.diff(date, type, true);
            } else {
                diff = date.diff(start, type, true);
            }
            if (type == 'days') {
                // if we are dealing with days, we deal with whole days only.
                diff = parseInt(diff);
            }

            // Check to see if any of the units provided match the date
            for (var unit in units) {
                if (units.hasOwnProperty(unit)) {
                    unit = parseInt(unit, 10);

                    // If the units divide evenly into the difference, we have a match
                    if ((diff % unit) === 0) {
                        return true;
                    }
                }
            }

            return false;
        }

        return {
          create: createInterval,
          match: matchInterval
        };
    })();

    // Calendar object for creating and matching calendar-based rules
    var Calendar = (function (){
        // Dictionary of unit types based on measures
        var unitTypes = {
            "daysOfMonth": "date",
            "daysOfWeek": "day",
            "weeksOfMonth": "monthWeek",
            "weeksOfMonthByDay": "monthWeekByDay",
            "weeksOfYear": "week",
            "monthsOfYear": "month"
        };

        // Dictionary of ranges based on measures
        var ranges = {
            "daysOfMonth"       : { low: 1, high: 31 },
            "daysOfWeek"        : { low: 0, high: 6 },
            "weeksOfMonth"      : { low: 0, high: 4 },
            "weeksOfMonthByDay" : { low: 0, high: 4 },
            "weeksOfYear"       : { low: 0, high: 52 },
            "monthsOfYear"      : { low: 0, high: 11 }
        };

        // Private function for checking the range of calendar values
        function checkRange(low, high, list) {
            list.forEach(function(v) {
                if (v < low || v > high) {
                    throw Error('Value should be in range ' + low + ' to ' + high);
                }
            });
        }

        // Private function to convert day and month names to numbers
        function namesToNumbers(list, nameType) {
            var unit, unitInt, unitNum;
            var newList = {};

            for(unit in list) {
                if (list.hasOwnProperty(unit)) {
                    unitInt = parseInt(unit, 10);

                    if (isNaN(unitInt)) {
                        unitInt = unit;
                    }

                    unitNum = moment().set(nameType, unitInt).get(nameType);
                    newList[unitNum] = list[unit];
                }
            }

            return newList;
        }

        function createCalendarRule(list, measure) {
            var keys = [];

            // Convert day/month names to numbers, if needed
            if (measure === "daysOfWeek") {
                list = namesToNumbers(list, "days");
            }

            if (measure === "monthsOfYear") {
                list = namesToNumbers(list, "months");
            }

            for (var key in list) if (hasOwnProperty.call(list, key)) keys.push(key);

            // Make sure the listed units are in the measure's range
            checkRange(ranges[measure].low,
                       ranges[measure].high,
                       keys);

            return {
                measure: measure,
                units: list
            };
        }

        function matchCalendarRule(measure, list, date) {
            // Get the unit type (i.e. date, day, week, monthWeek, weeks, months)
            var unitType = unitTypes[measure];

            // Get the unit based on the required measure of the date
            var unit = date[unitType]();

            // If the unit is in our list, return true, else return false
            if (list[unit]) {
                return true;
            }

            // match on end of month days
            if (unitType === 'date' && unit == date.add(1, 'months').date(0).format('D') && unit < 31) {
                while (unit <= 31) {
                    if (list[unit]) {
                        return true;
                    }
                    unit++;
                }
            }

            return false;
        }

        return {
            create: createCalendarRule,
            match: matchCalendarRule
        };
    })();

    // The main Recur object to provide an interface for settings, rules, and matching
    var Recur = (function() {

        // A dictionary used to match rule measures to rule types
        var ruleTypes = {
            "days": "interval",
            "weeks": "interval",
            "months": "interval",
            "years": "interval",
            "daysOfWeek": "calendar",
            "daysOfMonth": "calendar",
            "weeksOfMonth": "calendar",
            "weeksOfMonthByDay": "calendar",
            "weeksOfYear": "calendar",
            "monthsOfYear": "calendar"
        };

        // a dictionary of plural and singular measures
        var measures = {
            "days": "day",
            "weeks": "week",
            "months": "month",
            "years": "year",
            "daysOfWeek": "dayOfWeek",
            "daysOfMonth": "dayOfMonth",
            "weeksOfMonth": "weekOfMonth",
            "weeksOfMonthByDay": "weekOfMonthByDay",
            "weeksOfYear": "weekOfYear",
            "monthsOfYear": "monthOfYear"
        };


        /////////////////////////////////
        // Private Methods             //
        // Must be called with .call() //
        /////////////////////////////////

        // Private method that tries to set a rule.
        function trigger() {
            var rule;
            var ruleType = ruleTypes[this.measure];

            if (!(this instanceof Recur)) {
                throw Error("Private method trigger() was called directly or not called as instance of Recur!");
            }

            // Make sure units and measure is defined and not null
            if ((typeof this.units === "undefined" || this.units === null) || !this.measure) {
                return this;
            }

            // Error if we don't have a valid ruleType
            if (ruleType !== "calendar" && ruleType !== "interval") {
                throw Error("Invalid measure provided: " + this.measure);
            }

            // Create the rule
            if (ruleType === "interval") {
                if (!this.start) {
                    throw Error("Must have a start date set to set an interval!");
                }

                rule = Interval.create(this.units, this.measure);
            }

            if (ruleType === "calendar") {
                rule = Calendar.create(this.units, this.measure);
            }

            // Remove the temporary rule data
            this.units = null;
            this.measure = null;

            if (rule.measure === 'weeksOfMonthByDay' && !this.hasRule('daysOfWeek')) {
                throw Error("weeksOfMonthByDay must be combined with daysOfWeek");
            }

            // Remove existing rule based on measure
            for (var i = 0; i < this.rules.length; i++) {
                if (this.rules[i].measure === rule.measure) {
                    this.rules.splice(i, 1);
                }
            }

            this.rules.push(rule);
            return this;
        }

        // Private method to get next, previous or all occurrences
        function getOccurrences(num, format, type) {
            var currentDate, date;
            var dates = [];

            if (!(this instanceof Recur)) {
                throw Error("Private method trigger() was called directly or not called as instance of Recur!");
            }

            if (!this.start && !this.from) {
                throw Error("Cannot get occurrences without start or from date.");
            }

            if (type === "all" && !this.end) {
                throw Error("Cannot get all occurrences without an end date.");
            }

            if (!!this.end && (this.start > this.end)) {
                throw Error("Start date cannot be later than end date.");
            }

            // Return empty set if the caller doesn't want any for next/prev
            if (type !== "all" && !(num > 0)) {
                return dates;
            }

            // Start from the from date, or the start date if from is not set.
            currentDate = (this.from || this.start).clone();

            // Include the initial date in the results if wanting all dates
            if (type === "all") {
                if (this.matches(currentDate, false)) {
                    date = format ? currentDate.format(format) : currentDate.clone();
                    dates.push(date);
                }
            }

            // Get the next N dates, if num is null then infinite
            while (dates.length < (num===null ? dates.length+1 : num)) {
                if (type === "next" || type === "all") {
                    currentDate.add(1, "day");
                } else {
                    currentDate.subtract(1, "day");
                }

                //console.log("Match: " + currentDate.format("L") + " - " + this.matches(currentDate, true));

                // Don't match outside the date if generating all dates within start/end
                if (this.matches(currentDate, (type==="all"?false:true))) {
                    date = format ? currentDate.format(format) : currentDate.clone();
                    dates.push(date);
                }
                if(type === "all" && currentDate >= this.end) {
                    break;
                }
            }

            return dates;
        }


        ///////////////////////
        // Private Functions //
        ///////////////////////

        // Private function to see if a date is within range of start/end
        function inRange(start, end, date) {
            if (start && date.isBefore(start)) { return false; }
            if (end && date.isAfter(end)) { return false; }
            return true;
        }

        // Private function to turn units into objects
        function unitsToObject(units) {
            var list = {};

            if (Object.prototype.toString.call(units) == '[object Array]') {
                units.forEach(function(v) {
                    list[v] = true;
                });
            } else if (units === Object(units)) {
                list = units;
            } else if ((Object.prototype.toString.call(units) == '[object Number]') || (Object.prototype.toString.call(units) == '[object String]')) {
                list[units] = true;
            } else {
                throw Error("Provide an array, object, string or number when passing units!");
            }

            return list;
        }

        // Private function to check if a date is an exception
        function isException(exceptions, date) {
            for (var i = 0, len = exceptions.length; i < len; i++) {
                if (moment(exceptions[i]).isSame(date)) {
                    return true;
                }
            }
            return false;
        }

        // Private function to pluralize measure names for use with dictionaries.
        function pluralize(measure) {
            switch(measure) {
                case "day":
                    return "days";

                case "week":
                    return "weeks";

                case "month":
                    return "months";

                case "year":
                    return "years";

                case "dayOfWeek":
                    return "daysOfWeek";

                case "dayOfMonth":
                    return "daysOfMonth";

                case "weekOfMonth":
                    return "weeksOfMonth";

                case "weekOfMonthByDay":
                    return "weeksOfMonthByDay";

                case "weekOfYear":
                    return "weeksOfYear";

                case "monthOfYear":
                    return "monthsOfYear";

                default:
                    return measure;
            }
        }

        // Private funtion to see if all rules match
        function matchAllRules(rules, date, start) {
            var i, len, rule, type;

            for (i = 0, len = rules.length; i < len; i++) {
                rule = rules[i];
                type = ruleTypes[rule.measure];

                if (type === "interval") {
                    if (!Interval.match(rule.measure, rule.units, start, date)) {
                        return false;
                    }
                } else if (type === "calendar") {
                    if (!Calendar.match(rule.measure, rule.units, date)) {
                        return false;
                    }
                } else {
                    return false;
                }
            }

            return true;
        }

        // Private function to create measure functions
        function createMeasure(measure) {
            return function(units) {
                this.every.call(this, units, measure);
                return this;
            };
        }


        //////////////////////
        // Public Functions //
        //////////////////////

        // Recur Object Constrcutor
        var Recur = function(options) {
            if (options.start) {
                this.start = moment(options.start).dateOnly();
            }

            if (options.end) {
                this.end = moment(options.end).dateOnly();
            }

            // Our list of rules, all of which must match
            this.rules = options.rules || [];

            // Our list of exceptions. Match always fails on these dates.
            var exceptions = options.exceptions || [];
            this.exceptions = [];
            for(var i = 0; i < exceptions.length; i++) {
                this.except(exceptions[i]);
            }

            // Temporary units integer, array, or object. Does not get imported/exported.
            this.units = null;

            // Temporary measure type. Does not get imported/exported.
            this.measure = null;

            // Temporary from date for next/previous. Does not get imported/exported.
            this.from = null;

            return this;
        };

        // Get/Set start date
        Recur.prototype.startDate = function(date) {
            if (date === null) {
                this.start = null;
                return this;
            }

            if (date) {
                this.start = moment(date).dateOnly();
                return this;
            }

            return this.start;
        };

        // Get/Set end date
        Recur.prototype.endDate = function(date) {
            if (date === null) {
                this.end = null;
                return this;
            }

            if (date) {
                this.end = moment(date).dateOnly();
                return this;
            }

            return this.end;
        };

        // Get/Set a temporary from date
        Recur.prototype.fromDate = function(date) {
             if (date === null) {
                this.from = null;
                return this;
            }

            if (date) {
                this.from = moment(date).dateOnly();
                return this;
            }

            return this.from;
        };

        // Export the settings, rules, and exceptions of this recurring date
        Recur.prototype.save = function() {
            var data = {};

            if (this.start && moment(this.start).isValid()) {
                data.start = this.start.format("L");
            }

            if (this.end && moment(this.end).isValid()) {
                data.end = this.end.format("L");
            }

            data.exceptions = [];
            for (var i = 0, len = this.exceptions.length; i < len; i++) {
                data.exceptions.push(this.exceptions[i].format("L"));
            }

            data.rules = this.rules;

            return data;
        };

        // Return boolean value based on whether this date repeats (has rules or not)
        Recur.prototype.repeats = function() {
            if (this.rules.length > 0) {
                return true;
            }

            return false;
        };

        // Set the units and, optionally, the measure
        Recur.prototype.every = function(units, measure) {

            if ((typeof units !== "undefined") && (units !== null)) {
                this.units = unitsToObject(units);
            }

            if ((typeof measure !== "undefined") && (measure !== null)) {
                this.measure = pluralize(measure);
            }

            return trigger.call(this);
        };

        // Creates an exception date to prevent matches, even if rules match
        Recur.prototype.except = function(date) {
            date = moment(date).dateOnly();
            this.exceptions.push(date);
            return this;
        };

        // Forgets rules (by passing measure) and exceptions (by passing date)
        Recur.prototype.forget = function(dateOrRule) {
            var i, len;
            var whatMoment = moment(dateOrRule);

            // If valid date, try to remove it from exceptions
            if (whatMoment.isValid()) {
                whatMoment = whatMoment.dateOnly(); // change to date only for perfect comparison
                for (i = 0, len = this.exceptions.length; i < len; i++) {
                    if (whatMoment.isSame(this.exceptions[i])) {
                        this.exceptions.splice(i, 1);
                        return this;
                    }
                }

                return this;
            }

            // Otherwise, try to remove it from the rules
            for (i = 0, len = this.rules.length; i < len; i++) {
                if (this.rules[i].measure === pluralize(dateOrRule)) {
                    this.rules.splice(i, 1);
                }
            }
        };

        // Checks if a rule has been set on the chain
        Recur.prototype.hasRule = function(measure) {
            var i, len;
            for (i = 0, len = this.rules.length; i < len; i++) {
                if (this.rules[i].measure === pluralize(measure)) {
                    return true;
                }
            }
            return false;
        };

        // Attempts to match a date to the rules
        Recur.prototype.matches = function(dateToMatch, ignoreStartEnd) {
            var date = moment(dateToMatch).dateOnly();

            if (!date.isValid()) {
                throw Error("Invalid date supplied to match method: " + dateToMatch);
            }

            if (!ignoreStartEnd && !inRange(this.start, this.end, date)) { return false }

            if (isException(this.exceptions, date)) { return false; }

            if (!matchAllRules(this.rules, date, this.start)) { return false; }

            // if we passed everything above, then this date matches
            return true;
        };

        // Get next N occurrences
        Recur.prototype.next = function(num, format) {
            return getOccurrences.call(this, num, format, "next");
        };

        // Get previous N occurrences
        Recur.prototype.previous = function(num, format) {
            return getOccurrences.call(this, num, format, "previous");
        };

        // Get all occurrences between start and end date
        Recur.prototype.all = function(format) {
            return getOccurrences.call(this, null, format, "all");
        };

        // Create the measure functions (days(), months(), daysOfMonth(), monthsOfYear(), etc.)
        for (var measure in measures) {
            if (ruleTypes.hasOwnProperty(measure)) {
                Recur.prototype[measure] = Recur.prototype[measures[measure]] = createMeasure(measure);
            }
        }

        return Recur;
    }());

    // Recur can be created the following ways:
    // moment.recur()
    // moment.recur(options)
    // moment.recur(start)
    // moment.recur(start, end)
    moment.recur = function(start, end) {
        // If we have an object, use it as a set of options
        if (start === Object(start) && !moment.isMoment(start)) {
            return new Recur(start);
        }

        // else, use the values passed
        return new Recur({ start: start, end: end });
    };

    // Recur can also be created the following ways:
    // moment().recur()
    // moment().recur(options)
    // moment().recur(start, end)
    // moment(start).recur(end)
    // moment().recur(end)
    moment.fn.recur = function(start, end) {
        // If we have an object, use it as a set of options
        if (start === Object(start) && !moment.isMoment(start)) {
            // if we have no start date, use the moment
            if (typeof start.start === 'undefined') {
                start.start = this;
            }

            return new Recur( start );
        }

        // if there is no end value, use the start value as the end
        if (!end) {
            end = start;
            start = undefined;
        }

        // use the moment for the start value
        if (!start) {
            start = this;
        }

        return new Recur({ start: start, end: end, moment: this });
    };

    // Plugin for calculating the week of the month of a date
    moment.fn.monthWeek = function() {
        // First day of the first week of the month
        var week0 = this.clone().startOf("month").startOf("week");

        // First day of week
        var day0 = this.clone().startOf("week");

        return day0.diff(week0, "weeks");
    };

    // Plugin for calculating the occurrence of the day of the week in the month.
    // Similar to `moment().monthWeek()`, the return value is zero-indexed.
    // A return value of 2 means the date is the 3rd occurence of that day
    // of the week in the month.
    moment.fn.monthWeekByDay = function(date) {
        return Math.floor((this.date()-1)/7);
    };

    // Plugin for removing all time information from a given date
    moment.fn.dateOnly = function() {
        if (this.tz && typeof(moment.tz) == 'function') {
            return moment.tz(this.format('YYYY-MM-DDT00:00:00.000Z'), 'UTC');
        } else {
            return this.hours(0).minutes(0).seconds(0).milliseconds(0).add(this.utcOffset(), "minute").utcOffset(0);
        }
    };

    return moment;
}));

},{"moment":4}],4:[function(require,module,exports){
//! moment.js
//! version : 2.29.3
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return (
            input instanceof Array ||
            Object.prototype.toString.call(input) === '[object Array]'
        );
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return (
            input != null &&
            Object.prototype.toString.call(input) === '[object Object]'
        );
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (hasOwnProp(obj, k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return (
            typeof input === 'number' ||
            Object.prototype.toString.call(input) === '[object Number]'
        );
    }

    function isDate(input) {
        return (
            input instanceof Date ||
            Object.prototype.toString.call(input) === '[object Date]'
        );
    }

    function map(arr, fn) {
        var res = [],
            i,
            arrLen = arr.length;
        for (i = 0; i < arrLen; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false,
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this),
                len = t.length >>> 0,
                i;

            for (i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m),
                parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                }),
                isNowValid =
                    !isNaN(m._d.getTime()) &&
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidEra &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid =
                    isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = (hooks.momentProperties = []),
        updateInProgress = false;

    function copyConfig(to, from) {
        var i,
            prop,
            val,
            momentPropertiesLen = momentProperties.length;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentPropertiesLen > 0) {
            for (i = 0; i < momentPropertiesLen; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return (
            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
        );
    }

    function warn(msg) {
        if (
            hooks.suppressDeprecationWarnings === false &&
            typeof console !== 'undefined' &&
            console.warn
        ) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [],
                    arg,
                    i,
                    key,
                    argLen = arguments.length;
                for (i = 0; i < argLen; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (key in arguments[0]) {
                            if (hasOwnProp(arguments[0], key)) {
                                arg += key + ': ' + arguments[0][key] + ', ';
                            }
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(
                    msg +
                        '\nArguments: ' +
                        Array.prototype.slice.call(args).join('') +
                        '\n' +
                        new Error().stack
                );
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    function set(config) {
        var prop, i;
        for (i in config) {
            if (hasOwnProp(config, i)) {
                prop = config[i];
                if (isFunction(prop)) {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' +
                /\d{1,2}/.source
        );
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (
                hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])
            ) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i,
                res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
    };

    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (
            (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
            absNumber
        );
    }

    var formattingTokens =
            /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        formatFunctions = {},
        formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(
                    func.apply(this, arguments),
                    token
                );
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '',
                i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i])
                    ? array[i].call(mom, format)
                    : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] =
            formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(
                localFormattingTokens,
                replaceLongDateFormatTokens
            );
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper
            .match(formattingTokens)
            .map(function (tok) {
                if (
                    tok === 'MMMM' ||
                    tok === 'MM' ||
                    tok === 'DD' ||
                    tok === 'dddd'
                ) {
                    return tok.slice(1);
                }
                return tok;
            })
            .join('');

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d',
        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
    };

    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output)
            ? output(number, withoutSuffix, string, isFuture)
            : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string'
            ? aliases[units] || aliases[units.toLowerCase()]
            : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [],
            u;
        for (u in unitsObj) {
            if (hasOwnProp(unitsObj, u)) {
                units.push({ unit: u, priority: priorities[u] });
            }
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function absFloor(number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get(mom, unit) {
        return mom.isValid()
            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
            : NaN;
    }

    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (
                unit === 'FullYear' &&
                isLeapYear(mom.year()) &&
                mom.month() === 1 &&
                mom.date() === 29
            ) {
                value = toInt(value);
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                    value,
                    mom.month(),
                    daysInMonth(value, mom.month())
                );
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }

    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units),
                i,
                prioritizedLen = prioritized.length;
            for (i = 0; i < prioritizedLen; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    var match1 = /\d/, //       0 - 9
        match2 = /\d\d/, //      00 - 99
        match3 = /\d{3}/, //     000 - 999
        match4 = /\d{4}/, //    0000 - 9999
        match6 = /[+-]?\d{6}/, // -999999 - 999999
        match1to2 = /\d\d?/, //       0 - 99
        match3to4 = /\d\d\d\d?/, //     999 - 9999
        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
        match1to3 = /\d{1,3}/, //       0 - 999
        match1to4 = /\d{1,4}/, //       0 - 9999
        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
        matchUnsigned = /\d+/, //       0 - inf
        matchSigned = /[+-]?\d+/, //    -inf - inf
        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        // any word (or two) characters or numbers including two/three word month in arabic.
        // includes scottish gaelic two word and hyphenated months
        matchWord =
            /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
        regexes;

    regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex)
            ? regex
            : function (isStrict, localeData) {
                  return isStrict && strictRegex ? strictRegex : regex;
              };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(
            s
                .replace('\\', '')
                .replace(
                    /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
                    function (matched, p1, p2, p3, p4) {
                        return p1 || p2 || p3 || p4;
                    }
                )
        );
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback,
            tokenLen;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        tokenLen = token.length;
        for (i = 0; i < tokenLen; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,
        WEEK = 7,
        WEEKDAY = 8;

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1
            ? isLeapYear(year)
                ? 29
                : 28
            : 31 - ((modMonth % 7) % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths =
            'January_February_March_April_May_June_July_August_September_October_November_December'.split(
                '_'
            ),
        defaultLocaleMonthsShort =
            'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
        defaultMonthsShortRegex = matchWord,
        defaultMonthsRegex = matchWord;

    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months)
                ? this._months
                : this._months['standalone'];
        }
        return isArray(this._months)
            ? this._months[m.month()]
            : this._months[
                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                      ? 'format'
                      : 'standalone'
              ][m.month()];
    }

    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort)
                ? this._monthsShort
                : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort)
            ? this._monthsShort[m.month()]
            : this._monthsShort[
                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
              ][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp(
                    '^' + this.months(mom, '').replace('.', '') + '$',
                    'i'
                );
                this._shortMonthsParse[i] = new RegExp(
                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                    'i'
                );
            }
            if (!strict && !this._monthsParse[i]) {
                regex =
                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'MMMM' &&
                this._longMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'MMM' &&
                this._shortMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict
                ? this._monthsShortStrictRegex
                : this._monthsShortRegex;
        }
    }

    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict
                ? this._monthsStrictRegex
                : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._monthsShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] =
            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear,
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear,
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(
        ['w', 'ww', 'W', 'WW'],
        function (input, week, config, token) {
            week[token.substr(0, 1)] = toInt(input);
        }
    );

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6, // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays =
            'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;

    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays)
            ? this._weekdays
            : this._weekdays[
                  m && m !== true && this._weekdays.isFormat.test(format)
                      ? 'format'
                      : 'standalone'
              ];
        return m === true
            ? shiftWeekdays(weekdays, this._week.dow)
            : m
            ? weekdays[m.day()]
            : weekdays;
    }

    function localeWeekdaysShort(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : m
            ? this._weekdaysShort[m.day()]
            : this._weekdaysShort;
    }

    function localeWeekdaysMin(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : m
            ? this._weekdaysMin[m.day()]
            : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._shortWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._minWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
            }
            if (!this._weekdaysParse[i]) {
                regex =
                    '^' +
                    this.weekdays(mom, '') +
                    '|^' +
                    this.weekdaysShort(mom, '') +
                    '|^' +
                    this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'dddd' &&
                this._fullWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'ddd' &&
                this._shortWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'dd' &&
                this._minWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict
                ? this._weekdaysStrictRegex
                : this._weekdaysRegex;
        }
    }

    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict
                ? this._weekdaysShortStrictRegex
                : this._weekdaysShortRegex;
        }
    }

    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict
                ? this._weekdaysMinStrictRegex
                : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ''));
            shortp = regexEscape(this.weekdaysShort(mom, ''));
            longp = regexEscape(this.weekdays(mom, ''));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._weekdaysShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
        this._weekdaysMinStrictRegex = new RegExp(
            '^(' + minPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return (
            '' +
            hFormat.apply(this) +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return (
            '' +
            this.hours() +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(
                this.hours(),
                this.minutes(),
                lowercase
            );
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
        // Setting the hour should keep the time, because the user explicitly
        // specified which hour they want. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        getSetHour = makeGetSet('Hours', true);

    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse,
    };

    // internal storage for locale config files
    var locales = {},
        localeFamilies = {},
        globalLocale;

    function commonPrefix(arr1, arr2) {
        var i,
            minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
            if (arr1[i] !== arr2[i]) {
                return i;
            }
        }
        return minl;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (
                    next &&
                    next.length >= j &&
                    commonPrefix(split, next) >= j - 1
                ) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function isLocaleNameSane(name) {
        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
        return name.match('^[^/\\\\]*$') != null;
    }

    function loadLocale(name) {
        var oldLocale = null,
            aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (
            locales[name] === undefined &&
            typeof module !== 'undefined' &&
            module &&
            module.exports &&
            isLocaleNameSane(name)
        ) {
            try {
                oldLocale = globalLocale._abbr;
                aliasedRequire = require;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {
                // mark as not found to avoid repeating expensive file require call causing high CPU
                // when trying to find en-US, en_US, en-us for every format call
                locales[name] = null; // null means not found
            }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            } else {
                if (typeof console !== 'undefined' && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn(
                        'Locale ' + key + ' not found. Did you forget to load it?'
                    );
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, config) {
        if (config !== null) {
            var locale,
                parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple(
                    'defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                );
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config,
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale,
                tmpLocale,
                parentConfig = baseConfig;

            if (locales[name] != null && locales[name].parentLocale != null) {
                // Update existing child locale in-place to avoid memory-leaks
                locales[name].set(mergeConfigs(locales[name]._config, config));
            } else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) {
                    parentConfig = tmpLocale._config;
                }
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) {
                    // updateLocale is called for creating a new locale
                    // Set abbr so it will have a name (getters return
                    // undefined otherwise).
                    config.abbr = name;
                }
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
            }

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                    if (name === getSetGlobalLocale()) {
                        getSetGlobalLocale(name);
                    }
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow(m) {
        var overflow,
            a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH] < 0 || a[MONTH] > 11
                    ? MONTH
                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                    ? DATE
                    : a[HOUR] < 0 ||
                      a[HOUR] > 24 ||
                      (a[HOUR] === 24 &&
                          (a[MINUTE] !== 0 ||
                              a[SECOND] !== 0 ||
                              a[MILLISECOND] !== 0))
                    ? HOUR
                    : a[MINUTE] < 0 || a[MINUTE] > 59
                    ? MINUTE
                    : a[SECOND] < 0 || a[SECOND] > 59
                    ? SECOND
                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                    ? MILLISECOND
                    : -1;

            if (
                getParsingFlags(m)._overflowDayOfYear &&
                (overflow < YEAR || overflow > DATE)
            ) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex =
            /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        basicIsoRegex =
            /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
            ['YYYY-DDD', /\d{4}-\d{3}/],
            ['YYYY-MM', /\d{4}-\d\d/, false],
            ['YYYYYYMMDD', /[+-]\d{10}/],
            ['YYYYMMDD', /\d{8}/],
            ['GGGG[W]WWE', /\d{4}W\d{3}/],
            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
            ['YYYYDDD', /\d{7}/],
            ['YYYYMM', /\d{6}/, false],
            ['YYYY', /\d{4}/, false],
        ],
        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
            ['HH:mm', /\d\d:\d\d/],
            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
            ['HHmmss', /\d\d\d\d\d\d/],
            ['HHmm', /\d\d\d\d/],
            ['HH', /\d\d/],
        ],
        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
        rfc2822 =
            /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
        obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60,
        };

    // date from iso format
    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat,
            isoDatesLen = isoDates.length,
            isoTimesLen = isoTimes.length;

        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDatesLen; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimesLen; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    function extractFromRFC2822Strings(
        yearStr,
        monthStr,
        dayStr,
        hourStr,
        minuteStr,
        secondStr
    ) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10),
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s
            .replace(/\([^)]*\)|[\n\t]/g, ' ')
            .replace(/(\s\s+)/g, ' ')
            .replace(/^\s\s*/, '')
            .replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(
                    parsedInput[0],
                    parsedInput[1],
                    parsedInput[2]
                ).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10),
                m = hm % 100,
                h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)),
            parsedArray;
        if (match) {
            parsedArray = extractFromRFC2822Strings(
                match[4],
                match[3],
                match[2],
                match[5],
                match[6],
                match[7]
            );
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        if (config._strict) {
            config._isValid = false;
        } else {
            // Final attempt, use Input Fallback
            hooks.createFromInputFallback(config);
        }
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate(),
            ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (
                config._dayOfYear > daysInYear(yearToUse) ||
                config._dayOfYear === 0
            ) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] =
                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (
            config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0
        ) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(
            null,
            input
        );
        expectedWeekday = config._useUTC
            ? config._d.getUTCDay()
            : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (
            config._w &&
            typeof config._w.d !== 'undefined' &&
            config._w.d !== expectedWeekday
        ) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(
                w.GG,
                config._a[YEAR],
                weekOfYear(createLocal(), 1, 4).year
            );
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0,
            era,
            tokenLen;

        tokens =
            expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens.length;
        for (i = 0; i < tokenLen; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(
                    string.indexOf(parsedInput) + parsedInput.length
                );
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver =
            stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (
            config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0
        ) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(
            config._locale,
            config._a[HOUR],
            config._meridiem
        );

        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) {
            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,
            scoreToBeat,
            i,
            currentScore,
            validFormatFound,
            bestFormatIsValid = false,
            configfLen = config._f.length;

        if (configfLen === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < configfLen; i++) {
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (isValid(tempConfig)) {
                validFormatFound = true;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (!bestFormatIsValid) {
                if (
                    scoreToBeat == null ||
                    currentScore < scoreToBeat ||
                    validFormatFound
                ) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) {
                        bestFormatIsValid = true;
                    }
                }
            } else {
                if (currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i),
            dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map(
            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
            function (obj) {
                return obj && parseInt(obj, 10);
            }
        );

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (format === true || format === false) {
            strict = format;
            format = undefined;
        }

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if (
            (isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)
        ) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other < this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        ),
        prototypeMax = deprecate(
            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other > this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +new Date();
    };

    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond',
    ];

    function isDurationValid(m) {
        var key,
            unitHasDecimal = false,
            i,
            orderLen = ordering.length;
        for (key in m) {
            if (
                hasOwnProp(m, key) &&
                !(
                    indexOf.call(ordering, key) !== -1 &&
                    (m[key] == null || !isNaN(m[key]))
                )
            ) {
                return false;
            }
        }

        for (i = 0; i < orderLen; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds =
            +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (
                (dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
            ) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    // FORMATTING

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset(),
                sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return (
                sign +
                zeroFill(~~(offset / 60), 2) +
                separator +
                zeroFill(~~offset % 60, 2)
            );
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher),
            chunk,
            parts,
            minutes;

        if (matches === null) {
            return null;
        }

        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff =
                (isMoment(input) || isDate(input)
                    ? input.valueOf()
                    : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(
                        this,
                        createDuration(input - offset, 'm'),
                        1,
                        false
                    );
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {},
            other;

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted =
                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        // and further modified to allow for strings containing both week and day
        isoRegex =
            /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months,
            };
        } else if (isNumber(input) || !isNaN(+input)) {
            duration = {};
            if (key) {
                duration[key] = +input;
            } else {
                duration.milliseconds = +input;
            }
        } else if ((match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
            };
        } else if ((match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign),
            };
        } else if (duration == null) {
            // checks for null or undefined
            duration = {};
        } else if (
            typeof duration === 'object' &&
            ('from' in duration || 'to' in duration)
        ) {
            diffRes = momentsDifference(
                createLocal(duration.from),
                createLocal(duration.to)
            );

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
            ret._isValid = input._isValid;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months =
            other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(
                    name,
                    'moment().' +
                        name +
                        '(period, number) is deprecated. Please use moment().' +
                        name +
                        '(number, period). ' +
                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                );
                tmp = val;
                val = period;
                period = tmp;
            }

            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add = createAdder(1, 'add'),
        subtract = createAdder(-1, 'subtract');

    function isString(input) {
        return typeof input === 'string' || input instanceof String;
    }

    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
        return (
            isMoment(input) ||
            isDate(input) ||
            isString(input) ||
            isNumber(input) ||
            isNumberOrStringArray(input) ||
            isMomentInputObject(input) ||
            input === null ||
            input === undefined
        );
    }

    function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'years',
                'year',
                'y',
                'months',
                'month',
                'M',
                'days',
                'day',
                'd',
                'dates',
                'date',
                'D',
                'hours',
                'hour',
                'h',
                'minutes',
                'minute',
                'm',
                'seconds',
                'second',
                's',
                'milliseconds',
                'millisecond',
                'ms',
            ],
            i,
            property,
            propertyLen = properties.length;

        for (i = 0; i < propertyLen; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function isNumberOrStringArray(input) {
        var arrayTest = isArray(input),
            dataTypeTest = false;
        if (arrayTest) {
            dataTypeTest =
                input.filter(function (item) {
                    return !isNumber(item) && isString(input);
                }).length === 0;
        }
        return arrayTest && dataTypeTest;
    }

    function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'sameDay',
                'nextDay',
                'lastDay',
                'nextWeek',
                'lastWeek',
                'sameElse',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6
            ? 'sameElse'
            : diff < -1
            ? 'lastWeek'
            : diff < 0
            ? 'lastDay'
            : diff < 1
            ? 'sameDay'
            : diff < 2
            ? 'nextDay'
            : diff < 7
            ? 'nextWeek'
            : 'sameElse';
    }

    function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
            if (!arguments[0]) {
                time = undefined;
                formats = undefined;
            } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
            } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
            }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse',
            output =
                formats &&
                (isFunction(formats[format])
                    ? formats[format].call(this, now)
                    : formats[format]);

        return this.format(
            output || this.localeData().calendar(format, this, createLocal(now))
        );
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (
            (inclusivity[0] === '('
                ? this.isAfter(localFrom, units)
                : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')'
                ? this.isBefore(localTo, units)
                : !this.isAfter(localTo, units))
        );
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return (
                this.clone().startOf(units).valueOf() <= inputMs &&
                inputMs <= this.clone().endOf(units).valueOf()
            );
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year':
                output = monthDiff(this, that) / 12;
                break;
            case 'month':
                output = monthDiff(this, that);
                break;
            case 'quarter':
                output = monthDiff(this, that) / 3;
                break;
            case 'second':
                output = (this - that) / 1e3;
                break; // 1000
            case 'minute':
                output = (this - that) / 6e4;
                break; // 1000 * 60
            case 'hour':
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
            case 'day':
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
            case 'week':
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        if (a.date() < b.date()) {
            // end-of-month calculations work correct when the start month has more
            // days than the end month.
            return -monthDiff(b, a);
        }
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true,
            m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(
                m,
                utc
                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                    .toISOString()
                    .replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(
            m,
            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
        );
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment',
            zone = '',
            prefix,
            year,
            datetime,
            suffix;
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc()
                ? hooks.defaultFormatUtc
                : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ to: this, from: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ from: this, to: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData() {
        return this._locale;
    }

    var MS_PER_SECOND = 1000,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return ((dividend % divisor) + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(
                    this.year(),
                    this.month() - (this.month() % 3),
                    1
                );
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - this.weekday()
                );
                break;
            case 'isoWeek':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1)
                );
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(
                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                    MS_PER_HOUR
                );
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time =
                    startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3) + 3,
                        1
                    ) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday() + 7
                    ) - 1;
                break;
            case 'isoWeek':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1) + 7
                    ) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time +=
                    MS_PER_HOUR -
                    mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    ) -
                    1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond(),
        ];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds(),
        };
    }

    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2() {
        return isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict,
        };
    }

    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);

    addParseToken(
        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
        function (input, array, config, token) {
            var era = config._locale.erasParse(input, token, config._strict);
            if (era) {
                getParsingFlags(config).era = era;
            } else {
                getParsingFlags(config).invalidEra = input;
            }
        }
    );

    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);

    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    addParseToken(['yo'], function (input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
            match = input.match(config._locale._eraYearOrdinalRegex);
        }

        if (config._locale.eraYearOrdinalParse) {
            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
            array[YEAR] = parseInt(input, 10);
        }
    });

    function localeEras(m, format) {
        var i,
            l,
            date,
            eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
            switch (typeof eras[i].since) {
                case 'string':
                    // truncate time
                    date = hooks(eras[i].since).startOf('day');
                    eras[i].since = date.valueOf();
                    break;
            }

            switch (typeof eras[i].until) {
                case 'undefined':
                    eras[i].until = +Infinity;
                    break;
                case 'string':
                    // truncate time
                    date = hooks(eras[i].until).startOf('day').valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }

    function localeErasParse(eraName, format, strict) {
        var i,
            l,
            eras = this.eras(),
            name,
            abbr,
            narrow;
        eraName = eraName.toUpperCase();

        for (i = 0, l = eras.length; i < l; ++i) {
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();

            if (strict) {
                switch (format) {
                    case 'N':
                    case 'NN':
                    case 'NNN':
                        if (abbr === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNN':
                        if (name === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNNN':
                        if (narrow === eraName) {
                            return eras[i];
                        }
                        break;
                }
            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i];
            }
        }
    }

    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? +1 : -1;
        if (year === undefined) {
            return hooks(era.since).year();
        } else {
            return hooks(era.since).year() + (year - era.offset) * dir;
        }
    }

    function getEraName() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].name;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].name;
            }
        }

        return '';
    }

    function getEraNarrow() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].narrow;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].narrow;
            }
        }

        return '';
    }

    function getEraAbbr() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].abbr;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].abbr;
            }
        }

        return '';
    }

    function getEraYear() {
        var i,
            l,
            dir,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            dir = eras[i].since <= eras[i].until ? +1 : -1;

            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (
                (eras[i].since <= val && val <= eras[i].until) ||
                (eras[i].until <= val && val <= eras[i].since)
            ) {
                return (
                    (this.year() - hooks(eras[i].since).year()) * dir +
                    eras[i].offset
                );
            }
        }

        return this.year();
    }

    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }

    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }

    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }

    function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
    }

    function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
    }

    function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
    }

    function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
    }

    function computeErasParse() {
        var abbrPieces = [],
            namePieces = [],
            narrowPieces = [],
            mixedPieces = [],
            i,
            l,
            eras = this.eras();

        for (i = 0, l = eras.length; i < l; ++i) {
            namePieces.push(regexEscape(eras[i].name));
            abbrPieces.push(regexEscape(eras[i].abbr));
            narrowPieces.push(regexEscape(eras[i].narrow));

            mixedPieces.push(regexEscape(eras[i].name));
            mixedPieces.push(regexEscape(eras[i].abbr));
            mixedPieces.push(regexEscape(eras[i].narrow));
        }

        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp(
            '^(' + narrowPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(
        ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
        function (input, week, config, token) {
            week[token.substr(0, 2)] = toInt(input);
        }
    );

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy
        );
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.isoWeek(),
            this.isoWeekday(),
            1,
            4
        );
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null
            ? Math.ceil((this.month() + 1) / 3)
            : this.month((input - 1) * 3 + (this.month() % 3));
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict
            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
            : locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear =
            Math.round(
                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
            ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token, getSetMillisecond;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }

    getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return 'Moment<' + this.format() + '>';
        };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
        'dates accessor is deprecated. Use date instead.',
        getSetDayOfMonth
    );
    proto.months = deprecate(
        'months accessor is deprecated. Use month instead',
        getSetMonth
    );
    proto.years = deprecate(
        'years accessor is deprecated. Use year instead',
        getSetYear
    );
    proto.zone = deprecate(
        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
        getSetZone
    );
    proto.isDSTShifted = deprecate(
        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
        isDaylightSavingTimeShifted
    );

    function createUnix(input) {
        return createLocal(input * 1000);
    }

    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat(string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;

    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;

    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1(format, index, field, setter) {
        var locale = getLocale(),
            utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i,
            out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0,
            i,
            out = [];

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        eras: [
            {
                since: '0001-01-01',
                until: +Infinity,
                offset: 1,
                name: 'Anno Domini',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: 'Before Christ',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    toInt((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    // Side effect imports

    hooks.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        getSetGlobalLocale
    );
    hooks.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        getLocale
    );

    var mathAbs = Math.abs;

    function abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds,
            days = this._days,
            months = this._months,
            data = this._data,
            seconds,
            minutes,
            hours,
            years,
            monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (
            !(
                (milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0)
            )
        ) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return (days * 4800) / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return (months * 146097) / 4800;
    }

    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days,
            months,
            milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':
                    return months;
                case 'quarter':
                    return months / 3;
                case 'year':
                    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms'),
        asSeconds = makeAs('s'),
        asMinutes = makeAs('m'),
        asHours = makeAs('h'),
        asDays = makeAs('d'),
        asWeeks = makeAs('w'),
        asMonths = makeAs('M'),
        asQuarters = makeAs('Q'),
        asYears = makeAs('y');

    function clone$1() {
        return createDuration(this);
    }

    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds'),
        seconds = makeGetter('seconds'),
        minutes = makeGetter('minutes'),
        hours = makeGetter('hours'),
        days = makeGetter('days'),
        months = makeGetter('months'),
        years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round,
        thresholds = {
            ss: 44, // a few seconds to seconds
            s: 45, // seconds to minute
            m: 45, // minutes to hour
            h: 22, // hours to day
            d: 26, // days to month/week
            w: null, // weeks to month
            M: 11, // months to year
        };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            weeks = round(duration.as('w')),
            years = round(duration.as('y')),
            a =
                (seconds <= thresholds.ss && ['s', seconds]) ||
                (seconds < thresholds.s && ['ss', seconds]) ||
                (minutes <= 1 && ['m']) ||
                (minutes < thresholds.m && ['mm', minutes]) ||
                (hours <= 1 && ['h']) ||
                (hours < thresholds.h && ['hh', hours]) ||
                (days <= 1 && ['d']) ||
                (days < thresholds.d && ['dd', days]);

        if (thresholds.w != null) {
            a =
                a ||
                (weeks <= 1 && ['w']) ||
                (weeks < thresholds.w && ['ww', weeks]);
        }
        a = a ||
            (months <= 1 && ['M']) ||
            (months < thresholds.M && ['MM', months]) ||
            (years <= 1 && ['y']) || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var withSuffix = false,
            th = thresholds,
            locale,
            output;

        if (typeof argWithSuffix === 'object') {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') {
            withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === 'object') {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) {
                th.ss = argThresholds.s - 1;
            }
        }

        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000,
            days = abs$1(this._days),
            months = abs$1(this._months),
            minutes,
            hours,
            years,
            s,
            total = this.asSeconds(),
            totalSign,
            ymSign,
            daysSign,
            hmsSign;

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return (
            totalSign +
            'P' +
            (years ? ymSign + years + 'Y' : '') +
            (months ? ymSign + months + 'M' : '') +
            (days ? daysSign + days + 'D' : '') +
            (hours || minutes || seconds ? 'T' : '') +
            (hours ? hmsSign + hours + 'H' : '') +
            (minutes ? hmsSign + minutes + 'M' : '') +
            (seconds ? hmsSign + s + 'S' : '')
        );
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;

    proto$2.toIsoString = deprecate(
        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
        toISOString$1
    );
    proto$2.lang = lang;

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    //! moment.js

    hooks.version = '2.29.3';

    setHookCallback(createLocal);

    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD', // <input type="date" />
        TIME: 'HH:mm', // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW', // <input type="week" />
        MONTH: 'YYYY-MM', // <input type="month" />
    };

    return hooks;

})));

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "blessedLauraVicunaVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 22
    }),
    "data": {}
  }, {
    "key": "ourLadyQueenOfPeace",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 24
    }),
    "data": {}
  }, {
    "key": "saintTuribiusOfMogrovejoBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 27
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLadyOfLujanPatronessOfArgentina",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 8
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintIsidoreTheFarmer",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 15
    }),
    "data": {}
  }, {
    "key": "saintLuigiOrionePriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 16
    }),
    "data": {}
  }, {
    "key": "ourLadyOfItati",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsAugustineZhaoRongPriestAndCompanionsMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 10
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "ourLadyOfMountCarmel",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintCharbelMakhloufPriestAndHermit",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {}
  }, {
    "key": "saintFrancisSolanusPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 24
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintRocco",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 16
    }),
    "data": {}
  }, {
    "key": "blessedCeferinoNamuncura",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 26
    }),
    "data": {}
  }, {
    "key": "saintRoseOfLima",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 30
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLadyOfMercy",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 24
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintHectorValdivielsoSaezMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 9
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "ourLadyOfThePillar",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 12
    }),
    "data": {}
  }, {
    "key": "saintsRoqueGonzalezAlfonsoRodriguezOlmedoAndJuanDelCastilloPriestsAndMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 17
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintElizabethOfHungary",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 18
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLadyOfGuadalupe",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 12
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, // Saturday of the 2nd Week of Easter
  {
    "key": "ourLadyOfTheValley",
    "type": _constants.Types.MEMORIAL,
    "moment": function (y) {
      return _lib.Dates.divineMercySunday(y).add(6, 'days');
    }(year),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintPatrickBishop",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 17
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintPeterChanelPriestAndMartyrSaintLouisGrignonDeMontfortPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 28
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "ourLadyHelpOfChristians",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 24
    }),
    "data": {}
  }, {
    "key": "blessedPeterToRotMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 7
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintMaryOfTheCrossVirgin",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 8
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLordJesusChristTheEternalHighPriest",
    "type": _constants.Types.FEAST,
    "moment": function (y) {
      return _lib.Dates.pentecostSunday(y).add(4, 'days');
    }(year),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintJohnNepomucenePriestAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintBrotherMutienMarieReligious",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 30
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintAmandMissionary",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 6
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintGertrudeOfNivellesVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 17
    }),
    "data": {}
  }, {
    "key": "saintJulieBilliartVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 8
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintDamienDeVeusterPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 10
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintJulianaOfLiegeVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 7
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLadyMediatrix",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 31
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintLambertBishopAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 17
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintHubertBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 3
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintJohnBerchmansReligious",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 26
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintPaulMikiAndCompanionsMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 6
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintTuribiusOfMogrovejoBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintMarianaDeJesusDeParedesVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 25
    }),
    "data": {}
  }, {
    "key": "blessedNazariaIgnaciaMarchReligious",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintCamillusDeLellisPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 12
    }),
    "data": {}
  }, {
    "key": "saintFrancisSolanusPriest",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLadyOfMountCarmel",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintRoseOfLima",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintPeterClaverPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 9
    }),
    "data": {}
  }, {
    "key": "saintJohnMaciasReligious",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 18
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintLouisBertrandPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 9
    }),
    "data": {}
  }, {
    "key": "saintMiguelFebresCorderoReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 21
    }),
    "data": {}
  }, {
    "key": "saintAnthonyMaryClaretBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 24
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintMartinDePorresReligious",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 3
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsRoqueGonzalezAlfonsoRodriguezOlmedoAndJuanDelCastilloPriestsAndMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 19
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "ourLadyOfGuadalupe",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 12
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, // Thursday after Pentecost
  {
    "key": "ourLordJesusChristTheEternalHighPriest",
    "type": _constants.Types.FEAST,
    "moment": function (y) {
      return _lib.Dates.pentecostSunday(y).add(4, 'days');
    }(year),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintScholasticaVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedAloysiusStepinacBishopAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 10
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "blessedOsannaOfCattaroVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 27
    }),
    "data": {}
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "blessedIvanMerz",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 10
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintLeopoldMandicPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 12
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedMaryOfJesusCrucifiedPetkovicVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 9
    }),
    "data": {}
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "ourLadyOfBistrica",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 13
    }),
    "data": {}
  }, {
    "key": "saintElijahProphet",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 20
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintClementOfOhridAndGorazdBishopsAndCompanions",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 27
    }),
    "data": {}
  }, {
    "key": "blessedAugustinKazoticBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 3
    }),
    "data": {
      "titles": [_constants.Titles.MARTYR]
    }
  }, {
    "key": "saintRoch",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintMarkoKrizinPriestAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 7
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "blessedGraziaOfCattaro",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 27
    }),
    "data": {}
  }, {
    "key": "saintNikolaTavelicPriestAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintJoseDeAnchietaPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedAlbertinaBerkenbrockVirginAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 15
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintPaulinaOfTheAgonizingHeartOfJesusVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLadyOfMountCarmel",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedInacioDeAzevedoPriestAndCompanionsMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 17
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintRoseOfLima",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedsAndreDeSoveralAndAmbrosioFranciscoFerroPriestsAndMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 3
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.RED]
      }
    }
  }, {
    "key": "ourLadyOfAparecidaPatronessOfBrazil",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 12
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintAnthonyOfSaintAnneGalvaoFreiGalvaoPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 25
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsRoqueGonzalezAlfonsoRodriguezOlmedoAndJuanDelCastilloPriestsAndMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 19
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.RED]
      }
    }
  }, {
    "key": "ourLadyOfGuadalupe",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 12
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintAndreBessetteReligious",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 7
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintRaymondOfPenyafortPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 8
    }),
    "data": {}
  }, {
    "key": "saintMargueriteBourgeoysVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 12
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintJosephSpouseOfTheBlessedVirginMaryPrincipalPatronOfCanada",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 19
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintKateriTekakwithaVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 17
    }),
    "data": {}
  }, {
    "key": "blessedMarieAnneBlondinVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 18
    }),
    "data": {}
  }, {
    "key": "ourLadyOfGoodCounsel",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 26
    }),
    "data": {}
  }, {
    "key": "saintMarieOfTheIncarnationReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 30
    }),
    "data": {}
  }, {
    "key": "blessedMarieLeonieParadisVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 4
    }),
    "data": {}
  }, {
    "key": "saintFrancoisDeLavalBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 6
    }),
    "data": {}
  }, {
    "key": "blessedCatherineOfSaintAugustineVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 8
    }),
    "data": {}
  }, {
    "key": "saintEugeneDeMazenodBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 21
    }),
    "data": {}
  }, {
    "key": "blessedLouisZephirinMoreauBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 24
    }),
    "data": {}
  }, {
    "key": "blessedsNykytaBudkaAndVasylVelychkowskyBishopsAndMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 27
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintAnnePatronOfQuebecAndSaintJoachimParentsOfTheBlessedVirginMary",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 26
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedFredericJanssoonePriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 5
    }),
    "data": {}
  }, {
    "key": "blessedAndreGrassetPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 2
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "blessedDinaBelangerVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 4
    }),
    "data": {}
  }, {
    "key": "blessedEmilieTavernierGamelinReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 24
    }),
    "data": {}
  }, {
    "key": "saintsJeanDeBrebeufAndIsaacJoguesPriestsAndCompanionsMartyrsSaintPaulOfTheCrossPriest",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 26
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED
      }
    }
  }, {
    "key": "blessedMarieRoseDurocherVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 6
    }),
    "data": {}
  }, {
    "key": "saintMargueriteDYouvilleReligious",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintHedwigReligiousOrSaintMargaretMaryAlacoqueVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 20
    }),
    "data": {}
  }, {
    "key": "ourLadyOfGuadalupe",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 12
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],13:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "blessedLauraVicunaVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 22
    }),
    "data": {}
  }, {
    "key": "blessedPiusIxPope",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 7
    }),
    "data": {}
  }, {
    "key": "ourLadyOfLourdes",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsPhilipAndJamesApostles",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 4
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintTeresaOfLosAndesVirgin",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 13
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintCamillusDeLellisPriestOrSaintHenryBishopAndMartyr ",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 14
    }),
    "data": {}
  }, {
    "key": "ourLadyOfMountCarmel",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintAlbertoHurtadoPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 18
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintRoseOfLima",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 30
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLadyOfMercy",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 24
    }),
    "data": {}
  }, {
    "key": "ourLadyOfGuadalupe",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 12
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLordJesusChristTheEternalHighPriest",
    "type": _constants.Types.FEAST,
    "moment": function (y) {
      return _lib.Dates.pentecostSunday(y).add(4, 'days');
    }(year),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "blessedOdoricOfPordenonePriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 14
    }),
    "data": {}
  }, {
    "key": "saintFrancisFernandezDeCapillasPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 15
    }),
    "data": {}
  }, {
    "key": "saintLawrenceBaiXiaomanMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 23
    }),
    "data": {}
  }, {
    "key": "saintAugustineZhaoRongPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 27
    }),
    "data": {}
  }, {
    "key": "saintLaurenceWangBingAndCompanionsMartyrSaintJosephFreinademetzPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 29
    }),
    "data": {}
  }, {
    "key": "saintJohnOfTrioraPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 13
    }),
    "data": {}
  }, {
    "key": "saintMartinWuXueshengAndCompanionsMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 17
    }),
    "data": {}
  }, {
    "key": "saintLucyYiZhenmeiVirginAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 19
    }),
    "data": {}
  }, {
    "key": "saintPaulLiuHanzouPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 21
    }),
    "data": {}
  }, {
    "key": "saintsLouisVersigliaBishopAndCallistusCaravarioPriestMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 25
    }),
    "data": {}
  }, {
    "key": "saintAgnesCaoGuiyingMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 1
    }),
    "data": {}
  }, {
    "key": "saintJosephZhangDapengMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 12
    }),
    "data": {}
  }, {
    "key": "blessedMariaAssuntaPallottaVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 8
    }),
    "data": {}
  }, {
    "key": "blessedJohnMartinMoyePriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 4
    }),
    "data": {}
  }, {
    "key": "ourLadyOfChina",
    "type": _constants.Types.MEMORIAL,
    "moment": function (y) {
      var firstMay = _moment["default"].utc({
        year: y,
        month: 4,
        day: 1
      });

      var memorialDay = firstMay; // determine first saturday

      memorialDay.add(6 - firstMay.day(), 'days'); // Second saturday

      memorialDay.add(7, 'days');
      return memorialDay;
    }(year),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintPeterLiuMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 14
    }),
    "data": {}
  }, {
    "key": "saintPeterSanzBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 27
    }),
    "data": {}
  }, {
    "key": "saintJoachimHoMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 29
    }),
    "data": {}
  }, {
    "key": "saintsGregoryGrassiFrancisFogollaAndAnthonyFantosatiBishopsAndCompanionsMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 20
    }),
    "data": {}
  }, {
    "key": "saintJosephYuanPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 23
    }),
    "data": {}
  }, {
    "key": "sevenMartyredNunsFromTheFranciscanMissionariesOfMary",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 8
    }),
    "data": {}
  }, {
    "key": "saintAugustineZhaoRongPriestAndCompanionsMartyrs",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintLeoManginPriestAndCompanionsMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 20
    }),
    "data": {}
  }, {
    "key": "saintAlbericCrescitelliPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 21
    }),
    "data": {}
  }, {
    "key": "saintPaulChenChangpinAndCompanionsMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 28
    }),
    "data": {}
  }, {
    "key": "blessedMauriceTornayPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 11
    }),
    "data": {}
  }, {
    "key": "saintJohnGabrielPerboyrePriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 11
    }),
    "data": {}
  }, {
    "key": "saintFrancisDiazPriestAndCompanionsMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 27
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintPeterWuMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 7
    }),
    "data": {}
  }, {
    "key": "saintGabrieltaurinDufresseBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 27
    }),
    "data": {}
  }, {
    "key": "ourLordJesusChristTheEternalHighPriest",
    "type": _constants.Types.FEAST,
    "moment": function (y) {
      return _lib.Dates.pentecostSunday(y).add(4, 'days');
    }(year),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "blessedAloysiusStepinacBishopAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 10
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "blessedIvanMerz",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 10
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintLeopoldMandicPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 12
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintQuirinusOfSescia",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 4
    }),
    "data": {}
  }, {
    "key": "blessedMaryOfJesusCrucifiedPetkovicVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 9
    }),
    "data": {}
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "ourLadyOfBistrica",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 13
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "blessedAugustinKazoticBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 3
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintMarkoKrizinPriestAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 7
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintNikolaTavelicPriestAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "ourLadyMotherOfChristianUnity",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 18
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLadyMediatrixOfAllGrace",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 8
    }),
    "data": {}
  }, {
    "key": "saintAdalbertBishopAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintSigismundMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 30
    }),
    "data": {}
  }, {
    "key": "saintJohnNepomucenePriestAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintClementMaryHofbauerPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 20
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintZdislava",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 30
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintVitusMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 15
    }),
    "data": {}
  }, {
    "key": "saintJohnNeumannBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 19
    }),
    "data": {}
  }, {
    "key": "saintProcopiusAbbot",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 4
    }),
    "data": {}
  }, // In Slovakia and Czech Republic, the two brothers were originally
  // commemorated on 9 March, but Pope Pius IX changed this date to 5 July
  // https://en.wikipedia.org/wiki/Saints_Cyril_and_Methodius
  {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 5
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "blessedHroznataMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 14
    }),
    "data": {}
  }, {
    "key": "blessedCeslausAndSaintHyacinthPriests",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 17
    }),
    "data": {}
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintsBenedyktJanMateuszIsaakAndKrystynMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 25
    }),
    "data": {}
  }, {
    "key": "saintTeresaOfCalcuttaReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 5
    }),
    "data": {}
  }, {
    "key": "saintMelchiorGrodzieckiPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 7
    }),
    "data": {}
  }, {
    "key": "blessedCharlesSpinolaPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 10
    }),
    "data": {}
  }, {
    "key": "saintLudmilaMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintRadimBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 12
    }),
    "data": {}
  }, {
    "key": "blessedKarlOfAustria",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 21
    }),
    "data": {}
  }, {
    "key": "saintWolfgangBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 31
    }),
    "data": {}
  }, {
    "key": "saintAgnesOfBohemiaVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 13
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintEdmundCampionPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 1
    }),
    "data": {}
  }, {
    "key": "ourLordJesusChristTheEternalHighPriest",
    "type": _constants.Types.FEAST,
    "moment": function (y) {
      return _lib.Dates.pentecostSunday(y).add(4, 'days');
    }(year),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLordJesusChristTheEternalHighPriest",
    "type": _constants.Types.FEAST,
    "moment": function (y) {
      return _lib.Dates.pentecostSunday(y).add(4, 'days');
    }(year),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintAelredOfRievaulx",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 12
    }),
    "data": {}
  }, {
    "key": "saintWulstanBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 19
    }),
    "data": {}
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintDavidBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 1
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintPatrickBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 17
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, // When the celebration falls in the Easter Triduum, on a Sunday of Easter,
  // or in the Easter Octave it is transferred to the next available day —
  // generally the Monday of the Second Week of Easter.
  {
    "key": "saintGeorgeMartyr",
    "type": _constants.Types.SOLEMNITY,
    "moment": function (y) {
      var holyWeek = _lib.Dates.holyWeek(y);

      var easterOctave = _lib.Dates.octaveOfEaster(y);

      var annunciation = _lib.Dates.annunciation(y);

      var holyWeekRange = _moment["default"].range(_lodash["default"].head(holyWeek), _lodash["default"].last(holyWeek));

      var easterOctaveRange = _moment["default"].range(_lodash["default"].head(easterOctave), _lodash["default"].last(easterOctave));

      var date = _moment["default"].utc({
        year: y,
        month: 3,
        day: 23
      }); // If the celebration lands anywhere between Holy Week to Divine Mercy Sunday (inclusive)
      // move it to the Monday after Divine Mercy Sunday


      if (holyWeekRange.contains(date) || easterOctaveRange.contains(date)) {
        // Ensure that the Monday after Divine Mercy Sunday is not Annunciation
        // if it is, move this celebration to the next day (Tuesday)
        var proposed = _lodash["default"].last(easterOctave).add(1, 'days');

        if (proposed.isSame(annunciation)) {
          return _lodash["default"].last(easterOctave).add(2, 'days');
        } else {
          return proposed;
        }
      } else {
        return date;
      }
    }(year),
    "data": {
      "prioritized": true
    }
  }, {
    "key": "saintAdalbertBishopAndMartyrSaintFidelisOfSigmaringenPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 24
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "theEnglishMartyrs",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 4
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "stDunstanArchbishopOfCanterbury",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 19
    }),
    "data": {}
  }, {
    "key": "saintBedeTheVenerablePriestAndDoctor",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 25
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintAugustineOfCanterburyBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 27
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBonifaceBishopAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 5
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintEphraemDeaconDoctorOrSaintColumbaColumCilleAbbot",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 9
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintRichardOfChichesterBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintAlbanMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 20
    }),
    "data": {}
  }, {
    "key": "saintsJohnFisherBishopAndThomasMoreMartyrs",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 22
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintEtheldredaAudreyVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 23
    }),
    "data": {}
  }, {
    "key": "saintOliverPlunketBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 1
    }),
    "data": {}
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "blessedDominicOfTheMotherOfGodDominicBarberiPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 26
    }),
    "data": {}
  }, {
    "key": "saintsMargaretClitherowAnneLineAndMargaretWardMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 30
    }),
    "data": {}
  }, {
    "key": "saintAidanBishopAndTheSaintsOfLindisfarne",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 31
    }),
    "data": {}
  }, {
    "key": "saintGregoryTheGreatPopeAndDoctor",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 3
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintCuthbertBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 4
    }),
    "data": {}
  }, {
    "key": "saintTheodoreOfCanterburyBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 19
    }),
    "data": {}
  }, {
    "key": "ourLadyOfWalsingham",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 24
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedJohnHenryNewmanPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 9
    }),
    "data": {}
  }, {
    "key": "saintPaulinusOfYorkBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 10
    }),
    "data": {}
  }, // In England and Wales when the celebration falls on either a
  // Saturday or a Monday it is transferred to the Sunday.
  // Replaces 20th Sunday in Ordinary Time when it falls on a Sunday.
  {
    "key": "peterAndPaulApostles",
    "type": _constants.Types.SOLEMNITY,
    "moment": function (y) {
      var date = _moment["default"].utc({
        year: y,
        month: 5,
        day: 29
      });

      if (_lodash["default"].eq(date.day(), 1)) {
        return date.subtract(1, 'days');
      } else if (_lodash["default"].eq(date.day(), 6)) {
        return date.add(1, 'days').startOf('day');
      } else {
        return date;
      }
    }(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED
      }
    }
  }, // In England and Wales when the celebration falls on either a
  // Saturday or a Monday it is transferred to the Sunday.
  // Replaces 20th Sunday in Ordinary Time when it falls on a Sunday.
  {
    "key": "assumption",
    "type": _constants.Types.SOLEMNITY,
    "moment": function (y) {
      var date = _moment["default"].utc({
        year: y,
        month: 7,
        day: 15
      });

      if (_lodash["default"].eq(date.day(), 1)) {
        return date.subtract(1, 'days');
      } else if (_lodash["default"].eq(date.day(), 6)) {
        return date.add(1, 'days').startOf('day');
      } else {
        return date;
      }
    }(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintWilfridBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 12
    }),
    "data": {}
  }, {
    "key": "saintEdwardTheConfessor",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 13
    }),
    "data": {}
  }, {
    "key": "saintsChadAndCeddBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 26
    }),
    "data": {}
  }, {
    "key": "saintWinefrideVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 3
    }),
    "data": {}
  }, {
    "key": "saintWillibrordBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 7
    }),
    "data": {}
  }, {
    "key": "saintEdmundOfAbingdonBishopOrSaintMargaretOfScotland",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintElizabethOfHungary",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 17
    }),
    "data": {}
  }, {
    "key": "saintAndrewApostle",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 30
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, // In England and Wales when All Saints (1 November) falls on a Saturday
  // and is transferred to Sunday, All Souls is transferred to Monday 3 November.
  // Like Ash Wednesday, All Souls is, technically, without rank.
  // However, in countries (not England & Wales) where it falls
  // on a Sunday it replaces the Sunday.
  {
    "key": "allSaints",
    "type": _constants.Types.SOLEMNITY,
    "moment": function (y) {
      var date = _moment["default"].utc({
        year: y,
        month: 10,
        day: 1
      });

      if (_lodash["default"].eq(date.day(), 6)) {
        return _moment["default"].utc({
          year: y,
          month: 10,
          day: 2
        });
      } else {
        return date;
      }
    }(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "allSouls",
    "type": _constants.Types.FEAST,
    "moment": function (y) {
      var date = _moment["default"].utc({
        year: y,
        month: 10,
        day: 1
      });

      if (_lodash["default"].eq(date.day(), 6)) {
        // If All Saints is on Saturday
        // Then All Souls will be on Monday because All Saints will be moved to Sunday on the rule above
        return _moment["default"].utc({
          year: y,
          month: 10,
          day: 3
        });
      } else {
        // Else, All Souls is the day after All Saints
        return _moment["default"].utc({
          year: y,
          month: 10,
          day: 2
        });
      }
    }(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintThomasBecketBishopAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],19:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintHenryBishopAndMartyr",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 19
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintEricIxMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 18
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedHemmingBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 22
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintUrsulaLedochowskaVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 29
    }),
    "data": {}
  }, {
    "key": "blessedElisabethHesselbaldVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 4
    }),
    "data": {}
  }, {
    "key": "saintJosemariaEscrivaDeBalaguerPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 26
    }),
    "data": {}
  }, {
    "key": "saintCanuteMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 10
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintThorlacBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 20
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintOlafIiMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "blessedNicolasStenoBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 25
    }),
    "data": {}
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],20:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintGenevieveVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 3
    }),
    "data": {}
  }, {
    "key": "saintRemigiusBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 15
    }),
    "data": {}
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintBernadetteSoubirousVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 18
    }),
    "data": {}
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintIvoPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 19
    }),
    "data": {}
  }, {
    "key": "saintJoanOfArcVirginSecondaryPatronessOfFrance",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 30
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintPothinusBishopSaintBlAndinaVirginAndTheirCompanionsMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 2
    }),
    "data": {}
  }, {
    "key": "saintClotilde",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 4
    }),
    "data": {}
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintCaesariusOfArlesBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 26
    }),
    "data": {}
  }, {
    "key": "saintThereseOfTheChildJesusVirginSecondaryPatronessOfFrance",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 1
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],21:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintsBasilTheGreatAndGregoryNazianzenBishopsAndDoctors",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 2
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "theMostHolyNameOfJesus",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 3
    }),
    "data": {}
  }, {
    "key": "saintRaymondOfPenyafortPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 7
    }),
    "data": {}
  }, {
    "key": "saintHilaryOfPoitiersBishopAndDoctor",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 13
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintAnthonyOfEgyptAbbot",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 17
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsFabianPopeAndSebastianMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 20
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintAgnesVirginAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 21
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintVincentDeaconAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 22
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintFrancisDeSalesBishopAndDoctor",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 24
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, // The proper color for the Chair of Peter (Feast, Feb 22) and the Conversion of
  //cSt. Paul (Feast, Jan 25) is white, although both St. Peter and St. Paul
  // were martyrs.
  {
    "key": "conversionOfSaintPaulApostle",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 25
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsTimothyAndTitusBishops",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 26
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintAngelaMericiVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 27
    }),
    "data": {}
  }, {
    "key": "saintThomasAquinasPriestAndDoctor",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 28
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintJohnBoscoPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 31
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBlaseBishopAndMartyrSaintAnsgarBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 3
    }),
    "data": {}
  }, {
    "key": "saintAgathaVirginAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 5
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintPaulMikiAndCompanionsMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 6
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintJeromeEmilianiSaintJosephineBakhitaVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 8
    }),
    "data": {}
  }, {
    "key": "saintScholasticaVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 10
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLadyOfLourdes",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 11
    }),
    "data": {}
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "sevenHolyFoundersOfTheServiteOrder",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 17
    }),
    "data": {}
  }, {
    "key": "saintPeterDamianBishopAndDoctorOfTheChurch",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 21
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "chairOfSaintPeterApostle",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 22
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintPolycarpBishopAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintCasimir",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 4
    }),
    "data": {}
  }, {
    "key": "saintsPerpetuaAndFelicityMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 7
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintJohnOfGodReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 8
    }),
    "data": {}
  }, {
    "key": "saintFrancesOfRomeReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 9
    }),
    "data": {}
  }, {
    "key": "saintPatrickBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 17
    }),
    "data": {}
  }, {
    "key": "saintCyrilOfJerusalemBishopAndDoctor",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 18
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintTuribiusOfMogrovejoBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 23
    }),
    "data": {}
  }, {
    "key": "saintFrancisOfPaolaHermit",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 2
    }),
    "data": {}
  }, {
    "key": "saintIsidoreOfSevilleBishopAndDoctorOfTheChurch",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 4
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintVincentFerrerPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 5
    }),
    "data": {}
  }, {
    "key": "saintJohnBaptistDeLaSallePriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 7
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintStanislausBishopAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintMartinIPopeAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 13
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintAnselmOfCanterburyBishopAndDoctorOfTheChurch",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 21
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintGeorgeMartyrSaintAdalbertBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintFidelisOfSigmaringenPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 24
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintMarkTheEvangelist",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 25
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintPeterChanelPriestAndMartyrSaintLouisGrignonDeMontfortPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 28
    }),
    "data": {}
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintPiusVPope",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 30
    }),
    "data": {}
  }, {
    "key": "saintJosephTheWorker",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 1
    }),
    "data": {}
  }, {
    "key": "saintAthanasiusBishopAndDoctor",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 2
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintsPhilipAndJamesApostles",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 3
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsNereusAndAchilleusMartyrsSaintPancrasMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 12
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "ourLadyOfFatima",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 13
    }),
    "data": {}
  }, {
    "key": "saintMatthiasTheApostle",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintJohnIPopeAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 18
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintBernardineOfSienaPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 20
    }),
    "data": {}
  }, {
    "key": "saintChristopherMagallanesAndCompanionsMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 21
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintRitaOfCascia",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 22
    }),
    "data": {}
  }, {
    "key": "saintBedeTheVenerablePriestAndDoctorSaintGregoryViiPopeSaintMaryMagdaleneDePazziVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 25
    }),
    "data": {}
  }, {
    "key": "saintPhilipNeriPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 26
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintAugustineOfCanterburyBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 27
    }),
    "data": {}
  }, {
    "key": "visitationOfTheBlessedVirginMary",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 31
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintJustinMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 1
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintsMarcellinusAndPeterMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 2
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintsCharlesLwangaAndCompanionsMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 3
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintBonifaceBishopAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 5
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintNorbertBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 6
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintEphremDeaconAndDoctor",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 9
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintBarnabasTheApostle",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintAnthonyOfPaduaPriestAndDoctor",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 13
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintRomualdAbbot",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 19
    }),
    "data": {}
  }, {
    "key": "saintAloysiusGonzagaReligious",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 21
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintPaulinusOfNolaBishopSaintsJohnFisherBishopAndThomasMoreMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 22
    }),
    "data": {}
  }, {
    "key": "saintCyrilOfAlexandriaBishopAndDoctor",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 27
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintIrenaeusBishopAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 28
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "firstMartyrsOfTheChurchOfRome",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 30
    }),
    "data": {}
  }, {
    "key": "saintThomasTheApostle",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 3
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintElizabethOfPortugal",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 4
    }),
    "data": {}
  }, {
    "key": "saintAnthonyZaccariaPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 5
    }),
    "data": {}
  }, {
    "key": "saintMariaGorettiVirginAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 6
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintsAugustineZhaoRongPriestAndCompanionsMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 9
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintHenryBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 13
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintCamillusDeLellisPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 14
    }),
    "data": {}
  }, {
    "key": "saintBonaventureBishopAndDoctor",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 15
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "ourLadyOfMountCarmel",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintApollinaris",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 20
    }),
    "data": {}
  }, {
    "key": "saintLawrenceOfBrindisiPriestAndDoctor",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 21
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, // https://github.com/pejulian/romcal/issues/27
  {
    "key": "saintMaryMagdalene",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 22
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, // On 11 Feb 2018, Pope Francis inserted the Memorial of the
  // Blessed Virgin Mary, Mother of the Church, into the General Roman Calendar.
  // It will be celebrated on Monday after Pentecost.
  {
    "key": "maryMotherOfTheChurch",
    "type": _constants.Types.MEMORIAL,
    // Memorial
    "moment": function (y) {
      return _lib.Dates.pentecostSunday(y).add(1, 'days');
    }(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintCharbelMakhloufPriestAndHermit",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 24
    }),
    "data": {}
  }, {
    "key": "saintJamesApostle",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 25
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsJoachimAndAnne",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 26
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintMartha",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintPeterChrysologusBishopAndDoctor",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 30
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintIgnatiusOfLoyolaPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 31
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintAlphonsusMariaDeLiguoriBishopAndDoctorOfTheChurch",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 1
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintEusebiusOfVercelliBishopSaintPeterJulianEymardPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 2
    }),
    "data": {}
  }, {
    "key": "saintJeanVianneyTheCureOfArsPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 4
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "dedicationOfTheBasilicaOfSaintMaryMajor",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 5
    }),
    "data": {}
  }, {
    "key": "saintSixtusIiPopeAndCompanionsMartyrsSaintCajetanPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 7
    }),
    "data": {}
  }, {
    "key": "saintDominicPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 8
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintLawrenceOfRomeDeaconAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 10
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintClareVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintJaneFrancesDeChantalReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 12
    }),
    "data": {}
  }, {
    "key": "saintsPontianPopeAndHippolytusPriestMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 13
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintMaximilianMaryKolbePriestAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintStephenOfHungary",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintJohnEudesPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 19
    }),
    "data": {}
  }, {
    "key": "saintBernardOfClairvauxAbbotAndDoctorOfTheChurch",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 20
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintPiusXPope",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 21
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "queenshipOfBlessedVirginMary",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 22
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintRoseOfLima",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 23
    }),
    "data": {}
  }, {
    "key": "saintBartholomewTheApostle",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 24
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintLouisSaintJosephOfCalasanzPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 25
    }),
    "data": {}
  }, {
    "key": "saintMonica",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 27
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintAugustineOfHippoBishopAndDoctorOfTheChurch",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 28
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "theBeheadingOfSaintJohnTheBaptistMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintGregoryTheGreatPopeAndDoctor",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 3
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "birthOfTheBlessedVirginMary",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 8
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintPeterClaverPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "holyNameOfTheBlessedVirginMary",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 12
    }),
    "data": {}
  }, {
    "key": "saintJohnChrysostomBishopAndDoctor",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 13
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "theExaltationOfTheHolyCross",
    "type": _constants.Types[4],
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED
      }
    }
  }, {
    "key": "ourLadyOfSorrows",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 15
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsCorneliusPopeAndCyprianBishopMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintRobertBellarmineBishopAndDoctor",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 17
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintJanuariusBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 19
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintAndrewKimTaegonPriestAndPaulChongHasangAndCompanionsMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 20
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintMatthewApostleAndEvangelist",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 21
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintPioOfPietrelcinaPadrePioPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsCosmasAndDamianMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 26
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintVincentDePaulPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 27
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintWenceslausMartyrSaintsLawrenceRuizAndCompanionsMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 28
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintsMichaelGabrielAndRaphaelArchangels",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintJeromePriestAndDoctor",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 30
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintThereseOfTheChildJesusVirginAndDoctor",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 1
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "guardianAngels",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 2
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintFrancisOfAssisi",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 4
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBrunoPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 6
    }),
    "data": {}
  }, {
    "key": "ourLadyOfTheRosary",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 7
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintDenisAndCompanionsMartyrsSaintJohnLeonardiPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 9
    }),
    "data": {}
  }, // http://www.vatican.va/roman_curia/congregations/ccdds/documents/rc_con_ccdds_doc_20140529_decreto-calendario-generale-gxxiii-gpii_en.html
  {
    "key": "popeSaintJohnXXIII",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 11
    }),
    "data": {}
  }, // http://www.vatican.va/roman_curia/congregations/ccdds/documents/rc_con_ccdds_doc_20140529_decreto-calendario-generale-gxxiii-gpii_en.html
  {
    "key": "popeSaintJohnPaulII",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 22
    }),
    "data": {}
  }, {
    "key": "saintCallistusIPopeAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 14
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintTeresaOfJesusVirginAndDoctorOfTheChurch",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 15
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintHedwigReligiousSaintMargaretMaryAlacoqueVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintIgnatiusOfAntiochBishopAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 17
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintLukeTheEvangelist",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 18
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsJeanDeBrebeufAndIsaacJoguesPriestsAndCompanionsMartyrsSaintPaulOfTheCrossPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 19
    }),
    "data": {}
  }, {
    "key": "saintJohnOfCapistranoPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 23
    }),
    "data": {}
  }, {
    "key": "saintAnthonyMaryClaretBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 24
    }),
    "data": {}
  }, {
    "key": "saintsSimonAndJudeApostles",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 28
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "allSouls",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 2
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintMartinDePorresReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 3
    }),
    "data": {}
  }, {
    "key": "saintCharlesBorromeoBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 4
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, // Replaces 32nd Sunday in Ordinary Time when it falls on a Sunday
  {
    "key": "dedicationOfTheLateranBasilica",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 9
    }),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintLeoTheGreatPopeAndDoctor",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 10
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintMartinOfToursBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintJosaphatBishopAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 12
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintAlbertTheGreatBishopAndDoctor",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 15
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintMargaretOfScotlandSaintGertrudeTheGreatVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintElizabethOfHungary",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 17
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "dedicationOfTheBasilicasOfSaintsPeterAndPaulApostles",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 18
    }),
    "data": {}
  }, {
    "key": "presentationOfTheBlessedVirginMary",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 21
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintCeciliaVirginAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 22
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintClementIPopeAndMartyrSaintColumbanReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 23
    }),
    "data": {}
  }, {
    "key": "saintAndrewDungLacAndCompanionsMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 24
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintCatherineOfAlexandriaVirginAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 25
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintAndrewTheApostle",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 30
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintFrancisXavierPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 3
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintJohnDamascenePriestAndDoctor",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 4
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintNicholasBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 6
    }),
    "data": {}
  }, {
    "key": "saintAmbroseBishopAndDoctor",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 7
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintJuanDiegoCuauhtlatoatzin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 9
    }),
    "data": {}
  }, {
    "key": "ourLadyOfLoreto",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 10
    }),
    "data": {}
  }, {
    "key": "saintDamasusIPope",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 11
    }),
    "data": {}
  }, {
    "key": "ourLadyOfGuadalupe",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 12
    }),
    "data": {}
  }, {
    "key": "saintLucyOfSyracuseVirginAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 13
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintJohnOfTheCrossPriestAndDoctor",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintPeterCanisiusPriestAndDoctor",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 21
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintJohnOfKantyPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 23
    }),
    "data": {}
  }, {
    "key": "saintStephenTheFirstMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 26
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintJohnTheApostleAndEvangelist",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 27
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "holyInnocentsMartyrs",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 28
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintThomasBecketBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 29
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintSylvesterIPope",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 31
    }),
    "data": {}
  }];
  return _lodash["default"].map(_dates, function (_ref) {
    var key = _ref.key,
        data = _ref.data,
        rest = _objectWithoutProperties(_ref, ["key", "data"]);

    var name = _lib.Utils.localize({
      key: 'sanctoral.' + key
    });

    var meta = data.meta;

    if (_lodash["default"].isUndefined(meta)) {
      data.meta = {
        titles: []
      };
    }

    return _objectSpread({
      name: name,
      key: key,
      data: data
    }, rest);
  });
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],22:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintJohnNeumannBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 5
    }),
    "data": {}
  }, {
    "key": "saintValentineOfRaetiaBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 7
    }),
    "data": {}
  }, {
    "key": "saintSeverinusOfNoricumMonk",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 8
    }),
    "data": {}
  }, {
    "key": "saintMeinradMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 21
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "blessedHenrySusoPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 23
    }),
    "data": {}
  }, {
    "key": "saintRabanusMaurusBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 4
    }),
    "data": {}
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintMatthiasTheApostle",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 24
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintWalburgaAbbess",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 25
    }),
    "data": {}
  }, {
    "key": "saintFridolinOfSackingenMonk",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 6
    }),
    "data": {}
  }, {
    "key": "saintBrunoBonifaceOfQuerfurtBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 9
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintMatilda",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 14
    }),
    "data": {}
  }, {
    "key": "saintClementMaryHofbauerPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 15
    }),
    "data": {}
  }, {
    "key": "saintGertrudeOfNivellesAbbess",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 17
    }),
    "data": {}
  }, {
    "key": "saintLudgerBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 26
    }),
    "data": {}
  }, {
    "key": "saintLeoIxPopeOrBlessedMarcelCalloMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 19
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintConradOfParzhamReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 21
    }),
    "data": {}
  }, {
    "key": "saintPeterCanisiusPriestAndDoctor",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 27
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintFlorianAndHisCompanionsMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 4
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintGotthardBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 5
    }),
    "data": {}
  }, {
    "key": "saintJohnNepomucenePriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 16
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintHermannJosephPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 21
    }),
    "data": {}
  }, {
    "key": "saintVitusMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 15
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintBennoOfMeissenBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintHemmaOfGurk",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 27
    }),
    "data": {}
  }, {
    "key": "saintOttoOfBambergBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 30
    }),
    "data": {}
  }, {
    "key": "visitationOfTheBlessedVirginMary",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 2
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintUlrichOfAugsburg",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 4
    }),
    "data": {}
  }, {
    "key": "saintWillibaldBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 7
    }),
    "data": {}
  }, {
    "key": "saintKilianBishopAndCompanionsMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 8
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintsCanuteEricAndOlafMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 10
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintsHenryAndCunigunde",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 13
    }),
    "data": {}
  }, {
    "key": "saintMargaretOfAntiochVirginAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 20
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintChristopherMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 24
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintPaulinusOfTrierBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 31
    }),
    "data": {}
  }, {
    "key": "saintHildegardOfBingenAbbessAndDoctor",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 17
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintLambertBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 18
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintMauriceAndCompanionsMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 22
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintsRupertAndVirgiliusOfSalzburgBishops",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 24
    }),
    "data": {}
  }, {
    "key": "saintNicholasOfFlueHermit",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 25
    }),
    "data": {}
  }, {
    "key": "saintLeobaAbbess",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 28
    }),
    "data": {}
  }, {
    "key": "saintGallAbbotAndMissionary",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintWendelinAbbot",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 20
    }),
    "data": {}
  }, {
    "key": "saintUrsulaAndCompanionsVirginsAndMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 21
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintWolfgangOfRegensburgBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 31
    }),
    "data": {}
  }, {
    "key": "saintHubertOfLiegeBishopOrSaintPirminAbbotAndBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 3
    }),
    "data": {}
  }, {
    "key": "saintLeonardOfNoblacHermit",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 6
    }),
    "data": {}
  }, {
    "key": "saintWillibrordBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 7
    }),
    "data": {}
  }, {
    "key": "saintLeopoldIII",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 15
    }),
    "data": {}
  }, {
    "key": "saintGertrudeTheGreatVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 17
    }),
    "data": {}
  }, {
    "key": "saintElizabethOfHungary",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 19
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintCorbinianBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 20
    }),
    "data": {}
  }, {
    "key": "saintsConradAndGebhardOfConstanceBishops",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 26
    }),
    "data": {}
  }, {
    "key": "saintLuciusOfChurBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 2
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintBarbaraVirginAndMartyrOrBlessedAdolphKolpingPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 4
    }),
    "data": {}
  }, {
    "key": "saintAnnoIiBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 5
    }),
    "data": {}
  }, {
    "key": "saintOdileOfAlsaceAbbess",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 13
    }),
    "data": {}
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],23:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintCyrilOfJerusalemBishopAndDoctor",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 18
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintAdalbertBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 22
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintGeorgeMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintIrene",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 5
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLadyOfFatima",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 15
    }),
    "data": {}
  }, {
    "key": "saintCyrilOfAlexandriaBishopAndDoctor",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 27
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintMarina",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 17
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintPantaleon",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 27
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintLydiaOfPhilippi",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 3
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintsCosmasAndDamian",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 26
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintDionysiusTheAreopagite",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 3
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintDemetrius",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 26
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "presentationOfTheBlessedVirginMary",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 21
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBarbaraVirginAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 4
    }),
    "data": {}
  }, {
    "key": "saintNicholasBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 6
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintSpyridon",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 12
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],24:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintMargaretOfHungary",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 18
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintMatthiasTheApostle",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 24
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintAdalbertBishopAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintFlorianMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 4
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "blessedGisela",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 7
    }),
    "data": {}
  }, {
    "key": "blessedSaraSalkahaziVirginAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 11
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintJohnNepomucenePriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 16
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "blessedVilmosAporBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 23
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "ourLadyHelpOfChristians",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 24
    }),
    "data": {}
  }, {
    "key": "transferOfTheRelicsOfSaintStephen",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 30
    }),
    "data": {}
  }, {
    "key": "saintAgnesOfBohemiaVirgin",
    "type": _constants.Types.MEMORIAL,
    // Memorial
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 8
    }),
    // 8th of June
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE // What is the Liturgical color for this?

      }
    }
  }, // Moved to the congregational calendar (Society of Saint Francis de Sales (Salesian Congregation)
  // {
  //   "key": "blessedIstvanSandorMartyr",
  //   "type": Types.OPT_MEMORIAL,
  //   "moment": moment.utc({ year: year, month: 5, day: 8 }),
  //   "data": {
  //     "meta": {
  //       "titles": [
  //         Titles.MARTYR
  //       ]
  //     }
  //   }
  // },
  {
    "key": "saintLadislaus",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 27
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "visitationOfTheBlessedVirginMary",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 2
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintsAndrewZorardAndBenedictHermits",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 17
    }),
    "data": {}
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintKingaVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 24
    }),
    "data": {}
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "blessedInnocentXiPope",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 13
    }),
    "data": {}
  }, {
    "key": "saintStephenOfHungary",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 20
    }),
    "data": {}
  }, {
    "key": "saintTeresaOfCalcuttaReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 5
    }),
    "data": {}
  }, {
    "key": "saintsMarkoKrizinMelicharGrodeckiAndStephenPongracPriestsAndMartyrs",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 7
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintGerardBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 24
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLadyOfHungary",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 8
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintMaurusBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 25
    }),
    "data": {}
  }, {
    "key": "blessedTheodoreRomzhaBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 31
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintEmeric",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 4
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "hungarianSaintsAndBlesseds",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 13
    }),
    "data": {}
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],25:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wales = exports.vietnam = exports.unitedStates = exports.ukraine = exports.switzerland = exports.sweden = exports.sriLanka = exports.spain = exports.slovenia = exports.slovakia = exports.scotland = exports.russia = exports.romania = exports.puertoRico = exports.portugal = exports.poland = exports.philippines = exports.peru = exports.norway = exports.newZealand = exports.netherlands = exports.mexico = exports.malta = exports.lithuania = exports.lebanon = exports.japan = exports.italy = exports.ireland = exports.india = exports.hungary = exports.greece = exports.germany = exports.general = exports.france = exports.finland = exports.england = exports.denmark = exports.czechRepublic = exports.croatia = exports.china = exports.chile = exports.canada = exports.brazil = exports.bosniaHerzegovina = exports.bolivia = exports.belgium = exports.austria = exports.australia = exports.argentina = void 0;

var argentina = _interopRequireWildcard(require("./argentina"));

exports.argentina = argentina;

var australia = _interopRequireWildcard(require("./australia"));

exports.australia = australia;

var austria = _interopRequireWildcard(require("./austria"));

exports.austria = austria;

var belgium = _interopRequireWildcard(require("./belgium"));

exports.belgium = belgium;

var bolivia = _interopRequireWildcard(require("./bolivia"));

exports.bolivia = bolivia;

var bosniaHerzegovina = _interopRequireWildcard(require("./bosniaHerzegovina"));

exports.bosniaHerzegovina = bosniaHerzegovina;

var brazil = _interopRequireWildcard(require("./brazil"));

exports.brazil = brazil;

var canada = _interopRequireWildcard(require("./canada"));

exports.canada = canada;

var chile = _interopRequireWildcard(require("./chile"));

exports.chile = chile;

var china = _interopRequireWildcard(require("./china"));

exports.china = china;

var croatia = _interopRequireWildcard(require("./croatia"));

exports.croatia = croatia;

var czechRepublic = _interopRequireWildcard(require("./czechRepublic"));

exports.czechRepublic = czechRepublic;

var denmark = _interopRequireWildcard(require("./denmark"));

exports.denmark = denmark;

var england = _interopRequireWildcard(require("./england"));

exports.england = england;

var finland = _interopRequireWildcard(require("./finland"));

exports.finland = finland;

var france = _interopRequireWildcard(require("./france"));

exports.france = france;

var general = _interopRequireWildcard(require("./general"));

exports.general = general;

var germany = _interopRequireWildcard(require("./germany"));

exports.germany = germany;

var greece = _interopRequireWildcard(require("./greece"));

exports.greece = greece;

var hungary = _interopRequireWildcard(require("./hungary"));

exports.hungary = hungary;

var india = _interopRequireWildcard(require("./india"));

exports.india = india;

var ireland = _interopRequireWildcard(require("./ireland"));

exports.ireland = ireland;

var italy = _interopRequireWildcard(require("./italy"));

exports.italy = italy;

var japan = _interopRequireWildcard(require("./japan"));

exports.japan = japan;

var lebanon = _interopRequireWildcard(require("./lebanon"));

exports.lebanon = lebanon;

var lithuania = _interopRequireWildcard(require("./lithuania"));

exports.lithuania = lithuania;

var malta = _interopRequireWildcard(require("./malta"));

exports.malta = malta;

var mexico = _interopRequireWildcard(require("./mexico"));

exports.mexico = mexico;

var netherlands = _interopRequireWildcard(require("./netherlands"));

exports.netherlands = netherlands;

var newZealand = _interopRequireWildcard(require("./newZealand"));

exports.newZealand = newZealand;

var norway = _interopRequireWildcard(require("./norway"));

exports.norway = norway;

var peru = _interopRequireWildcard(require("./peru"));

exports.peru = peru;

var philippines = _interopRequireWildcard(require("./philippines"));

exports.philippines = philippines;

var poland = _interopRequireWildcard(require("./poland"));

exports.poland = poland;

var portugal = _interopRequireWildcard(require("./portugal"));

exports.portugal = portugal;

var puertoRico = _interopRequireWildcard(require("./puertoRico"));

exports.puertoRico = puertoRico;

var romania = _interopRequireWildcard(require("./romania"));

exports.romania = romania;

var russia = _interopRequireWildcard(require("./russia"));

exports.russia = russia;

var scotland = _interopRequireWildcard(require("./scotland"));

exports.scotland = scotland;

var slovakia = _interopRequireWildcard(require("./slovakia"));

exports.slovakia = slovakia;

var slovenia = _interopRequireWildcard(require("./slovenia"));

exports.slovenia = slovenia;

var spain = _interopRequireWildcard(require("./spain"));

exports.spain = spain;

var sriLanka = _interopRequireWildcard(require("./sriLanka"));

exports.sriLanka = sriLanka;

var sweden = _interopRequireWildcard(require("./sweden"));

exports.sweden = sweden;

var switzerland = _interopRequireWildcard(require("./switzerland"));

exports.switzerland = switzerland;

var ukraine = _interopRequireWildcard(require("./ukraine"));

exports.ukraine = ukraine;

var unitedStates = _interopRequireWildcard(require("./unitedStates"));

exports.unitedStates = unitedStates;

var vietnam = _interopRequireWildcard(require("./vietnam"));

exports.vietnam = vietnam;

var wales = _interopRequireWildcard(require("./wales"));

exports.wales = wales;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./argentina":5,"./australia":6,"./austria":7,"./belgium":8,"./bolivia":9,"./bosniaHerzegovina":10,"./brazil":11,"./canada":12,"./chile":13,"./china":14,"./croatia":15,"./czechRepublic":16,"./denmark":17,"./england":18,"./finland":19,"./france":20,"./general":21,"./germany":22,"./greece":23,"./hungary":24,"./india":26,"./ireland":27,"./italy":28,"./japan":29,"./lebanon":30,"./lithuania":31,"./malta":32,"./mexico":33,"./netherlands":34,"./newZealand":35,"./norway":36,"./peru":37,"./philippines":38,"./poland":39,"./portugal":40,"./puertoRico":41,"./romania":42,"./russia":43,"./scotland":44,"./slovakia":45,"./slovenia":46,"./spain":47,"./sriLanka":48,"./sweden":49,"./switzerland":50,"./ukraine":51,"./unitedStates":52,"./vietnam":53,"./wales":54}],26:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "blessedKuriakoseEliasChavaraPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 3
    }),
    "data": {}
  }, {
    "key": "blessedJosephVazPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintJohnDeBritoPriestAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 4
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintGonsaloGarciaMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 6
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "blessedMariaTheresaChiramelVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 8
    }),
    "data": {}
  }, {
    "key": "saintThomasTheApostle",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 3
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintAlphonsaOfTheImmaculateConceptionVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 28
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintTeresaOfCalcuttaReligious",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 5
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintFrancisXavierPriest",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 3
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],27:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintMunchinBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 3
    }),
    "data": {}
  }, {
    "key": "saintItaVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 15
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintFursaAbbotAndMissionary",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintAidanBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 30
    }),
    "data": {}
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 1
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintMelBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 7
    }),
    "data": {}
  }, {
    "key": "saintGobnaitVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 11
    }),
    "data": {}
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintFintan",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 17
    }),
    "data": {}
  }, {
    "key": "saintDavidBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 1
    }),
    "data": {}
  }, {
    "key": "saintKieranBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 5
    }),
    "data": {}
  }, {
    "key": "saintSenanBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 8
    }),
    "data": {}
  }, {
    "key": "saintAengusOengusBishopAndAbbot",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 11
    }),
    "data": {}
  }, {
    "key": "saintPatrickBishop",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 17
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintEndaAbbot",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 21
    }),
    "data": {}
  }, {
    "key": "saintMacartanBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 24
    }),
    "data": {}
  }, {
    "key": "saintCeallachCelsusBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 1
    }),
    "data": {}
  }, {
    "key": "saintMolaiseLaisrenLaserianBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 18
    }),
    "data": {}
  }, {
    "key": "saintAsicusBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 27
    }),
    "data": {}
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintConlethBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 4
    }),
    "data": {}
  }, {
    "key": "blessedEdmundIgnatiusRiceReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 5
    }),
    "data": {}
  }, {
    "key": "saintComgallAbbot",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 10
    }),
    "data": {}
  }, {
    "key": "saintCarthageBishopMochuta",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 15
    }),
    "data": {}
  }, {
    "key": "saintBrendanAbbot",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintKevinAbbot",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 3
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintJarlathBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 6
    }),
    "data": {}
  }, {
    "key": "saintColmanOfDromoreBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 7
    }),
    "data": {}
  }, {
    "key": "saintColumbaAbbotAndMissionary",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintDavnetVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 14
    }),
    "data": {}
  }, {
    "key": "blessedIrishMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 20
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintOliverPlunkettBishopAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 1
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintMoninneVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 6
    }),
    "data": {}
  }, {
    "key": "saintMaelruainMaolruainVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 7
    }),
    "data": {}
  }, {
    "key": "saintKillianBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 8
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintDeclanBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 24
    }),
    "data": {}
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintMuiredachBishopSaintAttractaVirginOrSaintLeliaVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 12
    }),
    "data": {}
  }, {
    "key": "saintFachtnaBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 13
    }),
    "data": {}
  }, {
    "key": "ourLadyOfKnock",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 17
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintEugeneEoghanBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 23
    }),
    "data": {}
  }, {
    "key": "saintFiacreMonk",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 30
    }),
    "data": {}
  }, {
    "key": "saintAidanOfLindisfarneBishopAndMissionary",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 31
    }),
    "data": {}
  }, {
    "key": "saintMacNissiBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 4
    }),
    "data": {}
  }, {
    "key": "saintCiaranAbbot",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintAilbeBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 12
    }),
    "data": {}
  }, {
    "key": "saintPioOfPietralcina",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintFinbarrBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 25
    }),
    "data": {}
  }, {
    "key": "blessedColumbaMarmionPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 3
    }),
    "data": {}
  }, {
    "key": "blessedJohnHenryNewmanPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 9
    }),
    "data": {}
  }, {
    "key": "saintCaniceAbbot",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 11
    }),
    "data": {}
  }, {
    "key": "saintGallAbbotAndMissionary",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintOtteranMonk",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 27
    }),
    "data": {}
  }, {
    "key": "saintColmanOfKilmacduaghBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 29
    }),
    "data": {}
  }, {
    "key": "saintMalachyBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 3
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "allSaintsOfIreland",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 6
    }),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintWillibrordBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 7
    }),
    "data": {}
  }, {
    "key": "saintLaurenceOTooleBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 14
    }),
    "data": {}
  }, {
    "key": "saintColumbanAbbotAndMissionary",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintColmanOfCloyneBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 25
    }),
    "data": {}
  }, {
    "key": "saintFergalBishopAndMissionary",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 27
    }),
    "data": {}
  }, {
    "key": "saintFinnianOfClonardBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 12
    }),
    "data": {}
  }, {
    "key": "saintFlannanBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 18
    }),
    "data": {}
  }, {
    "key": "saintFachananOfKilfenoraBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 20
    }),
    "data": {}
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],28:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintNorbertBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 6
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBarnabasTheApostle",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 11
    }),
    "data": {}
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintMaryMagdalene",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 22
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {}
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintFrancisOfAssisi",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 4
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "popeSaintJohnXXIII",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 11
    }),
    "data": {}
  }, {
    "key": "popeSaintJohnPaulII",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 22
    }),
    "data": {}
  }, {
    "key": "maryMotherOfTheChurch",
    "type": _constants.Types.MEMORIAL,
    "moment": _lib.Dates.pentecostSunday(year).add(1, 'days'),
    "data": {}
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],29:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintPaulMikiAndCompanionsMartyrs",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 6
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "discoveryOfTheHiddenChristians",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 17
    }),
    "data": {}
  }, {
    "key": "blessedPeterKibePriestAndCompanionsMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 1
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "205BlessedMartyrsOfJapan",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 10
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintThomasRokuzayemonPriestAndCompanionsMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 28
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintFrancisXavierPriest",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 3
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],30:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintBarbaraVirginAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 4
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintNicholasBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 6
    }),
    "data": {}
  }, {
    "key": "saintCharbelMakhloufPriestAndHermit",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 24
    }),
    "data": {}
  }, {
    "key": "saintMaroun",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 9
    }),
    "data": {}
  }, {
    "key": "saintRafqaRebeccaVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 23
    }),
    "data": {}
  }, {
    "key": "saintGeorgeMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "ourLadyOfLebanon",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 1
    }),
    "data": {}
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],31:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "blessedJerzyMatulewiczBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 27
    }),
    "data": {}
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintCasimir",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 4
    }),
    "data": {}
  }, {
    "key": "saintBrunoBonifaceOfQuerfurtBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 9
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintAdalbertBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintAndrewBobolaPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 16
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "ourLadyMotherOfMercy",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintRocco",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintHyacinthPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 17
    }),
    "data": {}
  }, {
    "key": "birthOfTheBlessedVirginMary",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 8
    }),
    "data": {}
  }, {
    "key": "saintFaustinaKowalskaVirginAndReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 5
    }),
    "data": {}
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],32:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintPubliusBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 22
    }),
    "data": {}
  }, {
    "key": "shipwreckOfSaintPaulApostle",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 10
    }),
    "data": {}
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "blessedMariaAdeodataPisaniVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 25
    }),
    "data": {}
  }, {
    "key": "ourLadyOfSorrows",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 15
    }),
    "data": {}
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintPiusVPope",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 30
    }),
    "data": {}
  }, {
    "key": "saintGeorgePrecaPriest",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 9
    }),
    "data": {}
  }, {
    "key": "blessedNazjuFalzon",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 1
    }),
    "data": {}
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {}
  }, {
    "key": "ourLadyOfMountCarmel",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintCatherineOfAlexandriaVirginAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 25
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],33:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintFelipeDeJesusPriestAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 22
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintJohnNepomucenePriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "blessedSebastianDeAparicioReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 25
    }),
    "data": {}
  }, {
    "key": "saintChristopherMagallanesAndCompanionsMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 21
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintMariaDeJesusSacramentadoVenegasVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 30
    }),
    "data": {}
  }, {
    "key": "blessedBartolomeLaurelReligiousAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 16
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "blessedsPedroZunigaAndLuisFloresPriestsAndMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 16
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "blessedJuniperoSerraPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 26
    }),
    "data": {}
  }, {
    "key": "saintJoseMariaDeYermoPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 19
    }),
    "data": {}
  }, {
    "key": "saintRafaelGuizarYValenciaBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 24
    }),
    "data": {}
  }, {
    "key": "blessedMiguelAgustinProPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 23
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintJuanDiego",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 9
    }),
    "data": {}
  }, {
    "key": "ourLadyOfGuadalupe",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 12
    }),
    "data": {}
  }, {
    "key": "ourLordJesusChristTheEternalHighPriest",
    "type": _constants.Types.FEAST,
    "moment": function (y) {
      return _lib.Dates.pentecostSunday(y).add(4, 'days');
    }(year),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],34:[function(require,module,exports){
arguments[4][17][0].apply(exports,arguments)
},{"../constants":61,"../lib":68,"dup":17,"lodash":1,"moment":4}],35:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "waitangiDay",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 6
    }),
    "data": {}
  }, {
    "key": "saintPaulMikiAndCompanionsMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 7
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintPatrickBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 17
    }),
    "data": {}
  }, {
    "key": "saintMarkApostle",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 26
    }),
    "data": {}
  }, {
    "key": "saintLouisGrignonDeMontfortPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 27
    }),
    "data": {}
  }, {
    "key": "saintPeterChanelPriestAndMartyrSaintLouisGrignonDeMontfortPriest",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 28
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "ourLadyHelpOfChristians",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 24
    }),
    "data": {}
  }, {
    "key": "saintMarcellinChampagnatPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 6
    }),
    "data": {}
  }, {
    "key": "saintDominicPriest/SaintSixtusIiPopeAndCompanionsMartyrsSaintCajetanPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 7
    }),
    "data": {}
  }, {
    "key": "saintMaryMacKillopVirgin",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 8
    }),
    "data": {}
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],36:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintThorfinnBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 8
    }),
    "data": {}
  }, {
    "key": "saintHenryBishopAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 19
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintEysteinnBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 26
    }),
    "data": {}
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintMagnusMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintEricIxMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 18
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintSunnivaVirginAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 8
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintCanuteMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 10
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintSwithunBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 15
    }),
    "data": {}
  }, {
    "key": "saintThorlacBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 20
    }),
    "data": {}
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintOlafIiMartyr",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "blessedNicolasStenoBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 25
    }),
    "data": {}
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],37:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "findingOfTheHolyCross",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 3
    }),
    "data": {}
  }, {
    "key": "ourLadyHelpOfChristians",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 24
    }),
    "data": {}
  }, {
    "key": "saintMarianaDeJesusDeParedesVirgin",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 26
    }),
    "data": {}
  }, {
    "key": "saintFrancisSolanusPriest",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 14
    }),
    "data": {}
  }, {
    "key": "ourLadyOfPeace",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 28
    }),
    "data": {}
  }, {
    "key": "saintRoseOfLima",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 23
    }),
    "data": {}
  }, {
    "key": "saintJohnMaciasReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 18
    }),
    "data": {}
  }, {
    "key": "ourLadyOfMercy",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 24
    }),
    "data": {}
  }, {
    "key": "ourLordOfMiracles",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 28
    }),
    "data": {}
  }, {
    "key": "saintMartinDePorresReligious",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 3
    }),
    "data": {}
  }, {
    "key": "ourLadyOfGuadalupe",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 12
    }),
    "data": {}
  }, {
    "key": "ourLordJesusChristTheEternalHighPriest",
    "type": _constants.Types.FEAST,
    "moment": function (y) {
      return _lib.Dates.pentecostSunday(y).add(4, 'days');
    }(year),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],38:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "santoNinoInfantJesus",
    "type": _constants.Types.FEAST,
    "moment": function () {
      // Third Sunday of January: Santo Niño (Holy Child Jesus)
      var firstDay = _moment["default"].utc({
        year: year,
        month: 0,
        day: 1
      });

      var feastDay = 22 - (firstDay.day() == 0 ? 7 : firstDay.day());
      return _moment["default"].utc({
        year: year,
        month: 0,
        day: feastDay
      });
    }(),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintPaulMikiAndCompanionsMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 6
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintPedroCalungsodMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 2
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintIsidoreTheFarmer",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 15
    }),
    "data": {}
  }, {
    "key": "saintRoch",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintEzekielMorenoBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 19
    }),
    "data": {}
  }, {
    "key": "saintLorenzoRuizAndCompanionsMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 28
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "immaculateConceptionOfTheBlessedVirginMaryPrincipalPatronessOfThePhilippines",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 8
    }),
    "data": {}
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],39:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _holyWeek;

var _easterOctave;

var _annunciation;

var _holyWeekRange;

var _easterOctaveRange;

var _date;

var dates = function dates(year) {
  var _dates = [{
    "key": "saintJozefSebastianPelczar",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 19
    }),
    "data": {}
  }, {
    "key": "saintVincentPallottiPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 22
    }),
    "data": {}
  }, {
    "key": "blessedVincentLewoniukAndCompanionsMartyrsOfPratulin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 23
    }),
    "data": {}
  }, {
    "key": "blessedJerzyMatulewiczBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 27
    }),
    "data": {}
  }, {
    "key": "blessedBoleslawaMariaLamentVirginAndSaintAngelaMericiVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 29
    }),
    "data": {}
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintCasimir",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 4
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, // jarosz: Moved saintAdalbert outside holy week and octave of Easter
  {
    "key": "saintAdalbertBishopAndMartyr",
    "type": _constants.Types.SOLEMNITY,
    "moment": function (y) {
      _holyWeek = _lib.Dates.holyWeek(y);
      _easterOctave = _lib.Dates.octaveOfEaster(y);
      _annunciation = _lib.Dates.annunciation(y);
      _holyWeekRange = _moment["default"].range(_lodash["default"].head(_holyWeek), _lodash["default"].last(_holyWeek));
      _easterOctaveRange = _moment["default"].range(_lodash["default"].head(_easterOctave), _lodash["default"].last(_easterOctave));
      _date = _moment["default"].utc({
        year: y,
        month: 3,
        day: 23
      }); //
      // If the celebration lands anywhere between Holy Week to Divine Mercy Sunday (inclusive)
      // move it to the Monday after Divine Mercy Sunday

      if (_holyWeekRange.contains(_date) || _easterOctaveRange.contains(_date)) {
        // Ensure that the Monday after Divine Mercy Sunday is not Annunciation
        // if it is, move this celebration to the next day (Tuesday)
        // However, this condition will probably never happen
        var proposed = _lodash["default"].last(_easterOctave).add(1, 'days');

        if (proposed.isSame(_annunciation)) {
          return _annunciation.add(1, 'days');
        } else {
          return proposed;
        }
      } else {
        return _date;
      }
    }(year),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "ourLadyQueenOfPoland",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 3
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLadyHelpOfChristians",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 24
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintFlorianMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 4
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintStanislausKazimierczykPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 5
    }),
    "data": {}
  }, {
    "key": "saintsPhilipAndJamesApostles",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 6
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintStanislausBishopAndMartyr",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 8
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED
      }
    }
  }, {
    "key": "saintAndrewBobolaPriestAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintUrsulaLedochowskaVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintJohnSarkanderPriestAndMartyrSaintZdzislawa",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 30
    }),
    "data": {}
  }, {
    "key": "saintHedwigOfPoland",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 8
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedBogumilBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 10
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedAntoniNowowiejskiBishopAndCompanionsMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 12
    }),
    "data": {}
  }, {
    "key": "blessedMichaelKozalBishopAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedJolantaReligious",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 15
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintAlbertChmielowskiReligious",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 17
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintZygmuntGorazdowskiPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 26
    }),
    "data": {}
  }, {
    "key": "saintOttoOfBambergBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 1
    }),
    "data": {}
  }, {
    "key": "saintMariaGorettiVirginAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 5
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "blessedMariaTeresaLedochowskaVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 6
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintJohnOfDuklaPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 8
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBrunoBonifaceOfQuerfurtBishopAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 12
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsAndrewZorardAndBenedictHermits",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 13
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintCamillusDeLellisPriestOrSaintHenryBishopAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 14
    }),
    "data": {}
  }, {
    "key": "ourLadyOfMountCarmel",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintSimonOfLipnicaPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 18
    }),
    "data": {}
  }, {
    "key": "blessedCzeslawPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 20
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintApollinaris",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 21
    }),
    "data": {}
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintKingaVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 24
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintCharbelMakhloufPriestAndHermit",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 28
    }),
    "data": {}
  }, {
    "key": "blessedEdmundBojanowski",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 7
    }),
    "data": {}
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintHyacinthPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 17
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLadyOfCzestochowa",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 26
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedBronislawaVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 1
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedMariaStellaAndCompanionsVirginsAndMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 4
    }),
    "data": {}
  }, {
    "key": "saintMelchiorGrodzieckiPriestAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 7
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedAnielaSalawaVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 9
    }),
    "data": {}
  }, {
    "key": "saintDenisAndCompanionsMartyrsSaintJohnLeonardiPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 10
    }),
    "data": {}
  }, {
    "key": "saintZygmuntSzczesnyFelinskiBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 17
    }),
    "data": {}
  }, {
    "key": "saintStanislausKostkaReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 18
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedWladyslawOfGielniowPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 25
    }),
    "data": {}
  }, // jarosz: Split saintRuizAndCo and saintWenceslaus (they are a single celebration in general.js)
  {
    "key": "saintsLawrenceRuizAndCompanionsMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 26
    }),
    "data": {}
  }, {
    "key": "saintWenceslausMartyr",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 28
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintFaustinaKowalskaVirginAndReligious",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 5
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedVincentKadlubekBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedMaryAngelaTruszkowskaVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 10
    }),
    "data": {}
  }, {
    "key": "blessedJohnBeyzymPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 12
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedHonoratKozminskiPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 13
    }),
    "data": {}
  }, // jarosz: Split saintHedwig and saintMargaretMaryAlacoque and rename saintHedwig to saintHedwigOfSilesia, to make it less ambiguous
  {
    "key": "saintMargaretMaryAlacoque",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 14
    }),
    "data": {}
  }, {
    "key": "saintHedwigOfSilesia",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintJohnOfKantyPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 20
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedJakubStrzemieBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 21
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "popeSaintJohnPaulII",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 22
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintJosefBilczewskiBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 23
    }),
    "data": {}
  }, // jarosz: Created Dedication of a particular church: solemnity on last Sunday of October
  {
    "key": "dedicationOfAParticularChurch",
    "type": _constants.Types.SOLEMNITY,
    "moment": (0, _moment["default"])({
      year: year,
      month: 9
    }).endOf('month').startOf('week'),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsBenedyktJanMateuszIsaakAndKrystynMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 13
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED
      }
    }
  }, {
    "key": "blessedKarolinaKozkownaVirginAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 18
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedSalomeVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 19
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintRafalKalinowskiPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 20
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedMaryOfJesusTheGoodShepherdVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 25
    }),
    "data": {}
  }, {
    "key": "blessedRafalChylinskiPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 2
    }),
    "data": {}
  }, {
    "key": "saintBarbaraVirginAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 4
    }),
    "data": {}
  }, {
    "key": "maryMotherOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": function (y) {
      return _lib.Dates.pentecostSunday(y).add(1, 'days');
    }(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLordJesusChristTheEternalHighPriest",
    "type": _constants.Types.FEAST,
    "moment": function (y) {
      return _lib.Dates.pentecostSunday(y).add(4, 'days');
    }(year),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],40:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "blessedGoncaloDeAmarantePriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 11
    }),
    "data": {}
  }, {
    "key": "saintJohnDeBritoPriestAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 4
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "theFiveWoundsOfTheLord",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 7
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintTheotoniusPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 18
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedJacintaAndFranciscoMarto",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 20
    }),
    "data": {}
  }, {
    "key": "saintJohnOfGodPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 8
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "blessedJoanOfPortugalVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 12
    }),
    "data": {}
  }, {
    "key": "ourLadyOfFatima",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 13
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "guardianAngelOfPortugal",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 10
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintAnthonyOfLisbonPriestAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 13
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "blessedSanchaAndMafaldaVirginsOrBlessedTheresaOfPOrtugalReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 20
    }),
    "data": {}
  }, {
    "key": "saintElizabethOfPortugal",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 4
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "blessedInacioDeAzevedoPriestAndCompanionsMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 17
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedBartholomewOfTheMartyrsBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 18
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintBeatriceOfSilvaVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 1
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintDenisAndCompanionsMartyrsSaintJohnLeonardiPriestBlessedJohnNewmanBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 9
    }),
    "data": {}
  }, {
    "key": "blessedGoncaloDeLagosPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 27
    }),
    "data": {}
  }, {
    "key": "saintNunoDeSantaMaria",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 6
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintFructuosusSaintMartinOfDumeAndSaintGeraldBishops",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 5
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],41:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "mostHolyNameOfJesusOrOurLadyOfBethlehem",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 3
    }),
    "data": {}
  }, {
    "key": "blessedMariaDoloresRodriguezSopenaVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 10
    }),
    "data": {}
  }, {
    "key": "blessedCarlosManuelRodriguez",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 4
    }),
    "data": {}
  }, {
    "key": "ourLadyOfMountCarmel",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintTeresaOfJesusJornetEIbarsVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 26
    }),
    "data": {}
  }, {
    "key": "saintRoseOfLima",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 30
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedsCarlosSpinolaAndJeronimoDeAngelisPriestsAndMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 10
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintSoledadTorresAcostaVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 11
    }),
    "data": {}
  }, {
    "key": "ourLadyMotherOfDivineProvidencePatronessOfPuertoRico",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 19
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLadyOfGuadalupe",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 12
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLordJesusChristTheEternalHighPriest",
    "type": _constants.Types.FEAST,
    "moment": function (y) {
      return _lib.Dates.pentecostSunday(y).add(4, 'days');
    }(year),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],42:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintJohnCassianPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 28
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "blessedVladimirGhikaPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 16
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],43:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "blessedGeorgeMatulewiczBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 27
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedBoleslawaMariaLamentVirginAndSaintAngelaMericiVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 29
    }),
    "data": {}
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintGeorgeMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 6
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintTheodosiusOfTheCavesAbbot",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLadyOfPerpetualHelpOrBlessedLeonidFeodorovPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 27
    }),
    "data": {}
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintAnthonyOfTheCavesMonk",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 24
    }),
    "data": {}
  }, {
    "key": "saintOlga",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 24
    }),
    "data": {}
  }, {
    "key": "saintVladimirTheGreat",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 28
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsBorisAndGlebMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 5
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "ourLadyOfCzestochowa",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 26
    }),
    "data": {}
  }, {
    "key": "ourLadyOfVladimir",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 7
    }),
    "data": {}
  }, {
    "key": "saintFaustinaKowalskaVirginAndReligious",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 5
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedOleksiyZarytskyiPriestAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 30
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLadyOfTheGateOfDawn",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintRafalKalinowskiPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 20
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintAndrewTheApostlePatronOfRussia",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 30
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBarbaraVirginAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 4
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintNicholasBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 6
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],44:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintKentigern",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 13
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintJohnOgilvie",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 10
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintPatrickBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 17
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintColumba",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintNinian",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintMargaretOfScotland",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintAndrewTheApostle",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 30
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],45:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintAdalbertBishopAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintGeorgeMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 24
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintFlorianMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 4
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED
      }
    }
  }, {
    "key": "blessedSaraSalkahaziVirginAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 11
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintJohnNepomucenePriestAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintLadislaus",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 27
    }),
    "data": {}
  }, {
    "key": "visitationOfTheBlessedVirginMary",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 2
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, // In Slovakia and Czech Republic, the two brothers were originally
  // commemorated on 9 March, but Pope Pius IX changed this date to 5 July
  // https://en.wikipedia.org/wiki/Saints_Cyril_and_Methodius
  {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 5
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintAnthonyZaccariaPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 7
    }),
    "data": {}
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintsAndrewZoerardusAndBenedictHermits",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 17
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintGorazdAndCompanions",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 27
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedZdenkaSchelingovaVirginAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 30
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintHelena",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 18
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintTeresaOfCalcuttaReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 5
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintsMarkoKrizinMelicharGrodeckiAndStephenPongracPriestsAndMartyrs",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 7
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "ourLadyOfSorrows",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 15
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintFaustinaKowalskaVirginAndReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 5
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintGallAbbotAndMissionary",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 16
    }),
    "data": {}
  }, {
    "key": "saintMaurusBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 25
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "dedicationOfAParticularChurch",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 26
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "allSouls",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 2
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintEmeric",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 5
    }),
    "data": {}
  }, {
    // This key is dropped only because of adding Optional Memorial of St Barbara to the same day
    "key": "saintJohnDamascenePriestAndDoctor",
    "drop": true
  }, {
    "key": "saintJohnDamascenePriestAndDoctorOrSaintBarbaraVirginAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 4
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED
      }
    }
  }, {
    "key": "ourLordJesusChristTheEternalHighPriest",
    "type": _constants.Types.FEAST,
    "moment": function (y) {
      return _lib.Dates.pentecostSunday(y).add(4, 'days');
    }(year),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],46:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintJohnNepomucenePriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],47:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintEulogiusOfCordobaBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 9
    }),
    "data": {}
  }, {
    "key": "saintsFructuosusBishopAndAuguriusAndEulogiusDeaconsMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 20
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintVincentDeaconAndMartyr",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 22
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintIldephonsusOfToledoBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 23
    }),
    "data": {}
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintHermenegildMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 13
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED
      }
    }
  }, {
    "key": "saintIsidoreOfSevilleBishopAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 26
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintJohnOfAvilaPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 10
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintIsidoreTheFarmer",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 15
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintPaschalBaylon",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 17
    }),
    "data": {}
  }, {
    "key": "saintJoaquinaVedruna",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 22
    }),
    "data": {}
  }, {
    "key": "saintFerdinand",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 30
    }),
    "data": {}
  }, {
    "key": "saintMariaMicaelaOfTheBlessedSacramentVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 15
    }),
    "data": {}
  }, {
    "key": "saintPelagiusMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 26
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "ourLadyOfMountCarmel",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintJamesApostlePatronOfSpain",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 25
    }),
    "data": {}
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintEzequielMorenoBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 19
    }),
    "data": {}
  }, {
    "key": "saintTeresaOfJesusJornetEIbarsVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 26
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintFrancisBorgiaPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 3
    }),
    "data": {}
  }, {
    "key": "saintThomasOfVillanovaBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 10
    }),
    "data": {}
  }, {
    "key": "saintSoledadTorresAcostaVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 11
    }),
    "data": {}
  }, {
    "key": "ourLadyOfThePillar",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 12
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintTeresaOfJesusVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 15
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintPeterOfAlcantaraPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 19
    }),
    "data": {}
  }, {
    "key": "saintLeanderBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 13
    }),
    "data": {}
  }, {
    "key": "saintEulaliaOfMeridaVirginAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 10
    }),
    "data": {}
  }, {
    "key": "saintJohnOfTheCrossDoctorOfTheChurch",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "ourLordJesusChristTheEternalHighPriest",
    "type": _constants.Types.FEAST,
    "moment": function (y) {
      return _lib.Dates.pentecostSunday(y).add(4, 'days');
    }(year),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],48:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "blessedJosephVazPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 16
    }),
    "data": {}
  }, {
    "key": "ourLadyOfLanka",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 4
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ourLadyOfMadhu",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 2
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],49:[function(require,module,exports){
arguments[4][17][0].apply(exports,arguments)
},{"../constants":61,"../lib":68,"dup":17,"lodash":1,"moment":4}],50:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"../constants":61,"../lib":68,"dup":7,"lodash":1,"moment":4}],51:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "blessedMarcelinaDarowskaReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 5
    }),
    "data": {}
  }, {
    "key": "blessedBronislawMarkiewiczPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 30
    }),
    "data": {}
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "maryMotherOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": function (y) {
      return _lib.Dates.pentecostSunday(y).add(1, 'days');
    }(year),
    "data": {
      "priorized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintAndrewBobolaPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 16
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintJohnNepomucenePriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 21
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintAlbertChmielowskiReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 17
    }),
    "data": {}
  }, {
    "key": "saintZygmuntGorazdowskiPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 26
    }),
    "data": {}
  }, {
    "key": "saintJohnOfDuklaPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 8
    }),
    "data": {}
  }, {
    "key": "saintHedwigOfPoland",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 18
    }),
    "data": {}
  }, {
    "key": "saintOlga",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 24
    }),
    "data": {}
  }, {
    "key": "saintVladimirTheGreat",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 28
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "ourLadyOfCzestochowa",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 26
    }),
    "data": {}
  }, {
    "key": "blessedWladyslawBladzinskiPriestAndCompanionsMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintStanislausKostkaReligious",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 18
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintJozefBilczewskiBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 23
    }),
    "data": {}
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],52:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintElizabethAnnSetonReligious",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 4
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintJohnNeumannBishop",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 5
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintAndreBessetteReligious",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 6
    }),
    "data": {}
  }, {
    "key": "saintVincentDeaconAndMartyrOrSaintMarianneCopeVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 0,
      day: 22
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintKatharineDrexelVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 3
    }),
    "data": {}
  }, {
    "key": "saintDamienDeVeusterPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 10
    }),
    "data": {}
  }, {
    "key": "saintIsidoreTheFarmer",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 15
    }),
    "data": {}
  }, {
    "key": "blessedJuniperoSerraPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 1
    }),
    "data": {}
  }, {
    "key": "saintKateriTekakwithaVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintCamillusDeLellisPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 18
    }),
    "data": {}
  }, {
    "key": "saintPeterClaverPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "blessedMarieRoseDurocherVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 6
    }),
    "data": {}
  }, {
    "key": "saintsJeanDeBrebeufAndIsaacJoguesPriestsAndCompanionsMartyrsSaintPaulOfTheCrossPriest",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 19
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintPaulOfTheCrossPriest",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 20
    }),
    "data": {}
  }, {
    "key": "saintFrancesXavierCabriniVirgin",
    "type": _constants.Types.MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 13
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintRosePhilippineDuchesneVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 18
    }),
    "data": {}
  }, {
    "key": "blessedMiguelAgustinProPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 23
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "ourLadyOfGuadalupe",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 12
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],53:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "vietnameseMartyrs",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 13
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],54:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var dates = function dates(year) {
  var _dates = [{
    "key": "saintTeiloBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 9
    }),
    "data": {}
  }, {
    "key": "saintsCyrilMonkAndMethodiusBishop",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 1,
      day: 14
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintDavidBishop",
    "type": _constants.Types.SOLEMNITY,
    "moment": _moment["default"].utc({
      year: year,
      month: 2,
      day: 1
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintBeunoAbbot",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 20
    }),
    "data": {}
  }, {
    "key": "saintCatherineOfSienaVirginAndDoctorOfTheChurch",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 3,
      day: 29
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE, _constants.Titles.DOCTOR_OF_THE_CHURCH]
      }
    }
  }, {
    "key": "saintAsaphBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 4,
      day: 5
    }),
    "data": {}
  }, {
    "key": "saintsAlbanJuliusAndAaronMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 5,
      day: 20
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintBenedictOfNursiaAbbot",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 11
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintJohnJonesPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 12
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintBridgetOfSwedenReligious",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 23
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintsPhilipEvansAndJohnLloydPriestsAndMartyrs",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 6,
      day: 25
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintGermanusOfAuxerreBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 3
    }),
    "data": {}
  }, {
    "key": "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 9
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR, _constants.Titles.PATRON_OF_EUROPE]
      }
    }
  }, {
    "key": "saintDavidLewisPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 7,
      day: 26
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintDeiniolBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 8,
      day: 11
    }),
    "data": {}
  }, {
    "key": "saintRichardGwynMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 16
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "theSixWelshMartyrsAndCompanions",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 9,
      day: 25
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintWinefrideVirgin",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 3
    }),
    "data": {}
  }, {
    "key": "saintIlltudAbbot",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 6
    }),
    "data": {}
  }, // In England and Wales when All Saints (1 November) falls on a Saturday
  // and is transferred to Sunday, All Souls is transferred to Monday 3 November.
  // Like Ash Wednesday, All Souls is, technically, without rank.
  // However, in countries (not England & Wales) where it falls
  // on a Sunday it replaces the Sunday.
  {
    "key": "allSaints",
    "type": _constants.Types.SOLEMNITY,
    "moment": function (y) {
      var date = _moment["default"].utc({
        year: y,
        month: 10,
        day: 1
      });

      if (_lodash["default"].eq(date.day(), 6)) {
        return _moment["default"].utc({
          year: y,
          month: 10,
          day: 2
        });
      } else {
        return date;
      }
    }(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "allSouls",
    "type": _constants.Types.FEAST,
    "moment": function (y) {
      var date = _moment["default"].utc({
        year: y,
        month: 10,
        day: 1
      });

      if (_lodash["default"].eq(date.day(), 6)) {
        // If All Saints is on Saturday
        // Then All Souls will be on Monday because All Saints will be moved to Sunday on the rule above
        return _moment["default"].utc({
          year: y,
          month: 10,
          day: 3
        });
      } else {
        // Else, All Souls is the day after All Saints
        return _moment["default"].utc({
          year: y,
          month: 10,
          day: 2
        });
      }
    }(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "allSaintsOfWales",
    "type": _constants.Types.FEAST,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 6
    }),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "saintDubriciusBishop",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 10,
      day: 14
    }),
    "data": {
      "meta": {
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, {
    "key": "saintJohnRobertsPriestAndMartyr",
    "type": _constants.Types.OPT_MEMORIAL,
    "moment": _moment["default"].utc({
      year: year,
      month: 11,
      day: 10
    }),
    "data": {
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.MARTYR]
      }
    }
  }, // In England and Wales when the celebration falls on either a
  // Saturday or a Monday it is transferred to the Sunday.
  // Replaces 20th Sunday in Ordinary Time when it falls on a Sunday.
  {
    "key": "peterAndPaulApostles",
    "type": _constants.Types.SOLEMNITY,
    "moment": function (y) {
      var date = _moment["default"].utc({
        year: y,
        month: 5,
        day: 29
      });

      if (_lodash["default"].eq(date.day(), 1)) {
        return date.subtract(1, 'days');
      } else if (_lodash["default"].eq(date.day(), 6)) {
        return date.add(1, 'days').startOf('day');
      } else {
        return date;
      }
    }(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED
      }
    }
  }, // In England and Wales when the celebration falls on either a
  // Saturday or a Monday it is transferred to the Sunday.
  // Replaces 20th Sunday in Ordinary Time when it falls on a Sunday.
  {
    "key": "assumption",
    "type": _constants.Types.SOLEMNITY,
    "moment": function (y) {
      var date = _moment["default"].utc({
        year: y,
        month: 7,
        day: 15
      });

      if (_lodash["default"].eq(date.day(), 1)) {
        return date.subtract(1, 'days');
      } else if (_lodash["default"].eq(date.day(), 6)) {
        return date.add(1, 'weeks').startOf('week');
      } else {
        return date;
      }
    }(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }]; // Get localized celebration names

  return _lib.Utils.localizeDates(_dates);
};

exports.dates = dates;
},{"../constants":61,"../lib":68,"lodash":1,"moment":4}],55:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var Cycles = {
  "0": "Year A",
  "1": "Year B",
  "2": "Year C"
};
var _default = Cycles;
exports["default"] = _default;
},{}],56:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var LiturgicalColors = {
  "RED": {
    "key": "RED",
    "value": "#FF0000"
  },
  "ROSE": {
    "key": "ROSE",
    "value": "#FF007F"
  },
  "PURPLE": {
    "key": "PURPLE",
    "value": "#800080"
  },
  "GREEN": {
    "key": "GREEN",
    "value": "#008000"
  },
  "WHITE": {
    "key": "WHITE",
    "value": "#FFFFFF"
  },
  "GOLD": {
    "key": "GOLD",
    "value": "#FFD700"
  }
};
var _default = LiturgicalColors;
exports["default"] = _default;
},{}],57:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var LiturgicalSeasons = {
  "ADVENT": "Advent",
  "CHRISTMASTIDE": "Christmastide",
  "EARLY_ORDINARY_TIME": "Early Ordinary Time",
  "LATER_ORDINARY_TIME": "Later Ordinary Time",
  "LENT": "Lent",
  "HOLY_WEEK": "Holy Week",
  "EASTER": "Easter"
};
var _default = LiturgicalSeasons;
exports["default"] = _default;
},{}],58:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var PsalterWeeks = {
  "1": "Week I",
  "2": "Week II",
  "3": "Week III",
  "4": "Week IV",
  "5": "Easter"
};
var _default = PsalterWeeks;
exports["default"] = _default;
},{}],59:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var Titles = {
  "PATRON_OF_EUROPE": "PATRON_OF_EUROPE",
  "FEAST_OF_THE_LORD": "FEAST_OF_THE_LORD",
  "DOCTOR_OF_THE_CHURCH": "DOCTOR_OF_THE_CHURCH",
  "MARIAN_FEAST": "MARIAN_FEAST",
  "TRIDUUM": "TRIDUUM",
  "MARTYR": "MARTYR"
};
var _default = Titles;
exports["default"] = _default;
},{}],60:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Extend Array to provide the rank types as properties (syntactic sugar)
 * Types[0] == Types.SOLEMNITY and so on
 * @extends Array
 */
var Types =
/*#__PURE__*/
function (_Array) {
  _inherits(Types, _Array);

  function Types() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Types);

    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
      items[_key] = arguments[_key];
    }

    // Initialize Array
    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Types)).call.apply(_getPrototypeOf2, [this].concat(items))); // Iterate over all types and create dynamic read-only properties

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _assertThisInitialized(_this)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var key = _step.value;
        Object.defineProperty(_assertThisInitialized(_this), key, {
          value: key,
          writable: false
        });
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return _this;
  }

  return Types;
}(_wrapNativeSuper(Array)); // Rank types of celebrations.
// Order is important:
// Higher rank first, lower rank at the end.


var TYPES = new Types(
/**
 * @name Types#SOLEMNITY
 * @type string
 */
"SOLEMNITY",
/**
 * @name Types#SUNDAY
 * @type string
 */
"SUNDAY",
/**
 * @name Types#TRIDUUM
 * @type string
 */
"TRIDUUM",
/**
 * @name Types#HOLY_WEEK
 * @type string
 */
"HOLY_WEEK",
/**
 * @name Types#FEAST
 * @type string
 */
"FEAST",
/**
 * @name Types#MEMORIAL
 * @type string
 */
"MEMORIAL",
/**
 * @name Types#OPT_MEMORIAL
 * @type string
 */
"OPT_MEMORIAL",
/**
 * @name Types#COMMEMORATION
 * @type string
 */
"COMMEMORATION",
/**
 * @name Types#FERIA
 * @type string
 */
"FERIA");
var _default = TYPES;
exports["default"] = _default;
},{}],61:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Cycles", {
  enumerable: true,
  get: function get() {
    return _Cycles["default"];
  }
});
Object.defineProperty(exports, "LiturgicalColors", {
  enumerable: true,
  get: function get() {
    return _LiturgicalColors["default"];
  }
});
Object.defineProperty(exports, "PsalterWeeks", {
  enumerable: true,
  get: function get() {
    return _PsalterWeeks["default"];
  }
});
Object.defineProperty(exports, "LiturgicalSeasons", {
  enumerable: true,
  get: function get() {
    return _LiturgicalSeasons["default"];
  }
});
Object.defineProperty(exports, "Titles", {
  enumerable: true,
  get: function get() {
    return _Titles["default"];
  }
});
Object.defineProperty(exports, "Types", {
  enumerable: true,
  get: function get() {
    return _Types["default"];
  }
});

var _Cycles = _interopRequireDefault(require("./Cycles"));

var _LiturgicalColors = _interopRequireDefault(require("./LiturgicalColors"));

var _PsalterWeeks = _interopRequireDefault(require("./PsalterWeeks"));

var _LiturgicalSeasons = _interopRequireDefault(require("./LiturgicalSeasons"));

var _Titles = _interopRequireDefault(require("./Titles"));

var _Types = _interopRequireDefault(require("./Types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
},{"./Cycles":55,"./LiturgicalColors":56,"./LiturgicalSeasons":57,"./PsalterWeeks":58,"./Titles":59,"./Types":60}],62:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Calendar", {
  enumerable: true,
  get: function get() {
    return _lib.Calendar;
  }
});
Object.defineProperty(exports, "Celebrations", {
  enumerable: true,
  get: function get() {
    return _lib.Celebrations;
  }
});
Object.defineProperty(exports, "Dates", {
  enumerable: true,
  get: function get() {
    return _lib.Dates;
  }
});
Object.defineProperty(exports, "Seasons", {
  enumerable: true,
  get: function get() {
    return _lib.Seasons;
  }
});
Object.defineProperty(exports, "Utils", {
  enumerable: true,
  get: function get() {
    return _lib.Utils;
  }
});
Object.defineProperty(exports, "Cycles", {
  enumerable: true,
  get: function get() {
    return _constants.Cycles;
  }
});
Object.defineProperty(exports, "LiturgicalColors", {
  enumerable: true,
  get: function get() {
    return _constants.LiturgicalColors;
  }
});
Object.defineProperty(exports, "PsalterWeeks", {
  enumerable: true,
  get: function get() {
    return _constants.PsalterWeeks;
  }
});
Object.defineProperty(exports, "LiturgicalSeasons", {
  enumerable: true,
  get: function get() {
    return _constants.LiturgicalSeasons;
  }
});
Object.defineProperty(exports, "Titles", {
  enumerable: true,
  get: function get() {
    return _constants.Titles;
  }
});
Object.defineProperty(exports, "Types", {
  enumerable: true,
  get: function get() {
    return _constants.Types;
  }
});
exports.Locales = exports["default"] = exports.queryFor = exports.calendarFor = exports.Localizations = exports.Countries = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _moment = _interopRequireDefault(require("moment"));

var _momentRange = require("moment-range");

var _lib = require("./lib");

var _constants = require("./constants");

var Locales = _interopRequireWildcard(require("./locales"));

exports.Locales = Locales;

var Calendars = _interopRequireWildcard(require("./calendars"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/*
    The MIT License (MIT)

    Copyright (c) 2014 Pereira, Julian Matthew

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
*/
var moment = (0, _momentRange.extendMoment)(_moment["default"]);

var Localizations = _lodash["default"].keys(_lodash["default"].mapKeys(Locales, function (v, k) {
  return _lodash["default"].kebabCase(k);
}));

exports.Localizations = Localizations;

var Countries = _lodash["default"].keys(Calendars); // Export an array of countries for external use
// Export an array of locales for external use


exports.Countries = Countries;
var calendarFor = _lib.Calendar.calendarFor,
    queryFor = _lib.Calendar.queryFor;
exports.queryFor = queryFor;
exports.calendarFor = calendarFor;
calendarFor();
// Default entry point is exported as Romcal
var _default = _lib.Calendar;
exports["default"] = _default;
},{"./calendars":25,"./constants":61,"./lib":68,"./locales":72,"lodash":1,"moment":4,"moment-range":2}],63:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCalendar = exports.countries = exports.queryFor = exports.calendarFor = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var Calendars = _interopRequireWildcard(require("../calendars"));

var Dates = _interopRequireWildcard(require("./Dates"));

var Utils = _interopRequireWildcard(require("./Utils"));

var Seasons = _interopRequireWildcard(require("./Seasons"));

var Celebrations = _interopRequireWildcard(require("./Celebrations"));

var _constants = require("../constants");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Get an array of country names
var countries = _lodash["default"].keys(Calendars); //================================================================================================
// Processing method for calendar config
//================================================================================================


exports.countries = countries;

var _sanitizeConfig = function _sanitizeConfig(config) {
  config = _lodash["default"].isPlainObject(config) ? config : _lodash["default"].stubObject();
  config.year = config.year || _moment["default"].utc().year();
  config.christmastideEnds = config.christmastideEnds || 'o'; // If the national calendar of Slovakia is requested and the flag to make Epiphany fall on Jan 6
  // is not specified, then default the flag to true because Slovakia always celebrates Epiphany of Jan 6.

  if (_lodash["default"].eq(config.country, 'slovakia') && _lodash["default"].isUndefined(config.epiphanyOnJan6)) {
    config.epiphanyOnJan6 = true;
  }

  config.epiphanyOnJan6 = config.epiphanyOnJan6 || false;
  config.christmastideIncludesTheSeasonOfEpiphany = config.christmastideIncludesTheSeasonOfEpiphany || true;
  config.corpusChristiOnThursday = config.corpusChristiOnThursday || false;
  config.ascensionOnSunday = config.ascensionOnSunday || false;
  config.country = config.country || ''; // Must be defaulted to empty string if not specified
  // CRUCIAL!! If country was passed as "general", reset it to an empty string

  if (_lodash["default"].eq(config.country, 'general')) {
    config.country = '';
  }

  config.locale = config.locale || 'en';
  config.type = config.type || 'calendar';
  config.query = _lodash["default"].isPlainObject(config.query) ? config.query : null;
  return config;
}; // Return the appropriate national calendar based on the country given
// Returns object with function returning empty array if nothing specified
// country: the camel cased country name to get the calendar for (country name will be camel cased in this method)


var getCalendar = function getCalendar(country) {
  if (country) {
    if (_lodash["default"].has(Calendars, _lodash["default"].camelCase(country))) {
      return Calendars[_lodash["default"].camelCase(country)];
    } else {
      return Calendars['general'];
    }
  }

  return {
    dates: function dates() {
      return [];
    }
  };
}; // Returns the merged national & general calendar dates
// along with key celebrations in the Roman Catholic rite
// Merges the national calendar to the general calendar
// where national calendar dates with the same key as a date
// in the general calendar will take precedence
// options: (see _calendarYear)


exports.getCalendar = getCalendar;

var _getCalendar = function _getCalendar(options) {
  // Get the general calendar based on the given year and format the result for better processing
  var general = getCalendar('general').dates(options.year); // Get the relevant national calendar object based on the given country

  var national = getCalendar(options.country).dates(options.year); // Check if 'drop' has been defined for any celebrations in the national calendar
  // and remove them from both national and general calendar sources

  var dropKeys = _lodash["default"].map(_lodash["default"].filter(national, function (n) {
    return _lodash["default"].has(n, 'drop') && n.drop;
  }), 'key');

  if (!_lodash["default"].isEmpty(dropKeys)) {
    _lodash["default"].each(dropKeys, function (dropKey) {
      // _,remove() mutates the array
      _lodash["default"].remove(general, function (_ref) {
        var key = _ref.key;
        return _lodash["default"].eq(key, dropKey);
      });

      _lodash["default"].remove(national, function (_ref2) {
        var key = _ref2.key;
        return _lodash["default"].eq(key, dropKey);
      });
    });
  } // format the general calendar for better processing and add the calendar source "g"


  general = _lodash["default"].reduce(general, function (r, v, k) {
    v.source = 'g';
    r[v.key] = v;
    return r;
  }, {}); // format the national calendar for better processing and add the calendar source "n"

  national = _lodash["default"].reduce(national, function (r, v, k) {
    v.source = 'n';
    r[v.key] = v;
    return r;
  }, {}); // If the national calendar has the same celebration defined
  // as in the general calendar, it replaces the one
  // in the general calendar
  // If the national calendar date is not in the general
  // calendar, it is added

  _lodash["default"].each(national, function (v, k) {
    return _lodash["default"].set(general, k, v);
  }); // Get the celebration dates based on the given year and options
  // and format the result for better processing


  var celebrations = _lodash["default"].reduce(Celebrations.dates(options.year, options.christmastideEnds, options.epiphanyOnJan6, options.corpusChristiOnThursday, options.ascensionOnSunday), function (r, v, k) {
    v.source = 'c';
    r[v.key] = v;
    return r;
  }, {}); // If the general calendar has the same celebration defined
  // check if it is prioritized, if not prioritized, it will
  // be overwritten by the incoming celebration date


  _lodash["default"].each(celebrations, function (v, k) {
    if (_lodash["default"].has(general, k)) {
      var date = _lodash["default"].get(general, k); // if the general date is not prioritized, it will be overwritten
      // by the celebration date


      if (!_lodash["default"].isUndefined(date.data) && !date.data.prioritized) {
        _lodash["default"].set(general, k, v);
      }
    } else {
      _lodash["default"].set(general, k, v);
    }
  }); // Merge coinciding dates based on this logic:
  //
  // Rule 1:
  // celebration dates have the highest priority
  // but if the national calendar has the same date
  // and is prioritized, it can replace the celebration date
  // celebration dates will always override general dates
  // only a national date may override a celebration
  //
  // Rule 2:
  // A national date can override a general date if the general
  // date is not prioritized. However if the general date is
  // prioritized, it will NOT be replaced by a national date that is
  // not prioritized
  // If both are prioritzed, the national date is kept
  //
  // Group dates by their moment values


  var result = _lodash["default"].groupBy(general, function (v) {
    return v.moment.valueOf();
  }); // Apply replacement logic for coinciding dates


  result = _lodash["default"].map(result, function (coincidences) {
    // Only run when there's more than 1 date in the group
    if (coincidences.length > 1) {
      // Group coincidences by their source
      var sources = _lodash["default"].groupBy(coincidences, function (v) {
        return v.source;
      }); // Flag of the date to be retained


      var keep; // If the group has
      // [1] a celebration
      // [2] no national date
      // [3] no general date
      // Keep the celebration and discard other coincidences

      if (_lodash["default"].has(sources, 'c') && !_lodash["default"].has(sources, 'n') && !_lodash["default"].has(sources, 'g')) {
        keep = 'c';
      } // If the group has
      // [1] a celebration
      // [2] a national date
      // [3] no general date
      // Keep national date IF its prioritized
      // else keep the celebration
      else if (_lodash["default"].has(sources, 'c') && _lodash["default"].has(sources, 'n')) {
          if (_lodash["default"].head(sources['n']).data.prioritized) {
            keep = 'n';
          } else {
            keep = 'c';
          }
        } // If the group has
        // [1] a national
        // [2] a general date
        // [3] no celebration
        // Keep the general date IF its prioritized
        // If not, keep the national date
        else if (!_lodash["default"].has(sources, 'c') && _lodash["default"].has(sources, 'n') && _lodash["default"].has(sources, 'g')) {
            if (!_lodash["default"].head(sources['n']).data.prioritized && _lodash["default"].head(sources['g']).data.prioritized) {
              keep = 'g';
            } else {
              keep = 'n';
            }
          } // If the group has multiple general dates ...
          // Step 1: Keep the one's that are prioritzed
          // Step 2: Keep the highest ranking general date
          else if (!_lodash["default"].has(sources, 'c') && !_lodash["default"].has(sources, 'n') && _lodash["default"].has(sources, 'g')) {
              // Get prioritized dates, if any
              var prioritizedDates = _lodash["default"].map(sources, function (source) {
                return _lodash["default"].filter(source, function (d) {
                  return d.data.prioritized;
                });
              });

              if (!_lodash["default"].isEmpty(prioritizedDates)) {
                // Pick highest ranking prioritized date
                coincidences = _lodash["default"].map(prioritizedDates, function (d) {
                  return _lodash["default"].minBy(d, function (item) {
                    return _lodash["default"].indexOf(_constants.Types, item.type);
                  });
                });
              } else {
                // If no prioritized dates found, simply pick the highest ranking date
                coincidences = _lodash["default"].map(sources, function (source) {
                  return _lodash["default"].minBy(source, function (item) {
                    return _lodash["default"].indexOf(_constants.Types, item.type);
                  });
                });
              }

              keep = 'g';
            } // If the group has a celebration and general date but no national date
            // and any other combination, keep the celebration date
            else {
                keep = 'c';
              } // Keep only the relevant date


      coincidences = _lodash["default"].filter(coincidences, {
        source: keep
      });
    }

    return coincidences;
  }); // Flatten the results

  result = _lodash["default"].flatten(result); // Remap the keys to be timestamps for better processing

  result = _lodash["default"].reduce(result, function (r, v, k) {
    // If the response already has this timestamp
    if (_lodash["default"].has(r, v.moment.valueOf())) {
      var date = _lodash["default"].get(r, v.moment.valueOf()); // If the incoming date has a higher rank than the current date


      if (_lodash["default"].lt(_lodash["default"].indexOf(_constants.Types, v.type), _lodash["default"].indexOf(_constants.Types, date.type))) {
        // Replace it with the incoming date
        r[v.moment.valueOf()] = v;
      }
    } else {
      // Response does not have this timestamp
      r[v.moment.valueOf()] = v;
    }

    return r;
  }, {});
  return result;
}; // options: (configuration options)
// dates: (liturgical dates array)


var _applyDates = function _applyDates(options, dates) {
  // Get the merged General and National Calendar dates
  var calendarDates = _getCalendar(options);

  var liturgicalDates = _lodash["default"].reduce(dates, function (r, v, k) {
    r[v.moment.valueOf()] = v;
    return r;
  }, {});

  dates = _lodash["default"].map(liturgicalDates, function (date, timestamp) {
    if (_lodash["default"].has(calendarDates, timestamp)) {
      var candidate = _lodash["default"].get(calendarDates, timestamp);

      var replace = false;
      var derank = false; //------------------------------------------------------------------
      // A celebration date will replace anything
      //------------------------------------------------------------------

      if (_lodash["default"].eq(candidate.source, 'c')) {
        replace = true;
      } //------------------------------------------------------------------
      // A general or national date needs further processing
      // before replacing something in the liturgical calendar
      //------------------------------------------------------------------
      else {
          //------------------------------------------------------------------
          // A SOLEMNITY will replace any date in the liturgical calendar
          // - solemnity must not override a solemnity in octave of EASTER
          //------------------------------------------------------------------
          if (_lodash["default"].eq(candidate.type, _constants.Types.SOLEMNITY) && _lodash["default"].gt(_lodash["default"].indexOf(_constants.Types, date.type), 0)) {
            replace = true;
          } //------------------------------------------------------------------
          // MEMORIAL or OPT_MEMORIAL that fall on a FERIA
          // in the SEASON OF LENT are reduced to a COMMEMORATION
          //------------------------------------------------------------------
          else if (_lodash["default"].eq(date.type, _constants.Types.FERIA) && _lodash["default"].eq(date.data.season.key, _constants.LiturgicalSeasons.LENT) && (_lodash["default"].eq(candidate.type, _constants.Types.MEMORIAL) || _lodash["default"].eq(candidate.type, _constants.Types.OPT_MEMORIAL))) {
              replace = true;
              derank = true;
            } //------------------------------------------------------------------
            // MEMORIAL or OPT_MEMORIAL that fall on a FERIA
            // outside LENT or the Easter Octave will replace the general FERIA
            //------------------------------------------------------------------
            else if (_lodash["default"].eq(date.type, _constants.Types.FERIA) // If the current date is of type feria
              && !_lodash["default"].eq(date.data.season.key, _constants.LiturgicalSeasons.LENT) // And this feria is not in Lent
              && (_lodash["default"].eq(candidate.type, _constants.Types.MEMORIAL) || _lodash["default"].eq(candidate.type, _constants.Types.OPT_MEMORIAL)) // And the candidate is either a memorial or optional memorial
              ) {
                  replace = true; // Then the candidate is fit to replace the feria
                } //------------------------------------------------------------------
                // A non prioritized FEAST can only replace FERIA \
                // - feria must not be in the octave of EASTER
                //------------------------------------------------------------------
              else if (_lodash["default"].eq(candidate.type, _constants.Types.FEAST) && _lodash["default"].eq(date.type, _constants.Types.FERIA) && !_lodash["default"].eq(date.data.season.key, _constants.LiturgicalSeasons.LENT) && !candidate.data.prioritized) {
                  replace = true;
                } //------------------------------------------------------------------
                // A FEAST occuring in the season of LENT is deranked
                // to a COMMEMORATION
                //------------------------------------------------------------------
                else if (_lodash["default"].eq(candidate.type, _constants.Types.FEAST) && _lodash["default"].eq(date.type, _constants.Types.FERIA) && _lodash["default"].eq(date.data.season.key, _constants.LiturgicalSeasons.LENT)) {
                    replace = true;
                    derank = true;
                  } //------------------------------------------------------------------
                  // A prioritized FEAST can replace a SUNDAY or FERIA
                  // When a Feast of the Lord falls on a SUNDAY it replaces the SUNDAY in Ordinary Time.
                  // - feria must not be in the octave of EASTER
                  //------------------------------------------------------------------
                  else if (_lodash["default"].eq(candidate.type, _constants.Types.FEAST) && (_lodash["default"].eq(date.type, _constants.Types.FERIA) || _lodash["default"].eq(date.type, _constants.Types.SUNDAY)) && !_lodash["default"].eq(date.data.season.key, _constants.LiturgicalSeasons.LENT) && candidate.data.prioritized) {
                      replace = true;
                    } //------------------------------------------------------------------
                    // A Sunday can only replace a Sunday
                    //------------------------------------------------------------------
                    else if (_lodash["default"].eq(date.type, _constants.Types.SUNDAY) && _lodash["default"].eq(candidate.type, _constants.Types.SUNDAY)) {
                        replace = true;
                      } //------------------------------------------------------------------
                      // A feria can only replace a feria
                      // Sundays in Ordinary Time and Chrismastide take precedence over all other celebrations
                      // except for SOLEMNITIES and certain FEASTS
                      //------------------------------------------------------------------
                      else if (_lodash["default"].eq(date.type, _constants.Types.FERIA) && _lodash["default"].eq(candidate.type, _constants.Types.FERIA)) {
                          replace = true;
                        } // Uncomment to see the dates that from the calendar that were not replaced
          // else {
          //   console.log('not replaced:', candidate.type, candidate.moment.format('L'), candidate.name );
          // }

        }

      if (replace) {
        date.key = candidate.key;
        date.name = candidate.name;
        date.source = candidate.source;
        date.type = derank ? _constants.Types.COMMEMORATION : candidate.type;
        date.data = _lodash["default"].merge({}, date.data, candidate.data);
      }
    }

    return date;
  });
  return dates;
}; //================================================================================================
// Include liturgical cycle metadata for the dates in the liturgical year
//================================================================================================
// year
// dates


var _liturgicalCycleMetadata = function _liturgicalCycleMetadata(year, dates) {
  // Formula to calculate lectionary cycle (Year A, B, C)
  var firstSundayOfAdvent = Dates.firstSundayOfAdvent(year);
  var thisCycle = (year - 1963) % 3;
  var nextCycle = _lodash["default"].eq(thisCycle, 2) ? 0 : thisCycle + 1;

  _lodash["default"].map(dates, function (v) {
    //=====================================================================
    // LITURGICAL CYCLES
    //---------------------------------------------------------------------
    // If the date is on or after the first sunday of advent
    // it is the next liturgical cycle
    //=====================================================================
    if (v.moment.isSame(firstSundayOfAdvent) || v.moment.isAfter(firstSundayOfAdvent)) {
      v.data.meta.cycle = {
        key: nextCycle,
        value: _constants.Cycles[nextCycle]
      };
    } else {
      v.data.meta.cycle = {
        key: thisCycle,
        value: _constants.Cycles[thisCycle]
      };
    }

    return v;
  });

  return dates;
}; //================================================================================================
// METHODS GENERATE THE ROMAN CALENDAR ACCORDING TO CALENDAR
// YEAR OR LITURGICAL YEAR
//================================================================================================
// Returns an object containing dates for the
// days that occur during the calendar year
// c: (an object literal with the following options)
// [-] year: The year to calculate the liturgical date ranges
// [-] country: Get national calendar dates for the given country (defaults to 'general')
// [-] locale: The language for the calendar names (defaults to 'en')
// [-] christmastideEnds: t|o|e (The mode to calculate the end of Christmastide. Defaukts to 'o')
// [-] epiphanyOnJan6: true|false|undefined (If true, Epiphany will be fixed to Jan 6) (defaults to false)
// [-] christmastideIncludesTheSeasonOfEpiphany: true|false|undefined (If false, the season of Epiphany will not be merged into Christmastide )
// [-] corpusChristiOnThursday: true|false|undefined (If true, Corpus Christi is set to Thursday) (defaults to false)
// [-] ascensionOnSunday: true|false|undefined (If true, Ascension is moved to the 7th Sunday of Easter) (defaults to false)
// [-] type: calendar|liturgical (return dates in either standard calendar or liturgical calendar format)
// [-] query: Additional filters to be applied against calendar dates array (default: none)


var _calendarYear = function _calendarYear(c) {
  // Get the liturgical seasons that run through the year
  var dates = _lodash["default"].union(Seasons.christmastide(c.year - 1, c.christmastideEnds, c.epiphanyOnJan6, c.christmastideIncludesTheSeasonOfEpiphany), Seasons.earlyOrdinaryTime(c.year, c.christmastideEnds, c.epiphanyOnJan6), Seasons.lent(c.year), Seasons.eastertide(c.year), Seasons.laterOrdinaryTime(c.year), Seasons.advent(c.year), Seasons.christmastide(c.year, c.christmastideEnds, c.epiphanyOnJan6, c.christmastideIncludesTheSeasonOfEpiphany)); // console.log(Seasons.lent(c.year));
  // Merge liturgical calendar dates with those from the general & national calendars


  dates = _applyDates(c, dates); // Filter dates within the given year only

  dates = _lodash["default"].filter(dates, function (d) {
    return _lodash["default"].eq(d.moment.year(), c.year);
  });
  dates = _liturgicalCycleMetadata(c.year, dates);
  return dates;
}; // Returns an object containing dates for the
// days that occur during the liturgical year
// c: (an object literal with the following options)
// [-] year: The year to calculate the liturgical date ranges
// [-] country: Get national calendar dates for the given country (defaults to 'general')
// [-] locale: The language for the calendar names (defaults to 'en')
// [-] christmastideEnds: t|o|e (The mode to calculate the end of Christmastide. Defaukts to 'o')
// [-] epiphanyOnJan6: true|false|undefined (If true, Epiphany will be fixed to Jan 6) (defaults to false)
// [-] christmastideIncludesTheSeasonOfEpiphany: true|false|undefined (If false, the season of Epiphany will not be merged into Christmastide )
// [-] corpusChristiOnThursday: true|false|undefined (If true, Corpus Christi is set to Thursday) (defaults to false)
// [-] ascensionOnSunday: true|false|undefined (If true, Ascension is moved to the 7th Sunday of Easter) (defaults to false)
// [-] type: calendar|liturgical (return dates in either standard calendar or liturgical calendar format)
// [-] query: Additional filters to be applied against calendar dates array (default: none)


var _liturgicalYear = function _liturgicalYear(c) {
  // Get dates for current year
  var thisYear = _calendarYear(c);

  var start = Dates.firstSundayOfAdvent(c.year); // Get dates for the following year

  c.year = c.year + 1;

  var nextYear = _calendarYear(c);

  var end = Dates.firstSundayOfAdvent(c.year); // Last day of liturgical year must be before this date

  var dates = _lodash["default"].union(_lodash["default"].filter(thisYear, function (v) {
    return v.moment.isSame(start) || v.moment.isAfter(start);
  }), _lodash["default"].filter(nextYear, function (v) {
    return v.moment.isBefore(end);
  }));

  return dates;
}; // Returns an array of liturgical dates based on the supplied calendar options
// The array may return dates according to the given calendar year or liturgical
// year depending on the options supplied
//
// If query object is passed:
// Return filtered liturgical calendar dates according to the given calendar options
// and filtering options passed in by the user
//
// config: calendar settings
//         if the config object has a query, it will be used to filter the
//         date results returned
//
// skipIsoConversion: undefined|true|false - skip converting moment objects to ISO8601 timestamp
//                    default action converts moment objects to ISO Strings
//


var calendarFor = function calendarFor() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var skipIsoConversion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  // If config is passed as a boolean
  // Then assume that we want the calendar for the current year
  // and either want to skip moment date ISO conversion or keep it
  // depending on the config value is true or false
  if (_lodash["default"].isBoolean(config)) {
    skipIsoConversion = config;
    config = {};
  } // If config is passed as an integer
  // Then assume we want the calendar for the current year


  if (_lodash["default"].isNumber(config)) {
    config = {
      year: config
    };
    skipIsoConversion = skipIsoConversion || false;
  } // Sanitize incoming config


  config = _sanitizeConfig(config); // Set the locale information

  Utils.setLocale(config.locale); // Get dates based on options

  var dates = _lodash["default"].eq(config.type, 'liturgical') ? _liturgicalYear(config) : _calendarYear(config); // Run queries, if any and return the results

  return queryFor(dates, config.query, skipIsoConversion);
}; // Filters an array of dates generated from the calendarFor function based on a given query.
// dates: An array of dates generated from the calendarFor function
// query: An object containing keys to filter the dates by
// skipIsoConversion: undefined|true|false - skip converting moment objects to ISO8601 timestamp
//                    default action converts moment objects to ISO Strings


exports.calendarFor = calendarFor;

var queryFor = function queryFor() {
  var dates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var skipIsoConversion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (!_lodash["default"].every(dates, _lodash["default"].isObject)) {
    throw 'romcal.queryFor can only accept a single dimenional array of objects';
  } //==========================================================================
  // Check if there is a query defined, if none return the unfiltered
  // calendar array
  //==========================================================================


  if (!_lodash["default"].isNull(query) && !_lodash["default"].isEmpty(query)) {
    // Reparse dates into moment objects if needed
    dates = Utils.convertIsoDateStringToMomentObject(dates); // Months are zero indexed, so January is month 0.

    if (_lodash["default"].has(query, 'month')) {
      dates = _lodash["default"].filter(dates, function (d) {
        return _lodash["default"].eq(d.moment.month(), _lodash["default"].get(query, 'month'));
      });
    }

    if (_lodash["default"].has(query, 'day')) {
      dates = _lodash["default"].filter(dates, function (d) {
        return _lodash["default"].eq(d.moment.day(), _lodash["default"].get(query, 'day'));
      });
    }

    if (_lodash["default"].has(query, 'title')) {
      dates = _lodash["default"].filter(dates, function (d) {
        return _lodash["default"].includes(d.data.meta.titles, _lodash["default"].get(query, 'title'));
      });
    }

    if (_lodash["default"].has(query, 'group')) {
      switch (_lodash["default"].get(query, 'group')) {
        case 'days':
          dates = _lodash["default"].groupBy(dates, function (d) {
            return d.moment.day();
          });
          break;

        case 'months':
          dates = _lodash["default"].groupBy(dates, function (d) {
            return d.moment.month();
          });
          break;

        case 'daysByMonth':
          dates = _lodash["default"].groupBy(dates, function (d) {
            return d.moment.month();
          });
          dates = _lodash["default"].map(dates, function (v) {
            return _lodash["default"].groupBy(v, function (d) {
              return d.moment.day();
            });
          });
          break;

        case 'weeksByMonth':
          dates = _lodash["default"].groupBy(dates, function (d) {
            return d.moment.month();
          });
          dates = _lodash["default"].map(dates, function (v) {
            return _lodash["default"].groupBy(v, function (d) {
              return d.data.calendar.week;
            });
          });
          break;

        case 'cycles':
          dates = _lodash["default"].groupBy(dates, function (d) {
            return d.data.meta.cycle.value;
          });
          break;

        case 'types':
          dates = _lodash["default"].groupBy(dates, function (d) {
            return d.type;
          });
          break;

        case 'liturgicalSeasons':
          dates = _lodash["default"].groupBy(dates, function (d) {
            return d.data.season.key;
          }); // console.log('dates', dates );

          break;

        case 'liturgicalColors':
          dates = _lodash["default"].groupBy(dates, function (d) {
            return d.data.meta.liturgicalColor.key;
          });
          break;

        case 'psalterWeek':
          dates = _lodash["default"].groupBy(dates, function (d) {
            return d.data.meta.psalterWeek.key;
          });
          break;

        default:
          break;
      }
    }
  } // If undefined or false, continue with conversion


  if (!skipIsoConversion) {
    dates = Utils.convertMomentObjectToIsoDateString(dates);
  }

  return dates;
};

exports.queryFor = queryFor;
},{"../calendars":25,"../constants":61,"./Celebrations":64,"./Dates":65,"./Seasons":66,"./Utils":67,"lodash":1,"moment":4}],64:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dates = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var Dates = _interopRequireWildcard(require("./Dates"));

var Utils = _interopRequireWildcard(require("./Utils"));

var _constants = require("../constants");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// year: Takes the year (integer)
// christmastideEnds: t|o|e [The mode to calculate the end of Christmastide]
// epiphanyOnJan6: true|false [If true, Epiphany will be fixed to Jan 6] (defaults to false)
// corpusChristiOnThursday: true|false|undefined (If true, Corpus Christi is set to Thursday) (defaults to false)
// ascensionOnSunday: true|false|undefined (If true, Ascension is moved to the 7th Sunday of Easter) (defaults to false)
var dates = function dates(year, christmastideEnds) {
  var epiphanyOnJan6 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var corpusChristiOnThursday = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var ascensionOnSunday = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var _dates = [// Solemnities
  {
    "key": "immaculateConception",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.immaculateConception(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "christmas",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.christmas(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "maryMotherOfGod",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.maryMotherOfGod(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "epiphany",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.epiphany(year, epiphanyOnJan6),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "trinitySunday",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.trinitySunday(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "corpusChristi",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.corpusChristi(year, corpusChristiOnThursday),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "sacredHeartOfJesus",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.sacredHeartOfJesus(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "birthOfJohnTheBaptist",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.birthOfJohnTheBaptist(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "peterAndPaulApostles",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.peterAndPaulApostles(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED
      }
    }
  }, {
    "key": "assumption",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.assumption(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "allSaints",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.allSaints(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "christTheKing",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.christTheKing(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "josephHusbandOfMary",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.josephHusbandOfMary(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "annunciation",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.annunciation(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "easter",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.easter(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "divineMercySunday",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.divineMercySunday(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "ascension",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.ascension(year, ascensionOnSunday),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }, {
    "key": "pentecostSunday",
    "type": _constants.Types.SOLEMNITY,
    "moment": Dates.pentecostSunday(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED
      }
    }
  }, // Lent, Holy Week & Triduum
  {
    "key": "ashWednesday",
    "type": _constants.Types.FERIA,
    "moment": Dates.ashWednesday(year),
    "data": {
      "prioritized": true,
      "season": {
        "key": _constants.LiturgicalSeasons.LENT,
        "value": Utils.localize({
          key: 'lent.season'
        })
      },
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.PURPLE
      }
    }
  }, {
    "key": "palmSunday",
    "type": _constants.Types.SUNDAY,
    "moment": Dates.palmSunday(year),
    "data": {
      "prioritized": true,
      "season": {
        "key": _constants.LiturgicalSeasons.HOLY_WEEK,
        "value": Utils.localize({
          key: 'holyWeek.season'
        })
      },
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED
      }
    }
  }, {
    "key": "holyThursday",
    "type": _constants.Types.TRIDUUM,
    "moment": Dates.holyThursday(year),
    "data": {
      "prioritized": true,
      "season": {
        "key": _constants.LiturgicalSeasons.HOLY_WEEK,
        "value": Utils.localize({
          key: 'holyWeek.season'
        })
      },
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.TRIDUUM]
      }
    }
  }, {
    "key": "goodFriday",
    "type": _constants.Types.TRIDUUM,
    "moment": Dates.goodFriday(year),
    "data": {
      "prioritized": true,
      "season": {
        "key": _constants.LiturgicalSeasons.HOLY_WEEK,
        "value": Utils.localize({
          key: 'holyWeek.season'
        })
      },
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.TRIDUUM]
      }
    }
  }, {
    "key": "holySaturday",
    "type": _constants.Types.TRIDUUM,
    "moment": Dates.holySaturday(year),
    "data": {
      "prioritized": true,
      "season": {
        "key": _constants.LiturgicalSeasons.HOLY_WEEK,
        "value": Utils.localize({
          key: 'holyWeek.season'
        })
      },
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.TRIDUUM]
      }
    }
  }, // Feasts
  {
    "key": "holyFamily",
    "type": _constants.Types.FEAST,
    "moment": Dates.holyFamily(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.FEAST_OF_THE_LORD]
      }
    }
  }, {
    "key": "baptismOfTheLord",
    "type": _constants.Types.FEAST,
    "moment": Dates.baptismOfTheLord(year, epiphanyOnJan6),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.FEAST_OF_THE_LORD]
      }
    }
  }, {
    "key": "presentationOfTheLord",
    "type": _constants.Types.FEAST,
    "moment": Dates.presentationOfTheLord(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.FEAST_OF_THE_LORD]
      }
    }
  }, {
    "key": "transfiguration",
    "type": _constants.Types.FEAST,
    "moment": Dates.transfiguration(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE,
        "titles": [_constants.Titles.FEAST_OF_THE_LORD]
      }
    }
  }, {
    "key": "theExaltationOfTheHolyCross",
    "type": _constants.Types.FEAST,
    "moment": Dates.theExaltationOfTheHolyCross(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.RED,
        "titles": [_constants.Titles.FEAST_OF_THE_LORD]
      }
    }
  }, // Memorials
  {
    "key": "immaculateHeartOfMary",
    "type": _constants.Types.FEAST,
    "moment": Dates.immaculateHeartOfMary(year),
    "data": {
      "prioritized": true,
      "meta": {
        "liturgicalColor": _constants.LiturgicalColors.WHITE
      }
    }
  }];
  return _lodash["default"].map(_dates, function (_ref) {
    var key = _ref.key,
        data = _ref.data,
        rest = _objectWithoutProperties(_ref, ["key", "data"]);

    var name = Utils.localize({
      key: 'celebrations.' + key
    });
    var meta = data.meta;

    if (_lodash["default"].isUndefined(meta)) {
      data.meta = {
        titles: []
      };
    }

    return _objectSpread({
      name: name,
      key: key,
      data: data
    }, rest);
  });
};

exports.dates = dates;
},{"../constants":61,"./Dates":65,"./Utils":67,"lodash":1,"moment":4}],65:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.theExaltationOfTheHolyCross = exports.transfiguration = exports.presentationOfTheLord = exports.baptismOfTheLord = exports.holyFamily = exports.immaculateHeartOfMary = exports.sacredHeartOfJesus = exports.corpusChristi = exports.trinitySunday = exports.ascension = exports.immaculateConception = exports.allSaints = exports.assumption = exports.peterAndPaulApostles = exports.birthOfJohnTheBaptist = exports.annunciation = exports.josephHusbandOfMary = exports.maryMotherOfGod = exports.daysAfterEpiphany = exports.daysBeforeEpiphany = exports.epiphany = exports.christmastide = exports.octaveOfChristmas = exports.christmas = exports.daysOfAdvent = exports.sundaysOfAdvent = exports.firstSundayOfAdvent = exports.christTheKing = exports.daysOfLaterOrdinaryTime = exports.daysOfEarlyOrdinaryTime = exports.pentecostSunday = exports.divineMercySunday = exports.octaveOfEaster = exports.daysOfEaster = exports.sundaysOfEaster = exports.easter = exports.holyWeek = exports.holySaturday = exports.goodFriday = exports.holyThursday = exports.palmSunday = exports.daysOfLent = exports.sundaysOfLent = exports.ashWednesday = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _momentRecur = _interopRequireDefault(require("moment-recur"));

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

//==================================================================================
// Epiphany & Christmastide
//==================================================================================
// EPIPHANY RUBRIC
// Standard rule:
// Epiphany is celebrated on the first Sunday after the first Saturday in January,
// which means it could fall on any day from January 2 to January 8.
// Traditional rule:
// Epiphany is always celebrated on Jan 6
// y: year
// epiphanyOnJan6: true|false (activate traditional rule)
var epiphany = function epiphany(y) {
  var epiphanyOnJan6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  // Get the first day of the year
  var firstDay = _moment["default"].utc({
    year: y,
    month: 0,
    day: 1
  });

  var date = _moment["default"].utc({
    year: y,
    month: 0,
    day: 6
  });

  if (!epiphanyOnJan6) {
    switch (firstDay.day()) {
      // If first day of the year is a Saturday, Mary Mother of God is on that day
      // and Epiphany is on the next day
      case 6:
        date = firstDay.add(1, 'days');
        break;
      // If first day of the year is a Sunday, Mary Mother of God is on that Sunday and
      // the Sunday proceeding will be Epiphany

      case 0:
        date = firstDay.add(7, 'days');
        break;
      // If first day of the year is on a feria (i.e. Monday - Friday),
      // Epiphany will be celebrated on the Sunday proceeding

      default:
        date = firstDay.add(1, 'weeks').startOf('week');
        break;
    }
  }

  return date;
}; // Christmas falls on the 25th of December
// y: year


exports.epiphany = epiphany;

var christmas = function christmas(y) {
  return _moment["default"].utc({
    year: y,
    month: 11,
    day: 25
  });
}; // The 8 days from Christmas to Mary Mother of God (inclusive)
// y: year


exports.christmas = christmas;

var octaveOfChristmas = function octaveOfChristmas(y) {
  return _moment["default"].utc().recur({
    start: christmas(y),
    end: maryMotherOfGod(y + 1)
  }).every(1).day().all();
}; // The Solemnity of Mary, the Holy Mother of God is a
// feast day of the Blessed Virgin Mary under the aspect
// of her motherhood of Jesus Christ, whom Christians
// see as the Lord, Son of God. It is celebrated by
// the Latin Rite of the Catholic Church on 1 January,
// the Octave (8th) day of Christmas, and in some
// countries is a Holy day of obligation..
// y: year


exports.octaveOfChristmas = octaveOfChristmas;

var maryMotherOfGod = function maryMotherOfGod(y) {
  return _moment["default"].utc({
    year: y,
    month: 0,
    day: 1
  });
}; // The Baptism of the Lord (or the Baptism of Christ) is the feast day
// commemorating the baptism of Jesus in the Jordan River by John the
// Baptist. Originally the baptism of Christ was celebrated on Epiphany,
// which commemorates the coming of the Magi, the baptism of Christ, and
// the wedding at Cana. Over time in the West, however, the celebration of
// the baptism of the Lord came to be commemorated as a distinct feast from
// Epiphany. It is celebrated in Anglican and Lutheran Churches on the first
// Sunday following The Epiphany of Our Lord (6 January).
// y: year
// epiphanyOnJan6: true|false|undefined [When true, makes Epiphany land on Jan 6 always] (defaults to false)


exports.maryMotherOfGod = maryMotherOfGod;

var baptismOfTheLord = function baptismOfTheLord(y) {
  var epiphanyOnJan6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var date = epiphany(y, epiphanyOnJan6); // If Epiphany is celebrated on Jan. 6
  // the Baptism of the Lord occurs on the Sunday following Jan. 6.

  if (_lodash["default"].eq(date.dayOfYear(), 6)) {
    date = date.add(1, 'weeks').startOf('week');
  } // If Epiphany is not celebrated on Jan. 6
  else {
      // If Epiphany occurs on Sunday Jan. 7 or Sunday Jan. 8,
      //  then the Baptism of the Lord is the next day (Monday)
      if (_lodash["default"].eq(date.day(), 0) && (_lodash["default"].eq(date.dayOfYear(), 7) || _lodash["default"].eq(date.dayOfYear(), 8))) {
        date = date.add(1, 'days');
      } // If Epiphany occurs before Jan. 6, the Sunday
      // following Epiphany is the Baptism of the Lord.
      else {
          date = date.add(1, 'weeks').startOf('week');
        }
    }

  return date;
}; // In the Roman Catholic Church, the Feast of the Presentation of the Lord is
// a Feast Day occurring between the Feast of the Conversion of St. Paul the
// Apostle on 25 January and the Feast of the Chair of St. Peter the Apostle on
// 22 February. In some Western liturgical churches, Vespers (or Compline) on the
// Feast of the Presentation marks the end of the Epiphany season.
// y: year


exports.baptismOfTheLord = baptismOfTheLord;

var presentationOfTheLord = function presentationOfTheLord(y) {
  return _moment["default"].utc({
    year: y,
    month: 1,
    day: 2
  });
}; // In different Churches, the Christmas Season might end on Jan. 6
// (the traditional date of the Feast of the Epiphany), or might last
// until the Feast of the Baptism of the Lord (usually the Sunday after
// Epiphany), or might even last all the way to Feb. 2 (the Feast of the
// Presentation of the Lord, 40 days after Dec. 25) (Candlemass)
// y: year (integer)
// christmastideEnds: the rule determining when the season of Christmas ends
//    t = Traditional [Jan 6th, Epiphany]
//    o = Ordinary Liturgical Calendar of the Western Roman Rite [Baptism of the Lord]
//    e = Extraordinary Liturgical Calendar of the Western Roman Rite [Presentation of the Lord (Candlemass)]
//        defaults to 'o'
// epiphanyOnJan6: true|false [If true, Epiphany will be fixed to Jan 6] (defaults to false)


exports.presentationOfTheLord = presentationOfTheLord;

var christmastide = function christmastide(y, christmastideEnds) {
  var epiphanyOnJan6 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var start = christmas(y);
  var end = null;

  switch (christmastideEnds) {
    case 't':
      end = epiphany(y + 1, epiphanyOnJan6);
      break;

    case 'o':
      end = baptismOfTheLord(y + 1, epiphanyOnJan6);
      break;

    case 'e':
      // Candlemass (40 days)
      end = presentationOfTheLord(y + 1);
      break;

    default:
      end = baptismOfTheLord(y + 1, epiphanyOnJan6);
      break;
  }

  return _moment["default"].recur({
    start: start,
    end: end
  }).every(1).day().all();
}; //==================================================================================
// Ordinary Time
//==================================================================================
// Ordinary Time in the early part of the year begins
// the day after the Baptism of the Lord and concludes
// the day before Ash Wednesday.
// year: Year (integer)
// christmastideEnds: t|o|e [The mode to calculate the end of Christmastide]
// epiphanyOnJan6: true|false [If true, fixes Epiphany to Jan 6] (defaults to false)


exports.christmastide = christmastide;

var daysOfEarlyOrdinaryTime = function daysOfEarlyOrdinaryTime(y, christmastideEnds) {
  var epiphanyOnJan6 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var start = null;
  var end = ashWednesday(y);

  if (_lodash["default"].eq(christmastideEnds, 't')) {
    start = epiphany(y, epiphanyOnJan6);
  } else if (_lodash["default"].eq(christmastideEnds, 'e')) {
    start = presentationOfTheLord(y);
  } else {
    start = baptismOfTheLord(y, epiphanyOnJan6);
  }

  return _moment["default"].utc().recur({
    start: start,
    end: end,
    exceptions: [start, end]
  }).every(1).day().all();
}; // Ordinary Time in the later part of the year begins the
// day after Pentecost and concludes the day before the
// First Sunday of Advent.
// y: Year (integer)


exports.daysOfEarlyOrdinaryTime = daysOfEarlyOrdinaryTime;

var daysOfLaterOrdinaryTime = function daysOfLaterOrdinaryTime(y) {
  var start = pentecostSunday(y);
  var end = firstSundayOfAdvent(y);
  return _moment["default"].utc().recur({
    start: start,
    end: end,
    exceptions: [start, end]
  }).every(1).day().all();
}; // The Solemnity of Christ the King is always the 34th (and last) Sunday of Ordinary Time
// and is the week before the First Sunday of Advent. The Sundays of Ordinary Time in the
// latter part of the year are numbered backwards from Christ the King to Pentecost.
// y: Year (integer)


exports.daysOfLaterOrdinaryTime = daysOfLaterOrdinaryTime;

var christTheKing = function christTheKing(y) {
  return firstSundayOfAdvent(y).subtract(7, 'days').startOf('day');
}; //==================================================================================
// Lent & Holy Week
//==================================================================================
// Lent starts on Ash Wednesday and runs until the
// day before Holy Thursday
// y: year (integer)


exports.christTheKing = christTheKing;

var daysOfLent = function daysOfLent(y) {
  var start = ashWednesday(y);
  var end = holyThursday(y);
  return _moment["default"].utc().recur({
    start: start,
    end: end,
    exceptions: [end]
  }).every(1).day().all();
}; // Lent begins on Ash Wednesday and concludes
// the day before Holy Thursday
// y: year (integer)


exports.daysOfLent = daysOfLent;

var sundaysOfLent = function sundaysOfLent(y) {
  var start = ashWednesday(y);
  var end = holyThursday(y);
  return _moment["default"].utc().recur({
    start: start,
    end: end,
    exceptions: [end]
  }).every(0).daysOfWeek().all();
}; // Ash Wednesday, a day of fasting, is the first day of Lent in Western
// Christianity. It occurs 46 days (40 fasting days, if the 6 Sundays,
// which are not days of fast, are excluded) before Easter and can fall
// as early as 4 February or as late as 10 March.
// y: year


exports.sundaysOfLent = sundaysOfLent;

var ashWednesday = function ashWednesday(y) {
  return easter(y).subtract(46, 'days').startOf('day');
}; // Holy Week is the week just before Easter.
// In the west, it is also the last week of Lent, and includes
// Palm Sunday, Holy Wednesday, Maundy Thursday (Holy Thursday),
// Good Friday (Holy Friday), and Holy Saturday.
// It does not include Easter Sunday
// y: year


exports.ashWednesday = ashWednesday;

var holyWeek = function holyWeek(y) {
  var start = palmSunday(y);
  var end = holySaturday(y);
  return _moment["default"].utc().recur({
    start: start,
    end: end
  }).every(1).day().all();
}; // Palm Sunday is a Christian moveable feast that
// falls on the Sunday before Easter.
// y: year


exports.holyWeek = holyWeek;

var palmSunday = function palmSunday(y) {
  return easter(y).subtract(7, 'days').startOf('day');
}; // Maundy Thursday (also known as Holy Thursday) is
// the Christian holy day falling on the Thursday before Easter.
// y: year


exports.palmSunday = palmSunday;

var holyThursday = function holyThursday(y) {
  return easter(y).subtract(3, 'days').startOf('day');
}; // Good Friday is a Christian religious holiday commemorating the crucifixion of Jesus Christ
// and his death at Calvary. The holiday is observed during Holy Week as part of the
// Paschal Triduum on the Friday preceding Easter Sunday
// y: year


exports.holyThursday = holyThursday;

var goodFriday = function goodFriday(y) {
  return easter(y).subtract(2, 'days').startOf('day');
}; // Holy Saturday (Latin: Sabbatum Sanctum) i.e. the Saturday of Holy Week, also known as the
// Great Sabbath, Black Saturday, or Easter Eve,[1] and called "Joyous Saturday" or "the
// Saturday of Light" among Coptic Christians, is the day after Good Friday. It is the day
// before Easter and the last day of Holy Week in which Christians prepare for Easter.
// It commemorates the day that Jesus Christ's body lay in the tomb and the Harrowing of Hell.
// y: year


exports.goodFriday = goodFriday;

var holySaturday = function holySaturday(y) {
  return easter(y).subtract(1, 'days').startOf('day');
}; //==================================================================================
// Eastertide
//==================================================================================
// The term Octave of Easter refers to the eight-day period (Octave)
// from Easter Sunday until the Sunday following Easter, inclusive;
// y: year


exports.holySaturday = holySaturday;

var octaveOfEaster = function octaveOfEaster(y) {
  var start = easter(y);
  var end = divineMercySunday(y);
  return _moment["default"].utc().recur({
    start: start,
    end: end
  }).every(1).day().all();
}; // Eastertide is the period of fifty days from Easter Sunday to Pentecost Sunday.
// y: year


exports.octaveOfEaster = octaveOfEaster;

var sundaysOfEaster = function sundaysOfEaster(y) {
  var start = easter(y);
  var end = pentecostSunday(y);
  return _moment["default"].utc().recur({
    start: start,
    end: end
  }).every(0).daysOfWeek().all();
}; // Eastertide is the period of fifty days from Easter Sunday to Pentecost Sunday.
// y: year


exports.sundaysOfEaster = sundaysOfEaster;

var daysOfEaster = function daysOfEaster(y) {
  var start = easter(y);
  var end = pentecostSunday(y);
  return _moment["default"].utc().recur({
    start: start,
    end: end
  }).every(1).day().all();
}; // This algorithm is based on the algorithm of Oudin (1940) and quoted in
// "Explanatory Supplement to the Astronomical Almanac", P. Kenneth
// Seidelmann, editor.
// year: The year on which to check when Easter falls (integer)


exports.daysOfEaster = daysOfEaster;

var _easter = _lodash["default"].memoize(function (year) {
  var Y = year;
  var C = Math.floor(Y / 100);
  var N = Y - 19 * Math.floor(Y / 19);
  var K = Math.floor((C - 17) / 25);
  var I = C - Math.floor(C / 4) - Math.floor((C - K) / 3) + 19 * N + 15;
  I = I - 30 * Math.floor(I / 30);
  I = I - Math.floor(I / 28) * (1 - Math.floor(I / 28) * Math.floor(29 / (I + 1)) * Math.floor((21 - N) / 11));
  var J = Y + Math.floor(Y / 4) + I + 2 - C + Math.floor(C / 4);
  J = J - 7 * Math.floor(J / 7);
  var L = I - J;
  var M = 3 + Math.floor((L + 40) / 44);
  var D = L + 28 - 31 * Math.floor(M / 4);
  return {
    year: Y,
    month: M,
    day: D
  };
});

var easter = function easter(y) {
  var _easter2 = _easter(y),
      month = _easter2.month,
      day = _easter2.day;

  return _moment["default"].utc({
    year: y,
    month: month - 1,
    day: day
  });
}; // Divine Mercy Sunday is celebrated on the Sunday after Easter, the Octave of Easter,
// observed by Roman Catholic as well as some Anglicans
// y: year


exports.easter = easter;

var divineMercySunday = function divineMercySunday(y) {
  return easter(y).add(7, 'days').startOf('day');
}; // The Solemnity of Pentecost occurs 49 days after Easter.
// y: year


exports.divineMercySunday = divineMercySunday;

var pentecostSunday = function pentecostSunday(y) {
  return easter(y).add(49, 'days').startOf('day');
}; //==================================================================================
// Advent
//==================================================================================
// The start of Advent depends upon the day of the
// week on which Christmas occurs
// y: year


exports.pentecostSunday = pentecostSunday;

var firstSundayOfAdvent = function firstSundayOfAdvent(y) {
  switch (christmas(y).day()) {
    case 0:
      // Sunday
      return _moment["default"].utc({
        year: y,
        month: 10,
        day: 27
      });

    case 1:
      // Monday
      return _moment["default"].utc({
        year: y,
        month: 11,
        day: 3
      });

    case 2:
      // Tuesday
      return _moment["default"].utc({
        year: y,
        month: 11,
        day: 2
      });

    case 3:
      // Wednesday
      return _moment["default"].utc({
        year: y,
        month: 11,
        day: 1
      });

    case 4:
      // Thursday
      return _moment["default"].utc({
        year: y,
        month: 10,
        day: 30
      });

    case 5:
      // Friday
      return _moment["default"].utc({
        year: y,
        month: 10,
        day: 29
      });

    case 6:
      // Saturday
      return _moment["default"].utc({
        year: y,
        month: 10,
        day: 28
      });

    default:
      return null;
      break;
  }
}; // The length of Advent depends upon the day
// of the week on which Christmas occurs
// y: year


exports.firstSundayOfAdvent = firstSundayOfAdvent;

var daysOfAdvent = function daysOfAdvent(y) {
  var start = firstSundayOfAdvent(y);
  var end = christmas(y);
  return _moment["default"].utc().recur({
    start: start,
    end: end,
    exceptions: [end]
  }).every(1).day().all();
}; // There are always 4 sundays in Advent
// y: year


exports.daysOfAdvent = daysOfAdvent;

var sundaysOfAdvent = function sundaysOfAdvent(y) {
  var start = firstSundayOfAdvent(y);
  var end = christmas(y);
  return _moment["default"].utc().recur({
    start: start,
    end: end,
    exceptions: [end]
  }).every(0).daysOfWeek().all();
}; // y: year (integer)
// epiphanyOnJan6: true|false [If true, Epiphany will be fixed to Jan 6]


exports.sundaysOfAdvent = sundaysOfAdvent;

var daysBeforeEpiphany = function daysBeforeEpiphany(y) {
  var epiphanyOnJan6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var start = maryMotherOfGod(y);
  var end = epiphany(y, epiphanyOnJan6);

  var recurrence = _moment["default"].utc().recur({
    start: start,
    end: end,
    exceptions: [start, end]
  }).every(1).day();

  return recurrence.all();
}; // y: year (integer)
// epiphanyOnJan6: true|false [If true, Epiphany will be fixed to Jan 6]


exports.daysBeforeEpiphany = daysBeforeEpiphany;

var daysAfterEpiphany = function daysAfterEpiphany(y) {
  var epiphanyOnJan6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var start = epiphany(y, epiphanyOnJan6);
  var end = baptismOfTheLord(y, epiphanyOnJan6);

  var recurrence = _moment["default"].utc().recur({
    start: start,
    end: end,
    exceptions: [start, end]
  }).every(1).day();

  return recurrence.all();
}; // In the Roman Catholic church, the Feast of St. Joseph (19 March)
// is a Solemnity (first class if using the Tridentine calendar), and
// is transferred to another date if impeded (i.e., 19 March falling
// on Sunday or in Holy Week).
// y: year


exports.daysAfterEpiphany = daysAfterEpiphany;

var josephHusbandOfMary = function josephHusbandOfMary(y) {
  var date = _moment["default"].utc({
    year: y,
    month: 2,
    day: 19
  }); // Check to see if this solemnity falls on a Sunday of Lent
  // If it occurs on a Sunday of Lent is transferred to the
  // following Monday.


  if (_lodash["default"].eq(date.day(), 0)) {
    _lodash["default"].each(sundaysOfLent(y), function (sunday) {
      if (date.isSame(sunday)) {
        date = sunday.add(1, 'days');
      }
    });
  } // Check to see if this solemnity falls within Holy Week
  // If Joseph, Husband of Mary (Mar 19) falls on
  // Palm Sunday or during Holy Week, it is moved to
  // the Saturday preceding Palm Sunday.


  var _holyWeek = holyWeek(y);

  var holyWeekRange = _moment["default"].range(_lodash["default"].head(_holyWeek), _lodash["default"].last(_holyWeek));

  if (holyWeekRange.contains(date)) {
    date = palmSunday(y).subtract(1, 'days').startOf('day');
  }

  return date;
}; // Occurs on March 25th, moved to Monday after Divine Mercy Sunday
// if it is within Holy Week or Easter Octave
// y: year


exports.josephHusbandOfMary = josephHusbandOfMary;

var annunciation = function annunciation(y) {
  var date = _moment["default"].utc({
    year: y,
    month: 2,
    day: 25
  }); // If it occurs on a Sunday of Lent, it is trasferred to the next day (Monday)


  var match = _lodash["default"].find(sundaysOfLent(y), function (sunday) {
    return date.isSame(sunday);
  }); // Since its a Sunday, add one day to make it a Monday


  if (!_lodash["default"].isUndefined(match)) {
    date = date.add(1, 'days');
  } // If it occurs during Holy Week, it is transferred to the
  // Monday of the Second Week of Easter.


  var _holyWeek = holyWeek(y);

  var holyWeekRange = _moment["default"].range(_lodash["default"].head(_holyWeek), _lodash["default"].last(_holyWeek));

  if (holyWeekRange.contains(date)) {
    date = divineMercySunday(y).add(1, 'days');
  } // If it occurs during the Octave of Easter, it is transferred to the
  // Monday of the Second Week of Easter.


  var octave = octaveOfEaster(y);

  var octaveRange = _moment["default"].range(_lodash["default"].head(octave), _lodash["default"].last(octave));

  if (octaveRange.contains(date)) {
    date = divineMercySunday(y).add(1, 'days');
  }

  return date;
}; // The Nativity of St John the Baptist on June 24 comes three months after
// the celebration on March 25 of the Annunciation, when the Archangel Gabriel
// told Our Lady that her cousin Elizabeth was in her sixth month of pregnancy,
// and six months before the Christmas celebration of the birth of Jesus.
// The purpose of these festivals is not to celebrate the exact dates of these
// events, but simply to commemorate them in an interlinking way.
// The Nativity of St. John the Baptist anticipates the feast of Christmas.
// y: year


exports.annunciation = annunciation;

var birthOfJohnTheBaptist = function birthOfJohnTheBaptist(y) {
  return _moment["default"].utc({
    year: y,
    month: 5,
    day: 24
  });
}; // The Feast of Saints Peter and Paul or Solemnity of Saints Peter and Paul is a
// liturgical feast in honour of the martyrdom in Rome of the apostles Saint Peter
// and Saint Paul, which is observed on 29 June. The celebration is of ancient origin,
// the date selected being the anniversary either of their death or of the translation
// of their relics.
// y: year


exports.birthOfJohnTheBaptist = birthOfJohnTheBaptist;

var peterAndPaulApostles = function peterAndPaulApostles(y) {
  return _moment["default"].utc({
    year: y,
    month: 5,
    day: 29
  });
}; // The Latin Catholic Feast of the Assumption is celebrated on August 15
// was the bodily taking up of the Virgin Mary into Heaven at the end
// of her earthly life.
// y: year


exports.peterAndPaulApostles = peterAndPaulApostles;

var assumption = function assumption(y) {
  return _moment["default"].utc({
    year: y,
    month: 7,
    day: 15
  });
}; // All Saints' Day is a solemnity celebrated on 1 November by the Roman
// Catholic Church of Latin rite in honour of all the saints, known
// and unknown.
// y: year


exports.assumption = assumption;

var allSaints = function allSaints(y) {
  return _moment["default"].utc({
    year: y,
    month: 10,
    day: 1
  });
}; // The Catholic Church celebrates the Feast of the Immaculate Conception on December 8
// The Immaculate Conception, according to the teaching of the Catholic Church, was the
// conception of the Blessed Virgin Mary in the womb of her mother, Saint Anne, free from
// original sin by virtue of the foreseen merits of her son Jesus Christ. The Catholic
// Church teaches that Mary was conceived by normal biological means, but God acted upon
// her soul (keeping her "immaculate") at the time of her conception.
// y: year


exports.allSaints = allSaints;

var immaculateConception = function immaculateConception(y) {
  var _date = _moment["default"].utc({
    year: y,
    month: 11,
    day: 8
  }); // Check to see if this solemnity falls on a Sunday of Advent
  // If it occurs on a Sunday of Advent is transferred to the
  // following Monday.


  if (_lodash["default"].eq(_date.day(), 0)) {
    _lodash["default"].each(sundaysOfAdvent(y), function (s) {
      if (_date.isSame(s)) {
        _date = s.add(1, 'days');
      }
    });
  }

  return _date;
}; // In 1999, an Indult for the Transfer of the Solemnity of the Ascension was issued by the
// United States Conference of Catholic Bishops allowing each ecclesiastical province to
// determine if the Ascension should be celebrated on its proper Thursday (39 days after
// Easter) or on the Seventh Sunday of Easter (42 days after Easter). The following
// provinces of the United States have retained the celebration of Ascension on its proper
// Thursday. All other provinces of the United States have transferred the celebration of
// the Ascension to the Seventh Sunday of Easter.
// y: Takes the year (integer)
// ascensionOn7thSundayOfEaster: Optional boolean to set Ascension to the 7th Sunday of Easter when true


exports.immaculateConception = immaculateConception;

var ascension = function ascension(y, ascensionOn7thSundayOfEaster) {
  // If specified, move Ascension to Sunday
  if (!_lodash["default"].isUndefined(ascensionOn7thSundayOfEaster) && ascensionOn7thSundayOfEaster) {
    return easter(y).add(42, 'days');
  } // else by default, Ascension on Thursday
  else {
      return easter(y).add(39, 'days');
    }
}; // The Solemnity of Trinity Sunday occurs 56 days after Easter.
// y: Takes the year (integer)


exports.ascension = ascension;

var trinitySunday = function trinitySunday(y) {
  return easter(y).add(56, 'days');
}; // The Solemnity of Corpus Christi occurs 60 days after Easter, if it is celebrated on Thursday
// of the Seventh Week of Easter. In those places where Corpus Christi is not a holiday, it is
// transferred to the following Sunday (63 days after Easter)
// If second argument is true, move Corpus Christi to Thursday
// By default it will be on Sunday
// y: year
// corpusChristiOnThursday: Optional boolean to set Corpus Christi to Thursday when true (defaults to false)


exports.trinitySunday = trinitySunday;

var corpusChristi = function corpusChristi(y) {
  var corpusChristiOnThursday = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  // If specified, move Corpus Christi to Thursday
  if (!_lodash["default"].isUndefined(corpusChristiOnThursday) && corpusChristiOnThursday) {
    return easter(y).add(60, 'days');
  } // By default Corpus Christi on Sunday
  else {
      return easter(y).add(63, 'days');
    }
}; // The Solemnity of the Sacred Heart of Jesus occurs 68 days after Easter.
// y: year


exports.corpusChristi = corpusChristi;

var sacredHeartOfJesus = function sacredHeartOfJesus(y) {
  return easter(y).add(68, 'days');
}; // Immaculate Heart of Mary occurs 69 days after
// Easter and is a Memorial. This was formerly an Optional Memorial.
// y: year


exports.sacredHeartOfJesus = sacredHeartOfJesus;

var immaculateHeartOfMary = function immaculateHeartOfMary(y) {
  return easter(y).add(69, 'days');
}; // Feast of the Holy Family
// If Christmas falls on a Sunday, then Holy Family is celebrated on Dec. 30.
// Otherwise, Holy Family is the Sunday after Christmas.
// y: year


exports.immaculateHeartOfMary = immaculateHeartOfMary;

var holyFamily = function holyFamily(y) {
  var _christmas = christmas(y); // If Christmas is on Sunday, then Holy Family is on the 30th Dec


  if (_lodash["default"].eq(_christmas.day(), 0)) {
    return _moment["default"].utc({
      year: y,
      month: 11,
      day: 30
    });
  } // Holy Family is 1 week after Christmas when Christmas is on a Feria
  else {
      return _christmas.add(1, 'weeks').startOf('week');
    }
}; // y: year


exports.holyFamily = holyFamily;

var transfiguration = function transfiguration(y) {
  return _moment["default"].utc({
    year: y,
    month: 7,
    day: 6
  });
}; // https://en.wikipedia.org/wiki/Feast_of_the_Cross#History
// y: year


exports.transfiguration = transfiguration;

var theExaltationOfTheHolyCross = function theExaltationOfTheHolyCross(y) {
  return _moment["default"].utc({
    year: y,
    month: 8,
    day: 14
  });
};

exports.theExaltationOfTheHolyCross = theExaltationOfTheHolyCross;
},{"lodash":1,"moment":4,"moment-recur":3}],66:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.laterOrdinaryTime = exports.eastertide = exports.easterOctave = exports.easterTriduum = exports.lent = exports.earlyOrdinaryTime = exports.christmastide = exports.advent = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _lodash = _interopRequireDefault(require("lodash"));

var Dates = _interopRequireWildcard(require("./Dates"));

var Utils = _interopRequireWildcard(require("./Utils"));

var _constants = require("../constants");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

//================================================================================================
// METHODS TO GENERATE THE SEASONS
// PRIVATE: Not exposed via module exports
//================================================================================================
// dates: array of moment object dates
var _metadata = function _metadata(dates) {
  return _lodash["default"].map(dates, function (date) {
    date.source = 'l';
    date.data.calendar = {
      weeks: date.moment.weeksInYear(),
      week: date.moment.week(),
      day: date.moment.dayOfYear()
    };
    return date;
  });
}; // y: The year (integer)
// epiphanyOnJan6: true|false [If true, Epiphany will be fixed to Jan 6] (defaults to false)


var _epiphany = function _epiphany(y) {
  var epiphanyOnJan6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var before = Dates.daysBeforeEpiphany(y, epiphanyOnJan6);
  var after = Dates.daysAfterEpiphany(y, epiphanyOnJan6);
  var days = [];

  _lodash["default"].each(before, function (day) {
    days.push({
      moment: day,
      type: _constants.Types.FERIA,
      name: Utils.localize({
        key: 'epiphany.before',
        day: day.format('dddd')
      }),
      data: {
        season: {
          key: _constants.LiturgicalSeasons.CHRISTMASTIDE,
          value: Utils.localize({
            key: 'christmastide.season'
          })
        },
        meta: {
          liturgicalColor: '',
          titles: []
        }
      }
    });
  });

  _lodash["default"].each(after, function (day) {
    days.push({
      moment: day,
      type: _constants.Types.FERIA,
      name: Utils.localize({
        key: 'epiphany.after',
        day: day.format('dddd')
      }),
      data: {
        season: {
          key: _constants.LiturgicalSeasons.CHRISTMASTIDE,
          value: Utils.localize({
            key: 'christmastide.season'
          })
        },
        meta: {
          liturgicalColor: '',
          titles: []
        }
      }
    });
  });

  return days;
}; // y: The year (integer)


var _holyWeek = function _holyWeek(y) {
  var dates = Dates.holyWeek(y);
  var days = [];

  _lodash["default"].each(dates, function (date, i) {
    days.push({
      moment: date,
      type: _constants.Types.HOLY_WEEK,
      name: Utils.localize({
        key: 'holyWeek.feria',
        day: date.format('dddd')
      }),
      data: {
        season: {
          key: _constants.LiturgicalSeasons.HOLY_WEEK,
          value: Utils.localize({
            key: 'holyWeek.season'
          })
        },
        meta: {
          liturgicalColor: _constants.LiturgicalColors.PURPLE,
          titles: []
        }
      }
    });
  });

  return days;
}; //================================================================================================
// y: The year (integer)


var advent = function advent(y) {
  var days = [];

  _lodash["default"].each(Dates.daysOfAdvent(y), function (value, i) {
    days.push({
      moment: value,
      type: Utils.getTypeByDayOfWeek(value.day()),
      name: Utils.localize({
        key: _lodash["default"].eq(value.day(), 0) ? 'advent.sunday' : 'advent.feria',
        day: value.format('dddd'),
        week: Math.floor(i / 7) + 1
      }),
      data: {
        season: {
          key: _constants.LiturgicalSeasons.ADVENT,
          value: Utils.localize({
            key: 'advent.season'
          })
        },
        meta: {
          // The proper color of the Third Sunday of Advent is rose. Purple may also be used on these Sundays.
          liturgicalColor: _lodash["default"].eq(Math.floor(i / 7), 2) && _lodash["default"].eq(value.day(), 0) ? _constants.LiturgicalColors.ROSE : _constants.LiturgicalColors.PURPLE,
          titles: []
        }
      }
    });
  }); // Sort dates according to moment


  days = _lodash["default"].sortBy(days, function (item) {
    return item.moment.valueOf();
  }); //=====================================================================
  // PSALTER WEEKS & LITURGICAL COLORS - ADVENT
  //---------------------------------------------------------------------
  // The First Sunday of Advent always begins Week 1 of the Psalter,
  // regardless of which week was previously observed (because the First
  // Sunday of Advent is the first day of the liturgical year, the 4-Week
  // cycle of the Psalter is “reset” to Week 1 on it).
  // For example, as it works out on the liturgical calendar, the last
  // week of Ordinary Time (i.e., the Solemnity of Christ the King, which
  // is the last Sunday of Ordinary Time, and the following Monday through
  // Saturday afternoon) uses Week 2 of the Psalter. Nevertheless, when
  // the First Sunday of Advent arrives, one does not start using Week 3,
  // but rather Week 1 of the Psalter.
  //
  // The proper color of the Advent is purple.
  //=====================================================================
  // Initialize the psalter week counter

  var psalterWeek = 0;

  _lodash["default"].map(days, function (v, k) {
    v.key = _lodash["default"].camelCase(v.name);
    v.data.meta = v.data.meta || {};

    if (_lodash["default"].eq(k % 7, 0)) {
      psalterWeek++;

      if (_lodash["default"].gt(psalterWeek, 4)) {
        psalterWeek = 1;
      }
    } // Psalter week


    v.data.meta.psalterWeek = {
      key: psalterWeek,
      value: _constants.PsalterWeeks[psalterWeek]
    }; // Set default season color if there is no color already set

    v.data.meta.liturgicalColor = v.data.meta.liturgicalColor || _constants.LiturgicalColors.PURPLE;
    return v;
  });

  return _metadata(days);
}; // y: Takes the year (integer)
// christmastideEnds: t|o|e [The mode to calculate the end of Christmastide]
// epiphanyOnJan6: true|false [If true, Epiphany will be fixed to Jan 6] (defaults to false)
// christmastideIncludesTheSeasonOfEpiphany: true|false [If false, excludes the season of epiphany from being included in the season of Christmas]


exports.advent = advent;

var christmastide = function christmastide(y, christmastideEnds) {
  var epiphanyOnJan6 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var christmastideIncludesTheSeasonOfEpiphany = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var days = Dates.christmastide(y, christmastideEnds, epiphanyOnJan6);
  var octave = Dates.octaveOfChristmas(y);

  var epiphany = _epiphany(y + 1, epiphanyOnJan6);

  var d = [];
  var count = 0;

  _lodash["default"].each(days, function (day) {
    var dayOfWeek = day.day();

    if (_lodash["default"].eq(dayOfWeek, 0)) {
      count++;
    }

    d.push({
      moment: day,
      type: Utils.getTypeByDayOfWeek(dayOfWeek),
      name: Utils.localize({
        key: _lodash["default"].eq(dayOfWeek, 0) ? 'christmastide.sunday' : 'christmastide.day',
        day: day.format('dddd'),
        count: count
      }),
      data: {
        season: {
          key: _constants.LiturgicalSeasons.CHRISTMASTIDE,
          value: Utils.localize({
            key: 'christmastide.season'
          })
        }
      }
    });
  });

  var o = [];

  _lodash["default"].each(octave, function (day, idx) {
    o.push({
      moment: day,
      type: Utils.getTypeByDayOfWeek(day.day()),
      name: Utils.localize({
        key: 'christmastide.octave',
        count: idx + 1
      }),
      data: {
        season: {
          key: _constants.LiturgicalSeasons.CHRISTMASTIDE,
          value: Utils.localize({
            key: 'christmastide.season'
          })
        }
      }
    });
  }); //==============================================================================
  // Override in order: solemnities, feasts, epiphany and octave of christmas
  // to days of christmas
  //==============================================================================
  // only merge the season of epiphany if the flag is true


  if (christmastideIncludesTheSeasonOfEpiphany === true) {
    d = _lodash["default"].uniqBy(_lodash["default"].union(epiphany, o, d), function (item) {
      return item.moment.valueOf();
    });
  } else {
    d = _lodash["default"].uniqBy(_lodash["default"].union(o, d), function (item) {
      return item.moment.valueOf();
    });
  } // Sort dates according to moment


  d = _lodash["default"].sortBy(d, function (item) {
    return item.moment.valueOf();
  }); //=====================================================================
  // PSALTER WEEKS & LITURGICAL COLORS - CHRISTMAS SEASON
  //---------------------------------------------------------------------
  // If Christmas is on a feria (Monday - Saturday), then the first
  // week of Christmastide will follow the Psalter week of the 4th week
  // of Advent (which is always Psalter Week 4)
  // If Christmas is on a Sunday, the Psalter week will be Week 1
  //
  // The proper color of Christmas is white
  //=====================================================================

  var psalterWeek = 4;

  if (_lodash["default"].eq(_lodash["default"].head(days).day(), 0)) {
    psalterWeek = 0;
  }

  _lodash["default"].map(d, function (v) {
    v.key = _lodash["default"].camelCase(v.name);
    v.data.meta = v.data.meta || {
      titles: []
    };

    if (_lodash["default"].eq(v.moment.day() % 7, 0)) {
      psalterWeek++;

      if (_lodash["default"].gt(psalterWeek, 4)) {
        psalterWeek = 1;
      }
    }

    v.data.meta.psalterWeek = {
      key: psalterWeek,
      value: _constants.PsalterWeeks[psalterWeek]
    }; // Set default season color if there is no color already set

    v.data.meta.liturgicalColor = v.data.meta.liturgicalColor || _constants.LiturgicalColors.WHITE;
    return v;
  });

  return _metadata(d);
}; // y: Takes the year (integer)
// christmastideEnds: t|o|e [The mode to calculate the end of Christmastide]
// epiphanyOnJan6: true|false [If true, Epiphany will be fixed to Jan 6] (defaults to false)


exports.christmastide = christmastide;

var earlyOrdinaryTime = function earlyOrdinaryTime(y, christmastideEnds) {
  var epiphanyOnJan6 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var days = [];

  _lodash["default"].each(Dates.daysOfEarlyOrdinaryTime(y, christmastideEnds, epiphanyOnJan6), function (value, i) {
    days.push({
      moment: value,
      type: _lodash["default"].eq(value.day(), 0) ? _constants.Types.SUNDAY : _constants.Types.FERIA,
      name: Utils.localize({
        key: _lodash["default"].eq(value.day(), 0) ? 'ordinaryTime.sunday' : 'ordinaryTime.feria',
        day: value.format('dddd'),
        week: _lodash["default"].eq(value.day(), 0) ? Math.floor(i / 7) + 2 : Math.floor(i / 7) + 1
      }),
      data: {
        season: {
          key: _constants.LiturgicalSeasons.EARLY_ORDINARY_TIME,
          value: Utils.localize({
            key: 'ordinaryTime.season'
          })
        }
      }
    });
  }); // Sort dates according to moment


  days = _lodash["default"].sortBy(days, function (v) {
    return v.moment.valueOf();
  }); //=====================================================================
  // PSALTER WEEKS & LITURGICAL COLORS - EARLY ORDINARY TIME
  //---------------------------------------------------------------------
  // The first week of Ordinary Time begins with the Monday following
  // the Feast of the Baptism of the Lord (which is the last Sunday of
  // the Christmas Season). Consequently, one starts using Week-1 of the
  // Psalter for that week. The Sunday that follows the first week of
  // Ordinary Time is the Second Sunday of Ordinary Time, so, technically
  // speaking, there is no Sunday that is called the First Sunday of
  // Ordinary Time. This makes sense if you consider the fact that
  // Ordinary Time begins on a Monday, and by the time Sunday rolls
  // around the first week of Ordinary Time has already been completed.
  // In light of all this, although the Feast of the Baptism of the Lord
  // is the last Sunday of the Christmas Season, simply for the purposes
  // of counting Sundays it is counted as the first Sunday of Ordinary Time.
  //
  // The proper color of ordinary time is green
  //=====================================================================

  var psalterWeek = 1;

  _lodash["default"].map(days, function (v) {
    v.key = _lodash["default"].camelCase(v.name);
    v.data.meta = v.data.meta || {
      titles: []
    };

    if (_lodash["default"].eq(v.moment.day() % 7, 0)) {
      psalterWeek++;

      if (_lodash["default"].gt(psalterWeek, 4)) {
        psalterWeek = 1;
      }
    }

    v.data.meta.psalterWeek = {
      key: psalterWeek,
      value: _constants.PsalterWeeks[psalterWeek]
    }; // Set default season color if there is no color alreayd set

    v.data.meta.liturgicalColor = v.data.meta.liturgicalColor || _constants.LiturgicalColors.GREEN;
    return v;
  });

  return _metadata(days);
}; // y: year


exports.earlyOrdinaryTime = earlyOrdinaryTime;

var laterOrdinaryTime = function laterOrdinaryTime(y) {
  // Keep track of the first week in later ordinary time
  // for later use
  var firstWeekOfLaterOrdinaryTime = 0;
  var days = [];

  _lodash["default"].each(Dates.daysOfLaterOrdinaryTime(y).reverse(), function (value, i) {
    // Calculate the week of ordinary time
    // from the last sunday of the year (34th)
    var week = 34 - Math.floor(i / 7);
    firstWeekOfLaterOrdinaryTime = week;
    days.push({
      moment: value,
      type: _lodash["default"].eq(value.day(), 0) ? _constants.Types.SUNDAY : _constants.Types.FERIA,
      name: Utils.localize({
        key: _lodash["default"].eq(value.day(), 0) ? 'ordinaryTime.sunday' : 'ordinaryTime.feria',
        day: value.format('dddd'),
        week: week
      }),
      data: {
        season: {
          key: _constants.LiturgicalSeasons.LATER_ORDINARY_TIME,
          value: Utils.localize({
            key: 'ordinaryTime.season'
          })
        }
      }
    });
  }); // Sort dates according to moment


  days = _lodash["default"].sortBy(days, function (v) {
    return v.moment.valueOf();
  }); //=====================================================================
  // PSALTER WEEKS & LITURGICAL- LATER ORDINARY TIME
  //---------------------------------------------------------------------
  // The second phase of Ordinary Time begins on the Monday that immediately
  // follows Pentecost Sunday (i.e., the last Sunday of the Season of Easter).
  // Note that, because the date of Easter changes from year to year, the
  // specific range of dates for the two phases in Ordinary Time likewise
  // change from year to year. In any event, the Monday of Ordinary Time
  // which immediately follows Pentecost Sunday does not “reset” to Week
  // 1 of the Psalter. Rather, it will simply be the week of the Psalter
  // corresponding to the Sunday to which the Monday belongs.
  //
  // The proper color of Ordinary Time is green.
  //=====================================================================

  var psalterWeek = firstWeekOfLaterOrdinaryTime % 4;

  if (_lodash["default"].eq(psalterWeek, 0)) {
    psalterWeek = 4;
  }

  _lodash["default"].map(days, function (v) {
    v.key = _lodash["default"].camelCase(v.name);
    v.data.meta = v.data.meta || {
      titles: []
    };

    if (_lodash["default"].eq(v.moment.day() % 7, 0)) {
      psalterWeek++;

      if (_lodash["default"].gt(psalterWeek, 4)) {
        psalterWeek = 1;
      }
    }

    v.data.meta.psalterWeek = {
      key: psalterWeek,
      value: _constants.PsalterWeeks[psalterWeek]
    }; // Set default season color if there is no color already set

    if (_lodash["default"].isUndefined(v.data.meta.liturgicalColor)) {
      v.data.meta.liturgicalColor = _constants.LiturgicalColors.GREEN;
    }

    return v;
  });

  return _metadata(days);
}; // y: Takes the year (integer)


exports.laterOrdinaryTime = laterOrdinaryTime;

var lent = function lent(y) {
  var daysOfLent = Dates.daysOfLent(y);
  var sundaysOfLent = Dates.sundaysOfLent(y);
  var days = [];
  var sundays = [];

  _lodash["default"].each(daysOfLent, function (value, i) {
    days.push({
      moment: value,
      type: _constants.Types.FERIA,
      name: Utils.localize({
        key: _lodash["default"].gt(i, 0) && _lodash["default"].lt(i, 4) ? 'lent.day_after_ash_wed' : 'lent.feria',
        day: value.format('dddd'),
        week: Math.floor((i - 4) / 7) + 1
      }),
      data: {
        season: {
          key: _constants.LiturgicalSeasons.LENT,
          value: Utils.localize({
            key: 'lent.season'
          })
        }
      }
    });
  });

  _lodash["default"].each(sundaysOfLent, function (value, i) {
    sundays.push({
      moment: value,
      type: _constants.Types.SUNDAY,
      name: Utils.localize({
        key: 'lent.sunday',
        day: value.format('dddd'),
        week: i + 1
      }),
      data: {
        season: {
          key: _constants.LiturgicalSeasons.LENT,
          value: Utils.localize({
            key: 'lent.season'
          })
        },
        meta: {
          // The proper color of the the Fourth Sunday of Lent is rose. Purple may also be used on these Sundays.
          liturgicalColor: _lodash["default"].eq(i, 3) ? _constants.LiturgicalColors.ROSE : _constants.LiturgicalColors.PURPLE
        }
      }
    });
  });

  var holyWeek = _holyWeek(y); // Override in order: Solemnities, Holy Week and Sundays of Lent to days of Lent


  days = _lodash["default"].uniqBy(_lodash["default"].union(holyWeek, sundays, days), function (v) {
    return v.moment.valueOf();
  }); // Sort dates according to moment

  days = _lodash["default"].sortBy(days, function (v) {
    return v.moment.valueOf();
  }); //=====================================================================
  // PSALTER WEEKS & LITURGICAL COLORS - LENT & HOLY WEEK
  //---------------------------------------------------------------------
  // Lent begins on Ash Wednesday and therefore in the middle of a week
  // rather than on a Sunday. Regardless of which week of the Psalter is
  // being observed on the Sunday through Tuesday immediately preceding
  // Ash Wednesday, Ash Wednesday (and the Thursday through Saturday
  // afternoon following it) are designated as Week 4 of the Psalter.
  //
  // The proper color of the Lent is purple.
  //=====================================================================

  var psalterWeek = 4;

  _lodash["default"].map(days, function (v) {
    v.key = _lodash["default"].camelCase(v.name);
    v.data.meta = v.data.meta || {
      titles: []
    };

    if (_lodash["default"].eq(v.moment.day() % 7, 0)) {
      psalterWeek++;

      if (_lodash["default"].gt(psalterWeek, 4)) {
        psalterWeek = 1;
      }
    }

    v.data.meta.psalterWeek = {
      key: psalterWeek,
      value: _constants.PsalterWeeks[psalterWeek]
    }; // Set default season color if there is no color already set

    v.data.meta.liturgicalColor = v.data.meta.liturgicalColor || _constants.LiturgicalColors.PURPLE;
    return v;
  });

  days = _metadata(days); // _.each( days, function( v ) {
  //   console.log(
  //     v.moment.format('ddd, DD MMM YY'),
  //     '|', _.padRight( v.data.meta.liturgicalColor.key, 6 ),
  //     '|', _.padRight( v.data.season.value, 9 ),
  //     '|', _.padRight( v.data.meta.psalterWeek.value, 8 ),
  //     '|', _.padRight( v.type, 13 ),
  //     '|', _.padRight( v.data.calendar.week, 2 ),
  //     '|', _.padRight( v.data.calendar.day, 3 ),
  //     '|', v.name
  //   );
  // });

  return days;
}; // Takes the last 3 days of holy week which form the 3 days of Easter Triduum
// y: Takes the year (integer)


exports.lent = lent;

var easterTriduum = function easterTriduum(y) {
  return _lodash["default"].takeRight(_holyWeek(y), 3);
}; // Takes the days between Easter Sunday and Divine mercy sunday (inclusive) to form the easter octave
// y: Takes the year (integer)


exports.easterTriduum = easterTriduum;

var easterOctave = function easterOctave(y) {
  return _lodash["default"].take(eastertide(y), 8);
}; // y: Takes the year (integer)


exports.easterOctave = easterOctave;

var eastertide = function eastertide(y) {
  var d = Dates.daysOfEaster(y);
  var s = Dates.sundaysOfEaster(y);
  var days = [];

  _lodash["default"].each(d, function (value, i) {
    days.push({
      moment: value,
      type: _lodash["default"].gt(i, 0) && _lodash["default"].lt(i, 7) ? _constants.Types.SOLEMNITY : _constants.Types.FERIA,
      name: Utils.localize({
        key: _lodash["default"].gt(i, 0) && _lodash["default"].lt(i, 7) ? 'eastertide.octave' : 'eastertide.feria',
        day: value.format('dddd'),
        week: Math.floor(i / 7) + 1
      }),
      data: {
        prioritized: true,
        season: {
          key: _constants.LiturgicalSeasons.EASTER,
          value: Utils.localize({
            key: 'eastertide.season'
          })
        }
      }
    });
  });

  var sundays = [];

  _lodash["default"].each(s, function (value, i) {
    sundays.push({
      moment: value,
      type: _constants.Types.SUNDAY,
      name: Utils.localize({
        key: 'eastertide.sunday',
        day: value.format('dddd'),
        week: i + 1
      }),
      data: {
        season: {
          key: _constants.LiturgicalSeasons.EASTER,
          value: Utils.localize({
            key: 'eastertide.season'
          })
        }
      }
    });
  }); // Insert Solemnities and Sundays of Lent to days of Easter


  days = _lodash["default"].uniqBy(_lodash["default"].union(sundays, days), function (v) {
    return v.moment.valueOf();
  }); // Sort dates according to moment

  days = _lodash["default"].sortBy(days, function (v) {
    return v.moment.valueOf();
  }); //=====================================================================
  // PSALTER WEEKS & LITURGICAL COLOR - EASTER
  //---------------------------------------------------------------------
  // The first eight days of the Easter Season make up the octave of Easter
  // and are celebrated as Solemnities of the Lord.
  // During this time, Easter Octave readings are used in favour of the
  // standard psalter readings.
  // The psalter is resumed at week 2 on the Monday following Divine
  // Mercy Sunday
  //
  // The proper color of Easter is white
  //=====================================================================

  var psalterWeek = 2;

  _lodash["default"].map(days, function (v, k) {
    v.key = _lodash["default"].camelCase(v.name);
    v.data.meta = {
      titles: []
    };

    if (_lodash["default"].lt(k, 8)) {
      v.data.meta.psalterWeek = {
        key: 5,
        value: _constants.PsalterWeeks[5]
      };
    } else {
      if (_lodash["default"].eq(v.moment.day() % 7, 0)) {
        psalterWeek++;

        if (_lodash["default"].gt(psalterWeek, 4)) {
          psalterWeek = 1;
        }
      }

      v.data.meta.psalterWeek = {
        key: psalterWeek,
        value: _constants.PsalterWeeks[psalterWeek]
      };
    } // Set default season color if there is no color already set


    v.data.meta.liturgicalColor = v.data.meta.liturgicalColor || _constants.LiturgicalColors.WHITE;
    return v;
  });

  days = _metadata(days); // _.each( days, function( v ) {
  //   console.log(
  //     v.moment.format('ddd, DD MMM YY'),
  //     '|', _.padRight( v.data.meta.liturgicalColor.key, 6 ),
  //     '|', _.padRight( v.data.season.value, 9 ),
  //     '|', _.padRight( v.data.meta.psalterWeek.value, 8 ),
  //     '|', _.padRight( v.type, 13 ),
  //     '|', v.name
  //   );
  // });

  return days;
};

exports.eastertide = eastertide;
},{"../constants":61,"./Dates":65,"./Utils":67,"lodash":1,"moment":4}],67:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertMomentObjectToIsoDateString = exports.convertIsoDateStringToMomentObject = exports.getTypeByDayOfWeek = exports.localizeDates = exports.localize = exports.getLocale = exports.setLocale = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _moment = _interopRequireDefault(require("moment"));

var _constants = require("../constants");

var Locales = _interopRequireWildcard(require("../locales"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Mustache style templating is easier on the eyes
_lodash["default"].templateSettings.interpolate = /{{([\s\S]+?)}}/g; // Set locale
// Locale lookup for date name strings are based on Moment.
// romcal defines at least the default 'en' language as a fallback.
// If a region is specified in the locale ('xx-XX'), romcal will
// automatically manage a graceful fallback to its base language ('xx'), if it exists in 'src/locales'.
// We get then a cascade fallbacks: region ('xx-XX') -> base language ('xx') -> default 'en'
// For example: if a string is missing in 'fr-CA', it will try to pick it in 'fr', and then in 'en'.

var _fallbackLocaleKey = 'en';

var _combinedLocale;

var _locales;

var setLocale = function setLocale(key) {
  // When setLocale() is called, it redefines this vars to defaults
  _combinedLocale = undefined;
  _locales = [_lodash["default"].get(Locales, _fallbackLocaleKey)]; // Sanitize incoming key

  key = _lodash["default"].toLower(key); // make key it lowercase

  var keyValues = /^([a-z]+)-?([a-z]*)/.exec(key); // extract lang and region from string

  var lang = keyValues[1];

  var region = _lodash["default"].toUpper(keyValues[2]); // make region it uppercase


  var localeName = lang + (region ? '-' + region : ''); // Use kebab-case in localName to follow IETF Language Codes standards

  key = lang + (region ? region : ''); // Set the Moment locale (if unrecognized, will default to 'en')

  _moment["default"].locale(localeName); // Ensures that the first day is always a Sunday in romcal & Moment.js
  // - Monday is the first day of the week according to the international standard ISO 8601,
  //   but in the US, Canada, and Japan, it's counted as the second day of the week.
  // - In Christian calendars, Sunday is always the first day of the week.


  _moment["default"].updateLocale(localeName, {
    week: {
      dow: 0
    }
  }); // If a region is specified: append the base language as fallback.
  // Also check if the base language isn't already the default 'en',
  // and if this base language exists in 'src/locales'


  if (!!region && lang !== _fallbackLocaleKey && _lodash["default"].has(Locales, lang)) {
    // Retrieve the relevant base locale object
    // and set it as a fallback (before 'en')
    _locales.unshift(_lodash["default"].get(Locales, lang));
  } // Set the given locale into romcal.
  // Also check if it's not the same as the fallback 'en'
  // (to avoid its duplicate definition)
  // and if exists in 'src/locales'


  if (key !== _fallbackLocaleKey && _lodash["default"].has(Locales, key)) {
    // Retrieve the relevant locale object
    // and set it as the first & default locale
    _locales.unshift(_lodash["default"].get(Locales, key));
  }
}; // Nested property lookup logic


exports.setLocale = setLocale;

var _getDescendantProp = function _getDescendantProp(obj, desc) {
  var arr = desc.split('.');

  while (arr.length && (obj = obj[arr.shift()])) {
    ;
  }

  return obj;
}; // Get the current locale object.
// Return an object that combines the main locale with its fallback.
// And use cache in case this function is called multiple times
// without the locale being modified.


var getLocale = function getLocale() {
  if (_lodash["default"].isUndefined(_combinedLocale)) {
    _combinedLocale = _lodash["default"].mergeWith.apply(null, [{}].concat(_lodash["default"].reverse(_locales)));
  }

  return _combinedLocale;
}; // Using the set Moment locale, get the relevant localized
// text for standard dates. Also make numbers ordinal by
// leveraging Moment's ordinal number function.


exports.getLocale = getLocale;

var localize = function localize(options) {
  var localeDate = _moment["default"].localeData();

  var value = _getDescendantProp(getLocale(), options.key); // If defined, pluralize a value and add it to the given template


  if (!_lodash["default"].isUndefined(options.week)) {
    options.week = localeDate.ordinal(options.week);
  } // If defined, count the nth day of the given series


  if (!_lodash["default"].isUndefined(options.count)) {
    options.count = localeDate.ordinal(options.count);
  } // Run the template against the options provided


  return _lodash["default"].template(value)(options);
}; // Utility function that takes an array of national calendar dates
// and adds a localized name based on the key


exports.localize = localize;

var localizeDates = function localizeDates(dates) {
  var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'sanctoral';
  return _lodash["default"].map(dates, function (d) {
    if (!_lodash["default"].has(d, 'drop')) {
      d.name = localize({
        key: "".concat(source, ".").concat(d.key)
      });
    }

    return d;
  });
};

exports.localizeDates = localizeDates;

var getTypeByDayOfWeek = function getTypeByDayOfWeek(d) {
  return _lodash["default"].eq(d, 0) ? _constants.Types.SUNDAY : _constants.Types.FERIA;
};

exports.getTypeByDayOfWeek = getTypeByDayOfWeek;

var convertMomentObjectToIsoDateString = function convertMomentObjectToIsoDateString() {
  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  _lodash["default"].each(items, function (item, key) {
    // Loop through the date array
    if (_lodash["default"].has(item, 'moment')) {
      // check if it has a Moment property
      item.moment = item.moment.toISOString(); // and convert it to an ISO string
    } else {
      // this is a grouped result
      if (_lodash["default"].isArray(item)) {
        item = _lodash["default"].map(item, function (date) {
          if (_lodash["default"].has(date, 'moment')) {
            // check if it has a Moment property
            date.moment = date.moment.toISOString(); // and convert it to an ISO string
          }

          return date;
        });
      }
    }

    return item;
  });

  return items;
};

exports.convertMomentObjectToIsoDateString = convertMomentObjectToIsoDateString;

var convertIsoDateStringToMomentObject = function convertIsoDateStringToMomentObject() {
  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  _lodash["default"].each(items, function (item, key) {
    // Loop through the date array
    if (_lodash["default"].has(item, 'moment')) {
      // check if it has a Moment property
      item.moment = _moment["default"].utc(item.moment); // and convert it to a Moment object
    } else {
      // this is a grouped result
      if (_lodash["default"].isArray(item)) {
        item = _lodash["default"].map(item, function (date) {
          if (_lodash["default"].has(date, 'moment')) {
            // check if it has a Moment property
            date.moment = _moment["default"].utc(date.moment); // and convert it to a Moment object
          }

          return date;
        });
      }
    }

    return item;
  });

  return items;
};

exports.convertIsoDateStringToMomentObject = convertIsoDateStringToMomentObject;
},{"../constants":61,"../locales":72,"lodash":1,"moment":4}],68:[function(require,module,exports){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Utils = exports.Seasons = exports.Dates = exports.Celebrations = exports.Calendar = void 0;

var Calendar = _interopRequireWildcard(require("./Calendar"));

exports.Calendar = Calendar;

var Celebrations = _interopRequireWildcard(require("./Celebrations"));

exports.Celebrations = Celebrations;

var Dates = _interopRequireWildcard(require("./Dates"));

exports.Dates = Dates;

var Seasons = _interopRequireWildcard(require("./Seasons"));

exports.Seasons = Seasons;

var Utils = _interopRequireWildcard(require("./Utils"));

exports.Utils = Utils;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./Calendar":63,"./Celebrations":64,"./Dates":65,"./Seasons":66,"./Utils":67}],69:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _default = {
  "sanctoral": {
    "saintsJeanDeBrebeufAndIsaacJoguesPriestsAndCompanionsMartyrsSaintPaulOfTheCrossPriest": "Saints John de Brébeuf, Isaac Jogues, Priests, and Companions, Martyrs, Secondary Patrons of Canada"
  }
};
exports["default"] = _default;
},{}],70:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _default = {
  "advent": {
    "season": "Advent",
    "feria": "{{day}} of the {{week}} week of Advent",
    "sunday": "{{week}} Sunday of Advent"
  },
  "christmastide": {
    "season": "Christmas",
    "day": "{{day}} of Christmastide",
    "octave": "{{count}} day in the Octave of Christmas",
    "sunday": "{{count}} Sunday of Christmas"
  },
  "epiphany": {
    "season": "Epiphany",
    "before": "{{day}} before Epiphany",
    "after": "{{day}} after Epiphany"
  },
  "ordinaryTime": {
    "season": "Ordinary Time",
    "feria": "{{day}} of the {{week}} week of Ordinary Time",
    "sunday": "{{week}} Sunday of Ordinary Time"
  },
  "lent": {
    "season": "Lent",
    "feria": "{{day}} of the {{week}} week of Lent",
    "sunday": "{{week}} Sunday of Lent",
    "day_after_ash_wed": "{{day}} after Ash Wednesday"
  },
  "holyWeek": {
    "season": "Holy Week",
    "feria": "{{day}} of Holy Week"
  },
  "eastertide": {
    "season": "Eastertide",
    "feria": "{{day}} of the {{week}} week of Easter",
    "sunday": "{{week}} Sunday of Easter",
    "octave": "Easter {{day}}"
  },
  "celebrations": {
    "allSaints": "All Saints",
    "annunciation": "Annunciation",
    "ascension": "Ascension of the Lord",
    "ashWednesday": "Ash Wednesday",
    "assumption": "The Assumption of the Blessed Virgin Mary",
    "baptismOfTheLord": "Baptism of the Lord",
    "birthOfJohnTheBaptist": "Birth of John the Baptist",
    "christmas": "Christmas",
    "christTheKing": "Christ the King",
    "corpusChristi": "Corpus Christi",
    "divineMercySunday": "Divine Mercy Sunday",
    "easter": "Easter Sunday",
    "epiphany": "Epiphany",
    "goodFriday": "Good Friday",
    "holyFamily": "Holy Family",
    "holySaturday": "Holy Saturday/Easter Vigil",
    "holyThursday": "Holy Thursday",
    "immaculateConception": "Immaculate Conception",
    "immaculateHeartOfMary": "Immaculate Heart of Mary",
    "josephHusbandOfMary": "Joseph, Husband of Mary",
    "maryMotherOfGod": "Mary, Mother of God",
    "palmSunday": "Palm Sunday",
    "pentecostSunday": "Pentecost Sunday",
    "peterAndPaulApostles": "Saints Peter and Paul, Apostles",
    "presentationOfTheLord": "Presentation of the Lord",
    "sacredHeartOfJesus": "Sacred Heart of Jesus",
    "theExaltationOfTheHolyCross": "The Exaltation of the Holy Cross",
    "transfiguration": "Transfiguration",
    "trinitySunday": "Trinity Sunday"
  },
  "sanctoral": {
    "205BlessedMartyrsOfJapan": "205 Blessed Martyrs of Japan",
    "allSaintsOfIreland": "All Saints of Ireland",
    "allSaintsOfWales": "All Saints of Wales",
    "allSouls": "All Souls",
    "birthOfTheBlessedVirginMary": "Birth of the Blessed Virgin Mary",
    "blessedAlbertinaBerkenbrockVirginAndMartyr": "Blessed Albertina Berkenbrock, Virgin and Martyr",
    "blessedAloysiusStepinacBishopAndMartyr": "Blessed Aloysius Stepinac, Bishop and Martyr",
    "blessedAndreGrassetPriestAndMartyr": "Blessed Andre Grasset, Priest and Martyr",
    "blessedAnielaSalawaVirgin": "Blessed Aniela Salawa, Virgin",
    "blessedAntoniNowowiejskiBishopAndCompanionsMartyrs": "Blessed Antoni Nowowiejski, Bishop and Companions, Martyrs",
    "blessedAugustinKazoticBishopAndMartyr": "Blessed Augustin Kazotic, Bishop and Martyr",
    "blessedBartholomewOfTheMartyrsBishop": "Blessed Bartholomew of The Martyrs, Bishop",
    "blessedBartolomeLaurelReligiousAndMartyr": "Blessed Bartolome Laurel, Religious and Martyr",
    "blessedBogumilBishop": "Blessed Bogumil, Bishop",
    "blessedBoleslawaMariaLamentVirginAndSaintAngelaMericiVirgin": "Blessed Boleslawa Maria Lament, Virgin/Saint Angela Merici, Virgin",
    "blessedBronislawaVirgin": "Blessed Bronislawa, Virgin",
    "blessedBronislawMarkiewiczPriest": "Blessed Bronislaw Markiewicz, Priest",
    "blessedCarlosManuelRodriguez": "Blessed Carlos Manuel Rodriguez",
    "blessedCatherineOfSaintAugustineVirgin": "Blessed Catherine of Saint Augustine, Virgin",
    "blessedCeferinoNamuncura": "Blessed Ceferino Namuncura",
    "blessedCeslausAndSaintHyacinthPriests": "Blessed Ceslaus and Saint Hyacinth, Priests",
    "blessedCharlesSpinolaPriestAndMartyr": "Blessed Charles Spinola, Priest and Martyr",
    "blessedColumbaMarmionPriest": "Blessed Columba Marmion, Priest",
    "blessedCzeslawPriest": "Blessed Czeslaw, Priest",
    "blessedDinaBelangerVirgin": "Blessed Dina Belanger, Virgin",
    "blessedDominicOfTheMotherOfGodDominicBarberiPriest": "Blessed Dominic of The Mother of God (Dominic Barberi), Priest",
    "blessedEdmundBojanowski": "Blessed Edmund Bojanowski",
    "blessedEdmundIgnatiusRiceReligious": "Blessed Edmund Ignatius Rice, Religious",
    "blessedElisabethHesselbaldVirgin": "Blessed Elisabeth Hesselbald, Virgin",
    "blessedEmilieTavernierGamelinReligious": "Blessed Emilie Tavernier Gamelin, Religious",
    "blessedFredericJanssoonePriest": "Blessed Frederic Janssoone, Priest",
    "blessedGeorgeMatulewiczBishop": "Blessed George Matulewicz, Bishop",
    "blessedGisela": "Blessed Gisela",
    "blessedGoncaloDeAmarantePriest": "Blessed Goncalo de Amarante, Priest",
    "blessedGoncaloDeLagosPriest": "Blessed Goncalo de Lagos, Priest",
    "blessedGraziaOfCattaro": "Blessed Grazia of Cattaro",
    "blessedHemmingBishop": "Blessed Hemming, Bishop",
    "blessedHenrySusoPriest": "Blessed Henry Suso, Priest",
    "blessedHonoratKozminskiPriest": "Blessed Honorat Kozminski, Priest",
    "blessedHroznataMartyr": "Blessed Hroznata, Martyr",
    "blessedInacioDeAzevedoPriestAndCompanionsMartyrs": "Blessed Inacio de Azevedo, Priest, and Companions, Martyrs",
    "blessedInnocentXiPope": "Blessed Innocent XI, Pope",
    "blessedIrishMartyrs": "Blessed Irish Martyrs",
    "blessedIstvanSandorMartyr": "Blessed István Sándor, Martyr",
    "blessedIvanMerz": "Blessed Ivan Merz",
    "blessedJacintaAndFranciscoMarto": "Blessed Jacinta and Francisco Marto",
    "blessedJakubStrzemieBishop": "Blessed Jakub Strzemie, Bishop",
    "blessedJerzyMatulewiczBishop": "Blessed Jerzy Matulewicz, Bishop",
    "blessedJoanOfPortugalVirgin": "Blessed Joan of Portugal, Virgin",
    "blessedJohnBeyzymPriest": "Blessed John Beyzym, Priest",
    "blessedJohnHenryNewmanPriest": "Blessed John Henry Newman, Priest",
    "blessedJohnMartinMoyePriest": "Blessed John Martin Moye, Priest",
    "blessedJolantaReligious": "Blessed Jolanta, Religious",
    "blessedJosephVazPriest": "Blessed Joseph Vaz, Priest",
    "blessedJuniperoSerraPriest": "Blessed Junipero Serra, Priest",
    "blessedKarlOfAustria": "Blessed Karl of Austria",
    "blessedKarolinaKozkownaVirginAndMartyr": "Blessed Karolina Kozkowna, Virgin and Martyr",
    "blessedKuriakoseEliasChavaraPriest": "Blessed Kuriakose Elias Chavara, Priest",
    "blessedLauraVicunaVirgin": "Blessed Laura Vicuna, Virgin",
    "blessedLouisZephirinMoreauBishop": "Blessed Louis Zephirin Moreau, Bishop",
    "blessedMarcelinaDarowskaReligious": "Blessed Marcelina Darowska, Religious",
    "blessedMariaAdeodataPisaniVirgin": "Blessed Maria Adeodata Pisani, Virgin",
    "blessedMariaAssuntaPallottaVirgin": "Blessed Maria Assunta Pallotta, Virgin",
    "blessedMariaDoloresRodriguezSopenaVirgin": "Blessed Maria Dolores Rodriguez Sopena, Virgin",
    "blessedMariaStellaAndCompanionsVirginsAndMartyrs": "Blessed Maria Stella and Companions, Virgins and Martyrs",
    "blessedMariaTeresaLedochowskaVirgin": "Blessed Maria Teresa Ledochowska, Virgin",
    "blessedMariaTheresaChiramelVirgin": "Blessed Maria Theresa Chiramel, Virgin",
    "blessedMarieAnneBlondinVirgin": "Blessed Marie Anne Blondin, Virgin",
    "blessedMarieLeonieParadisVirgin": "Blessed Marie Leonie Paradis, Virgin",
    "blessedMarieRoseDurocherVirgin": "Blessed Marie Rose Durocher, Virgin",
    "blessedMaryAngelaTruszkowskaVirgin": "Blessed Mary Angela Truszkowska, Virgin",
    "blessedMaryOfJesusCrucifiedPetkovicVirgin": "Blessed Mary of Jesus Crucified Petkovic, Virgin",
    "blessedMaryOfJesusTheGoodShepherdVirgin": "Blessed Mary of Jesus The Good Shepherd, Virgin",
    "blessedMauriceTornayPriestAndMartyr": "Blessed Maurice Tornay, Priest and Martyr",
    "blessedMichaelKozalBishopAndMartyr": "Blessed Michael Kozal, Bishop and Martyr",
    "blessedMiguelAgustinProPriestAndMartyr": "Blessed Miguel Agustin Pro, Priest and Martyr",
    "blessedNazariaIgnaciaMarchReligious": "Blessed Nazaria Ignacia March, Religious",
    "blessedNazjuFalzon": "Blessed Nazju Falzon",
    "blessedNicolasStenoBishop": "Blessed Nicolas Steno, Bishop",
    "blessedOdoricOfPordenonePriest": "Blessed Odoric of Pordenone, Priest",
    "blessedOleksiyZarytskyiPriestAndMartyr": "Blessed Oleksiy Zarytskyi, Priest and Martyr",
    "blessedOsannaOfCattaroVirgin": "Blessed Osanna of Cattaro, Virgin",
    "blessedPeterKibePriestAndCompanionsMartyrs": "Blessed Peter Kibe, Priest and Companions, Martyrs",
    "blessedPeterToRotMartyr": "Blessed Peter To Rot, Martyr",
    "blessedPiusIxPope": "Blessed Pius IX, Pope",
    "blessedRafalChylinskiPriest": "Blessed Rafal Chylinski, Priest",
    "blessedSalomeVirgin": "Blessed Salome, Virgin",
    "blessedSanchaAndMafaldaVirginsOrBlessedTheresaOfPOrtugalReligious": "Blessed Sancha and Mafalda, Virgins, Or Blessed Theresa of POrtugal, Religious",
    "blessedsAndreDeSoveralAndAmbrosioFranciscoFerroPriestsAndMartyrs": "Blesseds Andre de Soveral and Ambrosio Francisco Ferro, Priests and Martyrs",
    "blessedSaraSalkahaziVirginAndMartyr": "Blessed Sara Salkahazi, Virgin and Martyr",
    "blessedsCarlosSpinolaAndJeronimoDeAngelisPriestsAndMartyrs": "Blesseds Carlos Spinola and Jeronimo de Angelis, Priests and Martyrs",
    "blessedSebastianDeAparicioReligious": "Blessed Sebastian de Aparicio, Religious",
    "blessedsNykytaBudkaAndVasylVelychkowskyBishopsAndMartyrs": "Blesseds Nykyta Budka and Vasyl Velychkowsky, Bishops and Martyrs",
    "blessedsPedroZunigaAndLuisFloresPriestsAndMartyrs": "Blesseds Pedro Zuniga And Luis Flores, Priests and Martyrs",
    "blessedTheodoreRomzhaBishopAndMartyr": "Blessed Theodore Romzha, Bishop and Martyr",
    "blessedVilmosAporBishopAndMartyr": "Blessed Vilmos Apor, Bishop and Martyr",
    "blessedVincentKadlubekBishop": "Blessed Vincent Kadlubek, Bishop",
    "blessedVincentLewoniukAndCompanionsMartyrsOfPratulin": "Blessed Vincent Lewoniuk and Companions, Martyrs Of Pratulin",
    "blessedVladimirGhikaPriestAndMartyr": "Blessed Vladimir Ghika, Priest and Martyr",
    "blessedWladyslawBladzinskiPriestAndCompanionsMartyrs": "Blessed Wladyslaw Bladzinski, Priest and Companions, Martyrs",
    "blessedWladyslawOfGielniowPriest": "Blessed Wladyslaw Of Gielniow, Priest",
    "blessedZdenkaSchelingovaVirginAndMartyr": "Blessed Zdenka Schelingova, Virgin and Martyr",
    "chairOfSaintPeterApostle": "Chair of Saint Peter, Apostle",
    "conversionOfSaintPaulApostle": "Conversion of Saint Paul, Apostle",
    "dedicationOfAParticularChurch": "Dedication of a particular Church",
    "dedicationOfTheBasilicaOfSaintMaryMajor": "Dedication of the Basilica of Saint Mary Major",
    "dedicationOfTheBasilicasOfSaintsPeterAndPaulApostles": "Dedication of the basilicas of Saints Peter and Paul, Apostles",
    "dedicationOfTheLateranBasilica": "Dedication of the Lateran Basilica",
    "discoveryOfTheHiddenChristians": "Discovery of The Hidden Christians",
    "findingOfTheHolyCross": "Finding of The Holy Cross",
    "firstMartyrsOfTheChurchOfRome": "First Martyrs of the Church of Rome",
    "guardianAngelOfPortugal": "Guardian Angel of Portugal",
    "guardianAngels": "Guardian Angels",
    "holyInnocentsMartyrs": "Holy Innocents, Martyrs",
    "holyNameOfTheBlessedVirginMary": "Holy Name of the Blessed Virgin Mary",
    "hungarianSaintsAndBlesseds": "Hungarian Saints and Blesseds",
    "immaculateConceptionOfTheBlessedVirginMaryPrincipalPatronessOfThePhilippines": "Immaculate Conception of The Blessed Virgin Mary, Principal Patroness Of The Philippines",
    "maryMotherOfTheChurch": "Mary, Mother of The Church",
    "mostHolyNameOfJesusOrOurLadyOfBethlehem": "Most Holy Name of Jesus Or Our Lady of Bethlehem",
    "ourLadyHelpOfChristians": "Our Lady, Help of Christians",
    "ourLadyMediatrix": "Our Lady, Mediatrix",
    "ourLadyMediatrixOfAllGrace": "Our Lady, Mediatrix of All Grace",
    "ourLadyMotherOfChristianUnity": "Our Lady, Mother of Christian Unity",
    "ourLadyMotherOfDivineProvidencePatronessOfPuertoRico": "Our Lady, Mother of Divine Providence, Patroness of Puerto Rico",
    "ourLadyMotherOfMercy": "Our Lady, Mother of Mercy",
    "ourLadyOfAparecidaPatronessOfBrazil": "Our Lady of Aparecida (Nossa Senhora Aparecida), Patroness of Brazil",
    "ourLadyOfBistrica": "Our Lady of Bistrica",
    "ourLadyOfChina": "Our Lady of China",
    "ourLadyOfCzestochowa": "Our Lady of Czestochowa",
    "ourLadyOfFatima": "Our Lady of Fatima",
    "ourLadyOfGoodCounsel": "Our Lady of Good Counsel",
    "ourLadyOfGuadalupe": "Our Lady of Guadalupe",
    "ourLadyOfHungary": "Our Lady of Hungary",
    "ourLadyOfItati": "Our Lady of Itati",
    "ourLadyOfKnock": "Our Lady of Knock",
    "ourLadyOfLanka": "Our Lady of Lanka",
    "ourLadyOfLebanon": "Our Lady of Lebanon",
    "ourLadyOfLoreto": "Our Lady of Loreto",
    "ourLadyOfLourdes": "Our Lady of Lourdes",
    "ourLadyOfLujanPatronessOfArgentina": "Our Lady of Luján, Patroness of Argentina",
    "ourLadyOfMadhu": "Our Lady of Madhu",
    "ourLadyOfMercy": "Our Lady of Mercy",
    "ourLadyOfMountCarmel": "Our Lady of Mount Carmel",
    "ourLadyOfMountCarmelMotherAndQueenOfChile": "Our Lady of Mount Carmel, Mother and Queen of Chile",
    "ourLadyOfPeace": "Our Lady of Peace",
    "ourLadyOfPerpetualHelpOrBlessedLeonidFeodorovPriestAndMartyr": "Our Lady of Perpetual Help Or Blessed Leonid Feodorov, Priest and Martyr",
    "ourLadyOfSorrows": "Our Lady of Sorrows",
    "ourLadyOfTheGateOfDawn": "Our Lady of The Gate of Dawn",
    "ourLadyOfThePillar": "Our Lady of The Pillar",
    "ourLadyOfTheRosary": "Our Lady of the Rosary",
    "ourLadyOfTheValley": "Our Lady of The Valley",
    "ourLadyOfVladimir": "Our Lady of Vladimir",
    "ourLadyOfWalsingham": "Our Lady of Walsingham",
    "ourLadyQueenOfPeace": "Our Lady, Queen of Peace",
    "ourLadyQueenOfPoland": "Our Lady, Queen of Poland",
    "ourLordJesusChristTheEternalHighPriest": "Our Lord Jesus Christ, The Eternal High Priest",
    "ourLordOfMiracles": "Our Lord of Miracles",
    "popeSaintJohnPaulII": "Pope Saint John Paul II",
    "popeSaintJohnXXIII": "Pope Saint John XXIII",
    "presentationOfTheBlessedVirginMary": "Presentation of The Blessed Virgin Mary",
    "queenshipOfBlessedVirginMary": "Queenship of Blessed Virgin Mary",
    "saintAdalbertBishopAndMartyr": "Saint Wojciech (Adalbert of Prague), Bishop and Martyr",
    "saintAdalbertBishopAndMartyrSaintFidelisOfSigmaringenPriestAndMartyr": "Saint Wojciech (Adalbert of Prague), Bishop and Martyr/Saint Fidelis of Sigmaringen, Priest and Martyr",
    "saintAelredOfRievaulx": "Saint Aelred of Rievaulx",
    "saintAengusOengusBishopAndAbbot": "Saint Aengus (Oengus), Bishop and Abbot",
    "saintAgathaVirginAndMartyr": "Saint Agatha, Virgin and Martyr",
    "saintAgnesCaoGuiyingMartyr": "Saint Agnes Cao Guiying, Martyr",
    "saintAgnesOfBohemiaVirgin": "Saint Agnes of Bohemia, Virgin",
    "saintAgnesVirginAndMartyr": "Saint Agnes, Virgin and Martyr",
    "saintAidanBishop": "Saint Aidan, Bishop",
    "saintAidanBishopAndTheSaintsOfLindisfarne": "Saint Aidan, Bishop and The Saints of Lindisfarne",
    "saintAidanOfLindisfarneBishopAndMissionary": "Saint Aidan of Lindisfarne, Bishop and Missionary",
    "saintAilbeBishop": "Saint Ailbe, Bishop",
    "saintAlbanMartyr": "Saint Alban, Martyr",
    "saintAlbericCrescitelliPriestAndMartyr": "Saint Alberic Crescitelli, Priest and Martyr",
    "saintAlbertChmielowskiReligious": "Saint Albert Chmielowski, Religious",
    "saintAlbertoHurtadoPriest": "Saint Alberto Hurtado, Priest",
    "saintAlbertTheGreatBishopAndDoctor": "Saint Albert the Great, Bishop and Doctor",
    "saintAloysiusGonzagaReligious": "Saint Aloysius Gonzaga, Religious",
    "saintAlphonsaOfTheImmaculateConceptionVirgin": "Saint Alphonsa of The Immaculate Conception, Virgin",
    "saintAlphonsusMariaDeLiguoriBishopAndDoctorOfTheChurch": "Saint Alphonsus Maria de Liguori, Bishop and Doctor of the Church",
    "saintAmandMissionary": "Saint Amand, Missionary",
    "saintAmbroseBishopAndDoctor": "Saint Ambrose, Bishop and Doctor",
    "saintAndreBessetteReligious": "Saint Andre Bessette, Religious",
    "saintAndrewApostle": "Saint Andrew, Apostle",
    "saintAndrewBobolaPriestAndMartyr": "Saint Andrew Bobola, Priest and Martyr",
    "saintAndrewDungLacAndCompanionsMartyrs": "Saint Andrew Dung-Lac and Companions, Martyrs",
    "saintAndrewKimTaegonPriestAndPaulChongHasangAndCompanionsMartyrs": "Saint Andrew Kim Taegon, Priest, and Paul Chong Hasang and Companions, Martyrs",
    "saintAndrewTheApostle": "Saint Andrew the Apostle",
    "saintAndrewTheApostlePatronOfRussia": "Saint Andrew The Apostle, Patron of Russia",
    "saintAngelaMericiVirgin": "Saint Angela Merici, Virgin",
    "saintAnnePatronOfQuebecAndSaintJoachimParentsOfTheBlessedVirginMary": "Saint Anne, Patron of Quebec, and Saint Joachim, Parents of The Blessed Virgin Mary",
    "saintAnnoIiBishop": "Saint Anno II, Bishop",
    "saintAnselmOfCanterburyBishopAndDoctorOfTheChurch": "Saint Anselm of Canterbury, Bishop and Doctor of the Church",
    "saintAnthonyMaryClaretBishop": "Saint Anthony Mary Claret, Bishop",
    "saintAnthonyOfEgyptAbbot": "Saint Anthony of Egypt, Abbot",
    "saintAnthonyOfLisbonPriestAndDoctorOfTheChurch": "Saint Anthony of Lisbon, Priest and Doctor of The Church",
    "saintAnthonyOfPaduaPriestAndDoctor": "Saint Anthony of Padua, Priest and Doctor",
    "saintAnthonyOfSaintAnneGalvaoFreiGalvaoPriest": "Saint Anthony of Saint Anne Galvao (Frei Galvao), Priest",
    "saintAnthonyOfTheCavesMonk": "Saint Anthony of The Caves, Monk",
    "saintAnthonyZaccariaPriest": "Saint Anthony Zaccaria, Priest",
    "saintApollinaris": "Saint Apollinaris",
    "saintAsaphBishop": "Saint Asaph, Bishop",
    "saintAsicusBishop": "Saint Asicus, Bishop",
    "saintAthanasiusBishopAndDoctor": "Saint Athanasius, Bishop and Doctor",
    "saintAugustineOfCanterburyBishop": "Saint Augustine of Canterbury, Bishop",
    "saintAugustineOfHippoBishopAndDoctorOfTheChurch": "Saint Augustine of Hippo, Bishop and Doctor of the Church",
    "saintAugustineZhaoRongPriestAndCompanionsMartyrs": "Saint Augustine Zhao Rong, Priest and Companions, Martyrs",
    "saintAugustineZhaoRongPriestAndMartyr": "Saint Augustine Zhao Rong, Priest and Martyr",
    "saintBarbaraVirginAndMartyr": "Saint Barbara, Virgin and Martyr",
    "saintBarbaraVirginAndMartyrOrBlessedAdolphKolpingPriest": "Saint Barbara, Virgin and Martyr/Blessed Adolph Kolping, Priest",
    "saintBarnabasTheApostle": "Saint Barnabas the Apostle",
    "saintBartholomewTheApostle": "Saint Bartholomew the Apostle",
    "saintBeatriceOfSilvaVirgin": "Saint Beatrice of Silva, Virgin",
    "saintBedeTheVenerablePriestAndDoctor": "Saint Bede the Venerable, Priest and Doctor of the Church",
    "saintBedeTheVenerablePriestAndDoctorSaintGregoryViiPopeSaintMaryMagdaleneDePazziVirgin": "Saint Bede the Venerable, Priest and Doctor/Saint Gregory VII, Pope/Saint Mary Magdalene de Pazzi, Virgin",
    "saintBenedictOfNursiaAbbot": "Saint Benedict of Nursia, Abbot, Patron of Europe",
    "saintBennoOfMeissenBishop": "Saint Benno of Meissen, Bishop",
    "saintBernadetteSoubirousVirgin": "Saint Bernadette Soubirous, Virgin",
    "saintBernardineOfSienaPriest": "Saint Bernardine of Siena, Priest",
    "saintBernardOfClairvauxAbbotAndDoctorOfTheChurch": "Saint Bernard of Clairvaux, Abbot and Doctor of the Church",
    "saintBeunoAbbot": "Saint Beuno, Abbot",
    "saintBlaseBishopAndMartyrSaintAnsgarBishop": "Saint Blase, Bishop Martyr and Saint Ansgar, Bishop",
    "saintBonaventureBishopAndDoctor": "Saint Bonaventure, Bishop and Doctor",
    "saintBonifaceBishopAndMartyr": "Saint Boniface, Bishop and Martyr",
    "saintBrendanAbbot": "Saint Brendan, Abbot",
    "saintBridgetOfSwedenReligious": "Saint Bridget of Sweden, Religious, Patron of Europe",
    "saintBrigidVirgin": "Saint Brigid, Virgin",
    "saintBrotherMutienMarieReligious": "Saint Brother Mutien Marie, Religious",
    "saintBrunoBonifaceOfQuerfurtBishopAndMartyr": "Saint Bruno Boniface Of Querfurt, Bishop And Martyr",
    "saintBrunoPriest": "Saint Bruno, Priest",
    "saintCaesariusOfArlesBishop": "Saint Caesarius of Arles, Bishop",
    "saintCallistusIPopeAndMartyr": "Saint Callistus I, Pope and Martyr",
    "saintCamillusDeLellisPriest": "Saint Camillus de Lellis, Priest",
    "saintCamillusDeLellisPriestOrSaintHenryBishopAndMartyr": "Saint Camillus de Lellis, Priest or Saint Henry, Bishop and Martyr",
    "saintCaniceAbbot": "Saint Canice, Abbot",
    "saintCanuteMartyr": "Saint Canute, Martyr",
    "saintCarthageBishopMochuta": "Saint Carthage, Bishop (Mochuta)",
    "saintCasimir": "Saint Casimir",
    "saintCatherineOfAlexandriaVirginAndMartyr": "Saint Catherine of Alexandria, Virgin and Martyr",
    "saintCatherineOfSienaVirginAndDoctorOfTheChurch": "Saint Catherine of Siena, Virgin and Doctor of The Church, Patron of Europe",
    "saintCeallachCelsusBishop": "Saint Ceallach (Celsus), Bishop",
    "saintCeciliaVirginAndMartyr": "Saint Cecilia, Virgin and Martyr",
    "saintCharbelMakhloufPriestAndHermit": "Saint Charbel Makhlouf, Priest and Hermit",
    "saintCharlesBorromeoBishop": "Saint Charles Borromeo, Bishop",
    "saintChristopherMagallanesAndCompanionsMartyrs": "Saint Christopher Magallanes and Companions, Martyrs",
    "saintChristopherMartyr": "Saint Christopher, Martyr",
    "saintCiaranAbbot": "Saint Ciaran, Abbot",
    "saintClareVirgin": "Saint Clare, Virgin",
    "saintClementIPopeAndMartyrSaintColumbanReligious": "Saint Clement I, Pope and Martyr/Saint Columban, Religious",
    "saintClementMaryHofbauerPriest": "Saint Clement Mary Hofbauer, Priest",
    "saintClementOfOhridAndGorazdBishopsAndCompanions": "Saint Clement of Ohrid and Gorazd, Bishops and Companions",
    "saintClotilde": "Saint Clotilde",
    "saintColmanOfCloyneBishop": "Saint Colman of Cloyne, Bishop",
    "saintColmanOfDromoreBishop": "Saint Colman of Dromore, Bishop",
    "saintColmanOfKilmacduaghBishop": "Saint Colman of Kilmacduagh, Bishop",
    "saintColumba": "Saint Columba",
    "saintColumbaAbbotAndMissionary": "Saint Columba, Abbot and Missionary",
    "saintColumbanAbbotAndMissionary": "Saint Columban, Abbot and Missionary",
    "saintComgallAbbot": "Saint Comgall, Abbot",
    "saintConlethBishop": "Saint Conleth, Bishop",
    "saintConradOfParzhamReligious": "Saint Conrad of Parzham, Religious",
    "saintCorbinianBishop": "Saint Corbinian, Bishop",
    "saintCuthbertBishop": "Saint Cuthbert, Bishop",
    "saintCyrilOfAlexandriaBishopAndDoctor": "Saint Cyril of Alexandria, Bishop and Doctor",
    "saintCyrilOfJerusalemBishopAndDoctor": "Saint Cyril of Jerusalem, Bishop and Doctor",
    "saintDamasusIPope": "Saint Damasus I, Pope",
    "saintDamienDeVeusterPriest": "Saint Damien de Veuster, Priest",
    "saintDavidBishop": "Saint David, Bishop",
    "saintDavidLewisPriestAndMartyr": "Saint David Lewis, Priest and Martyr",
    "saintDavnetVirgin": "Saint Davnet, Virgin",
    "saintDeclanBishop": "Saint Declan, Bishop",
    "saintDeiniolBishop": "Saint Deiniol, Bishop",
    "saintDemetrius": "Saint Demetrius",
    "saintDenisAndCompanionsMartyrsSaintJohnLeonardiPriest": "Saint Denis and Companions Martyrs/Saint John Leonardi, Priest",
    "saintDenisAndCompanionsMartyrsSaintJohnLeonardiPriestBlessedJohnNewmanBishop": "Saint Denis and Companions, Martyrs/Saint John Leonardi, Priest/Blessed John Newman, Bishop",
    "saintDionysiusTheAreopagite": "Saint Dionysius The Areopagite",
    "saintDominicPriest": "Saint Dominic, Priest",
    "saintDominicPriest/SaintSixtusIiPopeAndCompanionsMartyrsSaintCajetanPriest": "Saint Dominic, Priest/Saint Sixtus II, Pope, and Companions, Martyrs/Saint Cajetan, Priest",
    "saintDubriciusBishop": "Saint Dubricius, Bishop",
    "saintEdmundCampionPriestAndMartyr": "Saint Edmund Campion, Priest and Martyr",
    "saintEdmundOfAbingdonBishopOrSaintMargaretOfScotland": "Saint Edmund of Abingdon, Bishop Or Saint Margaret of Scotland",
    "saintEdwardTheConfessor": "Saint Edward The Confessor",
    "saintElijahProphet": "Saint Elijah, prophet",
    "saintElizabethAnnSetonReligious": "Saint Elizabeth Ann Seton, Religious",
    "saintElizabethOfHungary": "Saint Elizabeth of Hungary",
    "saintElizabethOfHungarySaintHildaAbbessSaintHughOfLincolnBishop": "Saint Elizabeth of Hungary, Religious/Saint Hilda, Abbess/Saint Hugh of Lincoln, Bishop",
    "saintElizabethOfPortugal": "Saint Elizabeth of Portugal",
    "saintEmeric": "Saint Emeric",
    "saintEndaAbbot": "Saint Enda, Abbot",
    "saintEphraemDeaconDoctorOrSaintColumbaColumCilleAbbot": "Saint Ephraem, Deacon, Doctor or Saint Columba (Colum Cille), Abbot",
    "saintEphremDeaconAndDoctor": "Saint Ephrem, Deacon and Doctor",
    "saintEricIxMartyr": "Saint Eric IX, Martyr",
    "saintEtheldredaAudreyVirgin": "Saint Etheldreda (Audrey), Virgin",
    "saintEugeneDeMazenodBishop": "Saint Eugene de Mazenod, Bishop",
    "saintEugeneEoghanBishop": "Saint Eugene (Eoghan), Bishop",
    "saintEulaliaOfMeridaVirginAndMartyr": "Saint Eulalia of Merida, Virgin and Martyr",
    "saintEulogiusOfCordobaBishop": "Saint Eulogius of Cordoba, Bishop",
    "saintEusebiusOfVercelliBishopSaintPeterJulianEymardPriest": "Saint Eusebius of Vercelli, Bishop/Saint Peter Julian Eymard, Priest",
    "saintEysteinnBishop": "Saint Eysteinn, Bishop",
    "saintEzekielMorenoBishop": "Saint Ezekiel Moreno, Bishop",
    "saintEzequielMorenoBishop": "Saint Ezequiel Moreno, Bishop",
    "saintFachananOfKilfenoraBishop": "Saint Fachanan of Kilfenora, Bishop",
    "saintFachtnaBishop": "Saint Fachtna, Bishop",
    "saintFaustinaKowalskaVirginAndReligious": "Saint Faustina Kowalska, Virgin and Religious",
    "saintFelipeDeJesusPriestAndMartyr": "Saint Felipe de Jesus, Priest And Martyr",
    "saintFerdinand": "Saint Ferdinand",
    "saintFergalBishopAndMissionary": "Saint Fergal, Bishop and Missionary",
    "saintFiacreMonk": "Saint Fiacre, Monk",
    "saintFidelisOfSigmaringenPriestAndMartyr": "Saint Fidelis of Sigmaringen, Priest and Martyr",
    "saintFinbarrBishop": "Saint Finbarr, Bishop",
    "saintFinnianOfClonardBishop": "Saint Finnian of Clonard, Bishop",
    "saintFintan": "Saint Fintan",
    "saintFlannanBishop": "Saint Flannan, Bishop",
    "saintFlorianAndHisCompanionsMartyrs": "Saint Florian and his Companions, Martyrs",
    "saintFlorianMartyr": "Saint Florian, Martyr",
    "saintFrancesOfRomeReligious": "Saint Frances of Rome, Religious",
    "saintFrancesXavierCabriniVirgin": "Saint Frances Xavier Cabrini, Virgin",
    "saintFrancisBorgiaPriest": "Saint Francis Borgia, Priest",
    "saintFrancisDeSalesBishopAndDoctor": "Saint Francis de Sales, Bishop and Doctor",
    "saintFrancisDiazPriestAndCompanionsMartyrs": "Saint Francis Diaz, Priest and Companions, Martyrs",
    "saintFrancisFernandezDeCapillasPriestAndMartyr": "Saint Francis Fernandez de Capillas, Priest and Martyr",
    "saintFrancisOfAssisi": "Saint Francis of Assisi",
    "saintFrancisOfPaolaHermit": "Saint Francis of Paola, Hermit",
    "saintFrancisSolanusPriest": "Saint Francis Solanus, Priest",
    "saintFrancisXavierPriest": "Saint Francis Xavier, Priest",
    "saintFrancoisDeLavalBishop": "Saint Francois de Laval, Bishop",
    "saintFridolinOfSackingenMonk": "Saint Fridolin of Säckingen, Monk",
    "saintFructuosusSaintMartinOfDumeAndSaintGeraldBishops": "Saint Fructuosus, Saint Martin of Dume and Saint Gerald, Bishops",
    "saintFursaAbbotAndMissionary": "Saint Fursa, Abbot and Missionary",
    "saintGabrieltaurinDufresseBishopAndMartyr": "Saint Gabriel-Taurin Dufresse, Bishop and Martyr",
    "saintGallAbbotAndMissionary": "Saint Gall, Abbot & Missionary",
    "saintGenevieveVirgin": "Saint Genevieve, Virgin",
    "saintGeorgeMartyr": "Saint George, Martyr",
    "saintGeorgeMartyrSaintAdalbertBishopAndMartyr": "Saint George, Martyr/Saint Adalbert, Bishop and Martyr",
    "saintGeorgePrecaPriest": "Saint George Preca, Priest",
    "saintGerardBishop": "Saint Gerard, Bishop",
    "saintGermanusOfAuxerreBishop": "Saint Germanus of Auxerre, Bishop",
    "saintGertrudeOfNivellesAbbess": "Saint Gertrude of Nivelles, Abbess",
    "saintGertrudeOfNivellesVirgin": "Saint Gertrude of Nivelles, Virgin",
    "saintGertrudeTheGreatVirgin": "Saint Gertrude The Great, Virgin",
    "saintGobnaitVirgin": "Saint Gobnait, Virgin",
    "saintGonsaloGarciaMartyr": "Saint Gonsalo Garcia, Martyr",
    "saintGorazdAndCompanions": "Saint Gorazd and Companions",
    "saintGotthardBishop": "Saint Gotthard, Bishop",
    "saintGregoryTheGreatPopeAndDoctor": "Saint Gregory the Great, Pope and Doctor of the Church",
    "saintHectorValdivielsoSaezMartyr": "Saint Héctor Valdivielso Sáez, Martyr",
    "saintHedwigOfPoland": "Saint Hedwig of Poland",
    "saintHedwigOfSilesia": "Saint Hedwig of Silesia",
    "saintHedwigReligiousOrSaintMargaretMaryAlacoqueVirgin": "Saint Hedwig, Religious Or Saint Margaret Mary Alacoque, Virgin",
    "saintHedwigReligiousSaintMargaretMaryAlacoqueVirgin": "Saint Hedwig, Religious/Saint Margaret Mary Alacoque, Virgin",
    "saintHelena": "Saint Helena",
    "saintHemmaOfGurk": "Saint Hemma of Gurk",
    "saintHenryBishopAndMartyr": "Saint Henry, Bishop and Martyr",
    "saintHermannJosephPriest": "Saint Hermann Joseph, Priest",
    "saintHermenegildMartyr": "Saint Hermenegild, Martyr",
    "saintHilaryOfPoitiersBishopAndDoctor": "Saint Hilary of Poitiers, Bishop and Doctor",
    "saintHildegardOfBingenAbbessAndDoctor": "Saint Hildegard of Bingen, Abbess and Doctor",
    "saintHubertBishop": "Saint Hubert, Bishop",
    "saintHubertOfLiegeBishopOrSaintPirminAbbotAndBishop": "Saint Hubert of Liege, Bishop/Saint Pirmin, Abbot and Bishop",
    "saintHyacinthPriest": "Saint Hyacinth, Priest",
    "saintIgnatiusOfAntiochBishopAndMartyr": "Saint Ignatius of Antioch, Bishop and Martyr",
    "saintIgnatiusOfLoyolaPriest": "Saint Ignatius of Loyola, Priest",
    "saintIldephonsusOfToledoBishop": "Saint Ildephonsus of Toledo, Bishop",
    "saintIlltudAbbot": "Saint Illtud, Abbot",
    "saintIrenaeusBishopAndMartyr": "Saint Irenaeus, Bishop and Martyr",
    "saintIrene": "Saint Irene",
    "saintIsidoreOfSevilleBishopAndDoctorOfTheChurch": "Saint Isidore of Seville, Bishop and Doctor of the Church",
    "saintIsidoreTheFarmer": "Saint Isidore the Farmer",
    "saintItaVirgin": "Saint Ita, Virgin",
    "saintIvoPriest": "Saint Ivo, Priest",
    "saintJamesApostle": "Saint James, Apostle",
    "saintJamesApostlePatronOfSpain": "Saint James, Apostle, Patron of Spain",
    "saintJaneFrancesDeChantalReligious": "Saint Jane Frances de Chantal, Religious",
    "saintJanuariusBishopAndMartyr": "Saint Januarius, Bishop and Martyr",
    "saintJarlathBishop": "Saint Jarlath, Bishop",
    "saintJeanVianneyTheCureOfArsPriest": "Saint Jean Vianney (the Cure of Ars), Priest",
    "saintJeromeEmilianiSaintJosephineBakhitaVirgin": "Saint Jerome Emiliani and Saint Josephine Bakhita, Virgin",
    "saintJeromePriestAndDoctor": "Saint Jerome, Priest and Doctor",
    "saintJoachimHoMartyr": "Saint Joachim Ho, Martyr",
    "saintJoanOfArcVirginSecondaryPatronessOfFrance": "Saint Joan of Arc, Virgin, Secondary Patroness of France",
    "saintJoaquinaVedruna": "Saint Joaquina Vedruna",
    "saintJohnBaptistDeLaSallePriest": "Saint John Baptist de la Salle, Priest",
    "saintJohnBerchmansReligious": "Saint John Berchmans, Religious",
    "saintJohnBoscoPriest": "Saint John Bosco, Priest",
    "saintJohnCassianPriest": "Saint John Cassian, Priest",
    "saintJohnChrysostomBishopAndDoctor": "Saint John Chrysostom, Bishop and Doctor of the Church",
    "saintJohnDamascenePriestAndDoctor": "Saint John Damascene, Priest and Doctor",
    "saintJohnDamascenePriestAndDoctorOrSaintBarbaraVirginAndMartyr": "Saint John Damascene, Priest and Doctor, or Saint Barbara, Virgin and Martyr",
    "saintJohnDeBritoPriestAndMartyr": "Saint John de Brito, Priest and Martyr",
    "saintJohnEudesPriest": "Saint John Eudes, Priest",
    "saintJohnGabrielPerboyrePriestAndMartyr": "Saint John Gabriel Perboyre, Priest and Martyr",
    "saintJohnIPopeAndMartyr": "Saint John I, Pope and Martyr",
    "saintJohnJonesPriestAndMartyr": "Saint John Jones, Priest and Martyr",
    "saintJohnMaciasReligious": "Saint John Macias, Religious",
    "saintJohnNepomucenePriestAndMartyr": "Saint John Nepomucene, Priest and Martyr",
    "saintJohnNeumannBishop": "Saint John Neumann, Bishop",
    "saintJohnOfAvilaPriest": "Saint John of Avila, Priest",
    "saintJohnOfCapistranoPriest": "Saint John of Capistrano, Priest",
    "saintJohnOfDuklaPriest": "Saint John of Dukla, Priest",
    "saintJohnOfGodPriest": "Saint John of God, Priest",
    "saintJohnOfGodReligious": "Saint John of God, Religious",
    "saintJohnOfKantyPriest": "Saint John of Kenty, Priest",
    "saintJohnOfTheCrossDoctorOfTheChurch": "Saint John of The Cross, Doctor of The Church",
    "saintJohnOfTheCrossPriestAndDoctor": "Saint John of the Cross, Priest and Doctor",
    "saintJohnOfTrioraPriestAndMartyr": "Saint John of Triora, Priest and Martyr",
    "saintJohnOgilvie": "Saint John Ogilvie",
    "saintJohnRobertsPriestAndMartyr": "Saint John Roberts, Priest and Martyr",
    "saintJohnSarkanderPriestAndMartyrSaintZdzislawa": "Saint John Sarkander, Priest and Martyr/Saint Zdzislawa",
    "saintJohnTheApostleAndEvangelist": "Saint John the Apostle and Evangelist",
    "saintJosaphatBishopAndMartyr": "Saint Josaphat, Bishop and Martyr",
    "saintJoseDeAnchietaPriest": "Saint Jose de Anchieta, Priest",
    "saintJosefBilczewskiBishop": "Saint Josef Bilczewski, Bishop",
    "saintJoseMariaDeYermoPriest": "Saint Jose Maria de Yermo, Priest",
    "saintJosemariaEscrivaDeBalaguerPriest": "Saint Josemaria Escriva de Balaguer, Priest",
    "saintJosephSpouseOfTheBlessedVirginMaryPrincipalPatronOfCanada": "Saint Joseph, Spouse of The Blessed Virgin Mary, Principal Patron of Canada",
    "saintJosephTheWorker": "Saint Joseph the Worker",
    "saintJosephYuanPriestAndMartyr": "Saint Joseph Yuan, Priest and Martyr",
    "saintJosephZhangDapengMartyr": "Saint Joseph Zhang Dapeng, Martyr",
    "saintJozefBilczewskiBishop": "Saint Jozef Bilczewski, Bishop",
    "saintJozefSebastianPelczar": "Saint Jozef Sebastian Pelczar",
    "saintJuanDiego": "Saint Juan Diego",
    "saintJuanDiegoCuauhtlatoatzin": "Saint Juan Diego Cuauhtlatoatzin",
    "saintJulianaOfLiegeVirgin": "Saint Juliana of Liege, Virgin",
    "saintJulieBilliartVirgin": "Saint Julie Billiart, Virgin",
    "saintJustinMartyr": "Saint Justin Martyr",
    "saintKateriTekakwithaVirgin": "Saint Kateri Tekakwitha, Virgin",
    "saintKatharineDrexelVirgin": "Saint Katharine Drexel, Virgin",
    "saintKentigern": "Saint Kentigern",
    "saintKevinAbbot": "Saint Kevin, Abbot",
    "saintKieranBishop": "Saint Kieran, Bishop",
    "saintKilianBishopAndCompanionsMartyrs": "Saint Kilian, Bishop and Companions, Martyrs",
    "saintKillianBishopAndMartyr": "Saint Killian, Bishop and Martyr",
    "saintKingaVirgin": "Saint Kinga, Virgin",
    "saintLadislaus": "Saint Ladislaus",
    "saintLambertBishopAndMartyr": "Saint Lambert of Maastricht, Bishop and Martyr",
    "saintLaurenceOTooleBishop": "Saint Laurence O'Toole, Bishop",
    "saintLaurenceWangBingAndCompanionsMartyrsSaintJosephFreinademetzPriest": "Saint Laurence Wang Bing and Companions, Martyrs or Saint Joseph Freinademetz, Priest",
    "saintLawrenceBaiXiaomanMartyr": "Saint Lawrence Bai Xiaoman, Martyr",
    "saintLawrenceOfBrindisiPriestAndDoctor": "Saint Lawrence of Brindisi, Priest and Doctor",
    "saintLawrenceOfRomeDeaconAndMartyr": "Saint Lawrence of Rome, Deacon and Martyr",
    "saintLeanderBishop": "Saint Leander, Bishop",
    "saintLeobaAbbess": "Saint Leoba, Abbess",
    "saintLeoIxPopeOrBlessedMarcelCalloMartyr": "Saint Leo IX, Pope Or Blessed Marcel Callo, Martyr",
    "saintLeoManginPriestAndCompanionsMartyrs": "Saint Leo Mangin, Priest and Companions, Martyrs",
    "saintLeonardOfNoblacHermit": "Saint Leonard of Noblac, Hermit",
    "saintLeopoldIII": "Saint Leopold III",
    "saintLeopoldMandicPriest": "Saint Leopold Mandic, Priest",
    "saintLeoTheGreatPopeAndDoctor": "Saint Leo the Great, Pope and Doctor",
    "saintLorenzoRuizAndCompanionsMartyrs": "Saint Lorenzo Ruiz and Companions, Martyrs",
    "saintLouisBertrandPriest": "Saint Louis Bertrand, Priest",
    "saintLouisGrignonDeMontfortPriest": "Saint Louis Grignon de Montfort, Priest",
    "saintLouisSaintJosephOfCalasanzPriest": "Saint Louis/Saint Joseph of Calasanz, Priest",
    "saintLuciusOfChurBishopAndMartyr": "Saint Lucius of Chur, Bishop and Martyr",
    "saintLucyOfSyracuseVirginAndMartyr": "Saint Lucy of Syracuse, Virgin and Martyr",
    "saintLucyYiZhenmeiVirginAndMartyr": "Saint Lucy Yi Zhenmei, Virgin and Martyr",
    "saintLudgerBishop": "Saint Ludger, Bishop",
    "saintLudmilaMartyr": "Saint Ludmila, Martyr",
    "saintLuigiOrionePriest": "Saint Luigi Orione, Priest",
    "saintLukeTheEvangelist": "Saint Luke the Evangelist",
    "saintLydiaOfPhilippi": "Saint Lydia of Philippi",
    "saintMacartanBishop": "Saint Macartan, Bishop",
    "saintMacNissiBishop": "Saint Mac Nissi, Bishop",
    "saintMaelruainMaolruainVirgin": "Saint Maelruain (Maolruain), Virgin",
    "saintMagnusMartyr": "Saint Magnus, Martyr",
    "saintMalachyBishop": "Saint Malachy, Bishop",
    "saintMarcellinChampagnatPriest": "Saint Marcellin Champagnat, Priest",
    "saintMargaretMaryAlacoque": "Saint Msrgaret Mary Alacoque",
    "saintMargaretOfAntiochVirginAndMartyr": "Saint Margaret of Antioch, Virgin and Martyr",
    "saintMargaretOfHungary": "Saint Margaret of Hungary",
    "saintMargaretOfScotland": "Saint Margaret of Scotland",
    "saintMargaretOfScotlandSaintGertrudeTheGreatVirgin": "Saint Margaret of Scotland/Saint Gertrude the Great, Virgin",
    "saintMargueriteBourgeoysVirgin": "Saint Marguerite Bourgeoys, Virgin",
    "saintMargueriteDYouvilleReligious": "Saint Marguerite d'Youville, Religious",
    "saintMariaDeJesusSacramentadoVenegasVirgin": "Saint Maria de Jesus Sacramentado Venegas, Virgin",
    "saintMariaGorettiVirginAndMartyr": "Saint Maria Goretti, Virgin and Martyr",
    "saintMariaMicaelaOfTheBlessedSacramentVirgin": "Saint Maria Micaela of The Blessed Sacrament, Virgin",
    "saintMarianaDeJesusDeParedesVirgin": "Saint Mariana de Jesus de Paredes, Virgin",
    "saintMarieOfTheIncarnationReligious": "Saint Marie of The Incarnation, Religious",
    "saintMarina": "Saint Marina",
    "saintMarkApostle": "Saint Mark, Apostle",
    "saintMarkoKrizinPriestAndMartyr": "Saint Marko Krizin, Priest and Martyr",
    "saintMarkTheEvangelist": "Saint Mark the Evangelist",
    "saintMaroun": "Saint Maroun",
    "saintMartha": "Saint Martha",
    "saintMartinDePorresReligious": "Saint Martin de Porres, Religious",
    "saintMartinIPopeAndMartyr": "Saint Martin I, Pope and Martyr",
    "saintMartinOfToursBishop": "Saint Martin of Tours, Bishop",
    "saintMartinWuXueshengAndCompanionsMartyrs": "Saint Martin Wu Xuesheng and Companions, Martyrs",
    "saintMaryMacKillopVirgin": "Saint Mary MacKillop, Virgin",
    "saintMaryMagdalene": "Saint Mary Magdalene",
    "saintMaryOfTheCrossVirgin": "Saint Mary of The Cross, Virgin",
    "saintMatilda": "Saint Matilda",
    "saintMatthewApostleAndEvangelist": "Saint Matthew, Apostle and Evangelist",
    "saintMatthiasTheApostle": "Saint Matthias the Apostle",
    "saintMauriceAndCompanionsMartyrs": "Saint Maurice and Companions, Martyrs",
    "saintMaurusBishop": "Saint Maurus, Bishop",
    "saintMaximilianMaryKolbePriestAndMartyr": "Saint Maximilian Mary Kolbe, Priest and Martyr",
    "saintMeinradMartyr": "Saint Meinrad, Martyr",
    "saintMelBishop": "Saint Mel, Bishop",
    "saintMelchiorGrodzieckiPriestAndMartyr": "Saint Melchior Grodziecki, Priest and Martyr",
    "saintMiguelFebresCorderoReligious": "Saint Miguel Febres Cordero, Religious",
    "saintMolaiseLaisrenLaserianBishop": "Saint Molaise (Laisren, Laserian), Bishop",
    "saintMonica": "Saint Monica",
    "saintMoninneVirgin": "Saint Moninne, Virgin",
    "saintMuiredachBishopSaintAttractaVirginOrSaintLeliaVirgin": "Saint Muiredach, Bishop, Saint Attracta, Virgin, Or Saint Lelia, Virgin",
    "saintMunchinBishop": "Saint Munchin, Bishop",
    "saintNicholasBishop": "Saint Nicholas, Bishop",
    "saintNicholasOfFlueHermit": "Saint Nicholas of Flüe, Hermit",
    "saintNikolaTavelicPriestAndMartyr": "Saint Nikola Tavelic, Priest and Martyr",
    "saintNinian": "Saint Ninian",
    "saintNorbertBishop": "Saint Norbert, Bishop",
    "saintNunoDeSantaMaria": "Saint Nuno de Santa Maria",
    "saintOdileOfAlsaceAbbess": "Saint Odile of Alsace, Abbess",
    "saintOlafIiMartyr": "Saint Olaf II, Martyr",
    "saintOlga": "Saint Olga",
    "saintOliverPlunketBishopAndMartyr": "Saint Oliver Plunket, Bishop and Martyr",
    "saintOliverPlunkettBishopAndMartyr": "Saint Oliver Plunkett, Bishop and Martyr",
    "saintOtteranMonk": "Saint Otteran, Monk",
    "saintOttoOfBambergBishop": "Saint Otto of Bamberg, Bishop",
    "saintPantaleon": "Saint Pantaleon",
    "saintPaschalBaylon": "Saint Paschal Baylon",
    "saintPatrickBishop": "Saint Patrick, Bishop",
    "saintPaulChenChangpinAndCompanionsMartyrs": "Saint Paul Chen Changpin and Companions, Martyrs",
    "saintPaulinaOfTheAgonizingHeartOfJesusVirgin": "Saint Paulina of The Agonizing Heart of Jesus, Virgin",
    "saintPaulinusOfNolaBishopSaintsJohnFisherBishopAndThomasMoreMartyrs": "Saint Paulinus of Nola, Bishop/Saints John Fisher, Bishop and Thomas More, Martyrs",
    "saintPaulinusOfTrierBishop": "Saint Paulinus of Trier, Bishop",
    "saintPaulinusOfYorkBishop": "Saint Paulinus of York, Bishop",
    "saintPaulLiuHanzouPriestAndMartyr": "Saint Paul Liu Hanzou, Priest and Martyr",
    "saintPaulMikiAndCompanionsMartyrs": "Saint Paul Miki and Companions, Martyrs",
    "saintPaulOfTheCrossPriest": "Saint Paul of The Cross, Priest",
    "saintPedroCalungsodMartyr": "Saint Pedro Calungsod, Martyr",
    "saintPelagiusMartyr": "Saint Pelagius, Martyr",
    "saintPeterCanisiusPriestAndDoctor": "Saint Peter Canisius, Priest and Doctor",
    "saintPeterChanelPriestAndMartyrSaintLouisGrignonDeMontfortPriest": "Saint Peter Chanel, Priest and Martyr/Saint Louis Grignon de Montfort, Priest",
    "saintPeterChrysologusBishopAndDoctor": "Saint Peter Chrysologus, Bishop and Doctor",
    "saintPeterClaverPriest": "Saint Peter Claver, Priest",
    "saintPeterDamianBishopAndDoctorOfTheChurch": "Saint Peter Damian, Bishop and Doctor of the Church",
    "saintPeterLiuMartyr": "Saint Peter Liu, Martyr",
    "saintPeterOfAlcantaraPriest": "Saint Peter of Alcantara, Priest",
    "saintPeterSanzBishopAndMartyr": "Saint Peter Sanz, bishop and Martyr",
    "saintPeterWuMartyr": "Saint Peter Wu, Martyr",
    "saintPhilipNeriPriest": "Saint Philip Neri, Priest",
    "saintPioOfPietralcina": "Saint Pio of Pietralcina",
    "saintPioOfPietrelcinaPadrePioPriest": "Saint Pio of Pietrelcina (Padre Pio), Priest",
    "saintPiusVPope": "Saint Pius V, Pope",
    "saintPiusXPope": "Saint Pius X, Pope",
    "saintPolycarpBishopAndMartyr": "Saint Polycarp, Bishop and Martyr",
    "saintPothinusBishopSaintBlAndinaVirginAndTheirCompanionsMartyrs": "Saint Pothinus, Bishop, Saint Blandina, Virgin, and Their Companions, Martyrs",
    "saintProcopiusAbbot": "Saint Procopius, Abbot",
    "saintPubliusBishop": "Saint Publius, Bishop",
    "saintQuirinusOfSescia": "Saint Quirinus of Sescia",
    "saintRabanusMaurusBishop": "Saint Rabanus Maurus, Bishop",
    "saintRadimBishop": "Saint Radim, Bishop",
    "saintRafaelGuizarYValenciaBishop": "Saint Rafael Guizar y Valencia, Bishop",
    "saintRafalKalinowskiPriest": "Saint Rafal Kalinowski, Priest",
    "saintRafqaRebeccaVirgin": "Saint Rafqa (Rebecca), Virgin",
    "saintRaymondOfPenyafortPriest": "Saint Raymond of Penyafort, Priest",
    "saintRemigiusBishop": "Saint Remigius, Bishop",
    "saintRichardGwynMartyr": "Saint Richard Gwyn, Martyr",
    "saintRichardOfChichesterBishop": "Saint Richard of Chichester, Bishop",
    "saintRitaOfCascia": "Saint Rita of Cascia",
    "saintRobertBellarmineBishopAndDoctor": "Saint Robert Bellarmine, Bishop and Doctor of the Church",
    "saintRocco": "Saint Rocco",
    "saintRoch": "Saint Roch",
    "saintRomualdAbbot": "Saint Romuald, Abbot",
    "saintRoseOfLima": "Saint Rose of Lima, Virgin",
    "saintRosePhilippineDuchesneVirgin": "Saint Rose Philippine Duchesne, Virgin",
    "saintsAlbanJuliusAndAaronMartyrs": "Saints Alban, Julius and Aaron, Martyrs",
    "saintsAndrewZoerardusAndBenedictHermits": "Saints Andrew Zoerardus and Benedict, Hermits",
    "saintsAndrewZorardAndBenedictHermits": "Saints Andrew Zorard and Benedict, Hermits",
    "saintsAugustineZhaoRongPriestAndCompanionsMartyrs": "Saints Augustine Zhao Rong, Priest, and Companions, Martyrs",
    "saintsBasilTheGreatAndGregoryNazianzenBishopsAndDoctors": "Saints Basil the Great and Gregory Nazianzen, Bishops and Doctors",
    "saintsBenedyktJanMateuszIsaakAndKrystynMartyrs": "Saints Benedykt, Jan, Mateusz, Isaak and Krystyn, Martyrs",
    "saintsBorisAndGlebMartyrs": "Saints Boris and Gleb, Martyrs",
    "saintsCanuteEricAndOlafMartyrs": "Saints Canute, Eric and Olaf, Martyrs",
    "saintsChadAndCeddBishop": "Saints Chad and Cedd, Bishop",
    "saintsCharlesLwangaAndCompanionsMartyrs": "Saints Charles Lwanga and Companions, Martyrs",
    "saintScholasticaVirgin": "Saint Scholastica, Virgin",
    "saintsConradAndGebhardOfConstanceBishops": "Saints Conrad and Gebhard of Constance, Bishops",
    "saintsCorneliusPopeAndCyprianBishopMartyrs": "Saints Cornelius, Pope, and Cyprian, Bishop, Martyrs",
    "saintsCosmasAndDamian": "Saints Cosmas and Damian",
    "saintsCosmasAndDamianMartyrs": "Saints Cosmas and Damian, Martyrs",
    "saintsCyrilMonkAndMethodiusBishop": "Saints Cyril, Monk and Methodius, Bishop",
    "saintSenanBishop": "Saint Senan, Bishop",
    "saintSeverinusOfNoricumMonk": "Saint Severinus of Noricum, Monk",
    "saintsFabianPopeAndSebastianMartyrs": "Saints Fabian, Pope, and Sebastian, Martyrs",
    "saintsFelipeDeJesusPaulMikiAndCompanionsMartyrs": "Saints Felipe de Jesus, Paul Miki and Companions, Martyrs",
    "saintsFructuosusBishopAndAuguriusAndEulogiusDeaconsMartyrs": "Saints Fructuosus, Bishop, and Augurius and Eulogius, Deacons, Martyrs",
    "saintsGregoryGrassiFrancisFogollaAndAnthonyFantosatiBishopsAndCompanionsMartyrs": "Saints Gregory Grassi, Francis Fogolla and Anthony Fantosati, Bishops and Companions, Martyrs",
    "saintsHenryAndCunigunde": "Saints Henry and Cunigunde",
    "saintSigismundMartyr": "Saint Sigismund, Martyr",
    "saintSimonOfLipnicaPriest": "Saint Simon of Lipnica, Priest",
    "saintSixtusIiPopeAndCompanionsMartyrsSaintCajetanPriest": "Saint Sixtus II, Pope, and Companions, Martyrs/Saint Cajetan, Priest",
    "saintsJeanDeBrebeufAndIsaacJoguesPriestsAndCompanionsMartyrsSaintPaulOfTheCrossPriest": "Saints Jean de Brebeuf and Isaac Jogues, Priests and Companions, Martyrs/Saint Paul of the Cross, Priest",
    "saintsJoachimAndAnne": "Saints Joachim and Anne",
    "saintsJohnFisherBishopAndThomasMoreMartyrs": "Saints John Fisher, Bishop and Thomas More, Martyrs",
    "saintsLawrenceRuizAndCompanionsMartyrs": "Saints Lawrence Ruiz and Companions, Martyrs",
    "saintsLouisVersigliaBishopAndCallistusCaravarioPriestMartyrs": "Saints Louis Versiglia, Bishop and Callistus Caravario, Priest, Martyrs",
    "saintsMarcellinusAndPeterMartyrs": "Saints Marcellinus and Peter, Martyrs",
    "saintsMargaretClitherowAnneLineAndMargaretWardMartyrs": "Saints Margaret Clitherow, Anne Line and Margaret Ward, Martyrs",
    "saintsMarkoKrizinMelicharGrodeckiAndStephenPongracPriestsAndMartyrs": "Saints Marko Krizin, Melichar Grodecki and Stephen Pongrac, Priests and Martyrs",
    "saintsMichaelGabrielAndRaphaelArchangels": "Saints Michael, Gabriel and Raphael, Archangels",
    "saintsNereusAndAchilleusMartyrsSaintPancrasMartyr": "Saints Nereus and Achilleus, Martyrs/Saint Pancras, Martyr",
    "saintSoledadTorresAcostaVirgin": "Saint Soledad Torres Acosta, Virgin",
    "saintsPedroBautistaPaulMikiAndCompanionsMartyrs": "Saints Pedro Bautista, Paul Miki and Companions, Martyrs",
    "saintsPerpetuaAndFelicityMartyrs": "Saints Perpetua and Felicity, Martyrs",
    "saintsPhilipAndJamesApostles": "Saints Philip and James, Apostles",
    "saintsPhilipEvansAndJohnLloydPriestsAndMartyrs": "Saints Philip Evans and John Lloyd, Priests and Martyrs",
    "saintsPontianPopeAndHippolytusPriestMartyrs": "Saints Pontian, Pope and Hippolytus, Priest, Martyrs",
    "saintSpyridon": "Saint Spyridon",
    "saintsRoqueGonzalezAlfonsoRodriguezOlmedoAndJuanDelCastilloPriestsAndMartyrs": "Saints Roque Gonzalez, Alfonso Rodriguez Olmedo, and Juan del Castillo, Priests and Martyrs",
    "saintsRupertAndVirgiliusOfSalzburgBishops": "Saints Rupert and Virgilius of Salzburg, Bishops",
    "saintsSimonAndJudeApostles": "Saints Simon and Jude, Apostles",
    "saintStanislausBishopAndMartyr": "Saint Stanislaus, Bishop and Martyr",
    "saintStanislausKazimierczykPriest": "Saint Stanislaus Kazimierczyk, Priest",
    "saintStanislausKostkaReligious": "Saint Stanislaus Kostka, Religious",
    "saintStephenOfHungary": "Saint Stephen of Hungary",
    "saintStephenTheFirstMartyr": "Saint Stephen, The First Martyr",
    "saintsTimothyAndTitusBishops": "Saints Timothy and Titus, Bishops",
    "saintSunnivaVirginAndMartyr": "Saint Sunniva, Virgin and Martyr",
    "saintSwithunBishop": "Saint Swithun, Bishop",
    "saintSylvesterIPope": "Saint Sylvester I, Pope",
    "saintTeiloBishop": "Saint Teilo, Bishop",
    "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr": "Saint Teresa Benedicta of The Cross (Edith Stein), Virgin and Martyr, Patron of Europe",
    "saintTeresaOfCalcuttaReligious": "Saint Teresa of Calcutta, Religious",
    "saintTeresaOfJesusJornetEIbarsVirgin": "Saint Teresa of Jesus Jornet e Ibars, Virgin",
    "saintTeresaOfJesusVirginAndDoctorOfTheChurch": "Saint Teresa of Jesus, Virgin and Doctor",
    "saintTeresaOfLosAndesVirgin": "Saint Teresa of Los Andes, Virgin",
    "saintTheodoreOfCanterburyBishop": "Saint Theodore of Canterbury, Bishop",
    "saintTheodosiusOfTheCavesAbbot": "Saint Theodosius of The Caves, Abbot",
    "saintTheotoniusPriest": "Saint Theotonius, Priest",
    "saintThereseOfTheChildJesusVirginAndDoctor": "Saint Therese of the Child Jesus, Virgin and Doctor",
    "saintThereseOfTheChildJesusVirginSecondaryPatronessOfFrance": "Saint Therese of The Child Jesus, Virgin, Secondary Patroness of France",
    "saintThomasAquinasPriestAndDoctor": "Saint Thomas Aquinas, Priest and Doctor",
    "saintThomasBecketBishopAndMartyr": "Saint Thomas Becket, Bishop and Martyr",
    "saintThomasOfVillanovaBishop": "Saint Thomas of Villanova, Bishop",
    "saintThomasRokuzayemonPriestAndCompanionsMartyrs": "Saint Thomas Rokuzayemon, Priest and Companions, Martyrs",
    "saintThomasTheApostle": "Saint Thomas the Apostle",
    "saintThorfinnBishop": "Saint Thorfinn, Bishop",
    "saintThorlacBishop": "Saint Thorlac, Bishop",
    "saintTuribiusOfMogrovejoBishop": "Saint Turibius of Mogrovejo, Bishop",
    "saintUlrichOfAugsburg": "Saint Ulrich of Augsburg",
    "saintUrsulaAndCompanionsVirginsAndMartyrs": "Saint Ursula and Companions, Virgins and Martyrs",
    "saintUrsulaLedochowskaVirgin": "Saint Ursula Ledochowska, Virgin",
    "saintValentineOfRaetiaBishop": "Saint Valentine of Raetia, Bishop",
    "saintVincentDeaconAndMartyr": "Saint Vincent, Deacon and Martyr",
    "saintVincentDeaconAndMartyrOrSaintMarianneCopeVirgin": "Saint Vincent, Deacon and Martyr Or Saint Marianne Cope, Virgin",
    "saintVincentDePaulPriest": "Saint Vincent de Paul, Priest",
    "saintVincentFerrerPriest": "Saint Vincent Ferrer, Priest",
    "saintVincentPallottiPriest": "Saint Vincent Pallotti, Priest",
    "saintVitusMartyr": "Saint Vitus, Martyr",
    "saintVladimirTheGreat": "Saint Vladimir The Great",
    "saintWalburgaAbbess": "Saint Walburga, Abbess",
    "saintWenceslausMartyr": "Saint Wenceslaus, Martyr",
    "saintWenceslausMartyrSaintsLawrenceRuizAndCompanionsMartyrs": "Saint Wenceslaus, Martyr/Saints Lawrence Ruiz and Companions, Martyrs",
    "saintWendelinAbbot": "Saint Wendelin, Abbot",
    "saintWilfridBishop": "Saint Wilfrid, Bishop",
    "saintWillibaldBishop": "Saint Willibald, Bishop",
    "saintWillibrordBishop": "Saint Willibrord, Bishop",
    "saintWinefrideVirgin": "Saint Winefride, Virgin",
    "saintWolfgangBishop": "Saint Wolfgang, Bishop",
    "saintWolfgangOfRegensburgBishop": "Saint Wolfgang of Regensburg, Bishop",
    "saintWulstanBishop": "Saint Wulstan, Bishop",
    "saintZdislava": "Saint Zdislava",
    "saintZygmuntGorazdowskiPriest": "Saint Zygmunt Gorazdowski, Priest",
    "saintZygmuntSzczesnyFelinskiBishop": "Saint Zygmunt Szczesny Felinski, Bishop",
    "santoNinoInfantJesus": "Santo Nino (Infant Jesus)",
    "sevenHolyFoundersOfTheServiteOrder": "Seven Holy Founders of the Servite Order",
    "sevenMartyredNunsFromTheFranciscanMissionariesOfMary": "Seven Martyred Nuns from the Franciscan Missionaries of Mary",
    "shipwreckOfSaintPaulApostle": "Shipwreck of Saint Paul, Apostle",
    "shroveMonday": "Shrove Monday",
    "shroveTuesday": "Shrove Tuesday",
    "stDunstanArchbishopOfCanterbury": "St Dunstan, Archbishop of Canterbury",
    "theBeheadingOfSaintJohnTheBaptistMartyr": "The Beheading of Saint John the Baptist, Martyr",
    "theEnglishMartyrs": "The English Martyrs",
    "theFiveWoundsOfTheLord": "The Five Wounds of The Lord",
    "theMostHolyNameOfJesus": "The Most Holy Name of Jesus",
    "theSixWelshMartyrsAndCompanions": "The Six Welsh Martyrs and Companions",
    "transferOfTheRelicsOfSaintStephen": "Transfer of The Relics of Saint Stephen",
    "vietnameseMartyrs": "Vietnamese Martyrs",
    "visitationOfTheBlessedVirginMary": "Visitation of the Blessed Virgin Mary",
    "waitangiDay": "Waitangi Day"
  }
};
exports["default"] = _default;
},{}],71:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _default = {
  "advent": {
    "season": "Temps de l’Avent",
    "feria": "{{day}} de la {{week}} semaine de l’Avent",
    "sunday": "{{week}} Dimanche de l’Avent"
  },
  "christmastide": {
    "season": "Temps de Noël",
    "day": "{{day}} dans le Temps de Noël",
    "octave": "{{count}} jour dans l’Octave de Noël",
    "sunday": "{{count}} Dimanche de Noël"
  },
  "epiphany": {
    "season": "Epiphanie",
    "before": "{{day}} avant l’Epiphanie",
    "after": "{{day}} après l’Epiphanie"
  },
  "ordinaryTime": {
    "season": "Temps Ordinaire",
    "feria": "{{day}} de la {{week}} semaine du Temps Ordinaire",
    "sunday": "{{week}} Dimanche du Temps Ordinaire"
  },
  "lent": {
    "season": "Carême",
    "feria": "{{day}} de la {{week}} semaine du Carême",
    "sunday": "{{week}} Dimanche du Carême",
    "day_after_ash_wed": "{{day}} des Cendres"
  },
  "holyWeek": {
    "season": "Semaine Sainte",
    "feria": "{{day}} Saint"
  },
  "eastertide": {
    "season": "Temps de Pâques",
    "feria": "{{day}} de la {{week}} semaine de Pâques",
    "sunday": "{{week}} Dimanche de Pâques",
    "octave": "{{day}} de Pâques"
  },
  "celebrations": {
    "allSaints": "Tous les Saints",
    "annunciation": "Annonciation du Seigneur",
    "ascension": "Ascension du Seigneur",
    "ashWednesday": "Mercredi des Cendres",
    "assumption": "Assomption de la Vierge Marie",
    "baptismOfTheLord": "Baptême du Seigneur",
    "birthOfJohnTheBaptist": "Nativité de Saint Jean le Baptiste",
    "christmas": "Nativité du Seigneur",
    "christTheKing": "Christ, Roi de l'Univers",
    "corpusChristi": "Saint-Sacrement",
    "divineMercySunday": "Dimanche de la Divine Miséricorde",
    "easter": "Dimanche de Pâques",
    "epiphany": "Dimanche des Rameaux et de la Passion",
    "goodFriday": "Vendredi Saint",
    "holyFamily": "La Sainte Famille",
    "holySaturday": "Samedi Saint",
    "holyThursday": "Jeudi Saint",
    "immaculateConception": "Immaculée Conception de la Vierge Marie",
    "immaculateHeartOfMary": "Cœur immaculé de Marie",
    "josephHusbandOfMary": "Saint Joseph, Époux de la Vierge Marie",
    "maryMotherOfGod": "Marie, Mère de Dieu",
    "palmSunday": "Dimanche des Rameaux",
    "pentecostSunday": "Pentecôte",
    "peterAndPaulApostles": "Saint Pierre et Saint Paul, Apôtres",
    "presentationOfTheLord": "Présentation du Seigneur au Temple",
    "sacredHeartOfJesus": "Sacré-Cœur de Jésus",
    "theExaltationOfTheHolyCross": "La Croix Glorieuse",
    "transfiguration": "Transfiguration du Seigneur",
    "trinitySunday": "Très Sainte Trinité"
  },
  "sanctoral": {
    "allSouls": "Commémoration de tous les fidèles défunts",
    "birthOfTheBlessedVirginMary": "Nativité de la Vierge Marie",
    "blessedAndreGrassetPriestAndMartyr": "Bienheureux André Grasset, Prêtre, Canadien martyr de la Révolution française (✝ 1792)",
    "blessedCatherineOfSaintAugustineVirgin": "Bienheureuse Catherine de Saint-Augustin, Religieuse hospitalière de la Miséricorde (✝ 1668)",
    "blessedDinaBelangerVirgin": "Bienheureuse Dina Bélanger, Religieuse de la congrégation des Sœurs de Jésus-Marie (✝ 1929)",
    "blessedEmilieTavernierGamelinReligious": "Bienheureuse Émilie Tavernier-Gamelin, Religieuse, Fondatrice des Sœurs de la Providence de Montréal (✝ 1851)",
    "blessedFredericJanssoonePriest": "Bienheureux Frédéric Janssoone, Prêtre franciscain (✝ 1916)",
    "blessedLouisZephirinMoreauBishop": "Bienheureux Louis Zéphyrin Moreau, Évêque (✝ 1901)",
    "blessedMarieAnneBlondinVirgin": "Bienheureuse Marie-Anne Blondin, Religieuse, Fondatrice des Sœurs de Sainte-Anne (✝ 1890)",
    "blessedMarieLeonieParadisVirgin": "Bienheureuse Marie-Léonie Paradis, Religieuse, Fondatrice de la Congrégation des Petites Sœurs de la Sainte Famille (✝ 1912)",
    "blessedMarieRoseDurocherVirgin": "Bienheureuse Marie-Rose Durocher, Religieuse, Fondatrice des Sœurs des Saints Noms de Jésus et de Marie (✝ 1849)",
    "blessedsNykytaBudkaAndVasylVelychkowskyBishopsAndMartyrs": "Bienheureux Nicétas Budka (✝ 1949) et Vasyl Velychkowsky (✝ 1973), Évêques et Martyrs",
    "chairOfSaintPeterApostle": "Chaire de Saint Pierre, Apôtre",
    "conversionOfSaintPaulApostle": "Conversion de Saint Paul, Apôtre",
    "dedicationOfTheBasilicaOfSaintMaryMajor": "Dédicace de la basilique Sainte-Marie Majeure",
    "dedicationOfTheBasilicasOfSaintsPeterAndPaulApostles": "Dédicace des basiliques de Saint Pierre et Saint Paul, Apôtres, à Rome",
    "dedicationOfTheLateranBasilica": "Dédicace de la Basilique du Latran",
    "firstMartyrsOfTheChurchOfRome": "Premiers Saints martyrs de la Sainte Église romaine (✝ 64)",
    "guardianAngels": "Saints Anges gardiens",
    "holyInnocentsMartyrs": "Saints Innocents, Martyrs (1er s.)",
    "holyNameOfTheBlessedVirginMary": "Le Saint Nom de Marie",
    "ourLadyMediatrix": "Notre-Dame, Médiatrice",
    "ourLadyOfFatima": "Notre-Dame de Fatima",
    "ourLadyOfGoodCounsel": "Notre-Dame du Bon Conseil",
    "ourLadyOfGuadalupe": "Notre-Dame de Guadalupe",
    "ourLadyOfLourdes": "Notre-Dame de Lourdes",
    "ourLadyOfMountCarmel": "Notre-Dame du Mont-Carmel",
    "ourLadyOfSorrows": "Notre-Dame des Douleurs",
    "ourLadyOfTheRosary": "Notre-Dame du Rosaire",
    "popeSaintJohnPaulII": "Saint Jean Paul II, Pape (✝ 2005)",
    "popeSaintJohnXXIII": "Saint Jean XXIII, Pape (✝ 1963)",
    "presentationOfTheBlessedVirginMary": "Présentation de la Vierge Marie",
    "queenshipOfBlessedVirginMary": "Vierge Marie Reine",
    "saintAgathaVirginAndMartyr": "Sainte Agathe, Vierge et Martyre en Sicile (✝ 251)",
    "saintAgnesVirginAndMartyr": "Sainte Agnès, Vierge et Martyre (✝ v. 304)",
    "saintAlbertTheGreatBishopAndDoctor": "Saint Albert le Grand, Frère prêcheur, Évêque de Ratisbonne, Docteur de l’Eglise (✝ 1280)",
    "saintAloysiusGonzagaReligious": "Saint Louis de Gonzague, Religieux Jésuite (✝ 1591)",
    "saintAlphonsusMariaDeLiguoriBishopAndDoctorOfTheChurch": "Saint Alphonse-Marie de Liguori, Bishop and Doctor of the Church",
    "saintAmandMissionary": "Saint Amand d’Elnone, Missionnaire, Evêque de Maastricht (✝ v. 676)",
    "saintAmbroseBishopAndDoctor": "Saint Ambroise, Évêque de Milan et Docteur de l’Église (✝ 397)",
    "saintAndreBessetteReligious": "Saint Frère André Bessette, Religieux (✝ 1937)",
    "saintAndrewDungLacAndCompanionsMartyrs": "Saint André Dung Lac, Prêtre, et ses compagnons, Martyrs (✝ entre 1745 et 1862)",
    "saintAndrewKimTaegonPriestAndPaulChongHasangAndCompanionsMartyrs": "Saint André Kim Taegon, Prêtre, et Paul Chong Ha-sang et ses compagnons, Martyrs en Corée (19ème s.)",
    "saintAndrewTheApostle": "Saint André, Apôtre",
    "saintAngelaMericiVirgin": "Sainte Angèle Mérici, Religieuse, Fondatrice de la Compagnie de Sainte Ursule de Brescia (✝ 1540)",
    "saintAnnePatronOfQuebecAndSaintJoachimParentsOfTheBlessedVirginMary": "Saints Anne, Patronne du Québec, et Joachim, Parents de la Vierge Marie (1er siècle)",
    "saintAnselmOfCanterburyBishopAndDoctorOfTheChurch": "Saint Anselme de Cantorbéry, Évêque, docteur de l’Eglise (✝ 1109)",
    "saintAnthonyMaryClaretBishop": "Saint Antoine-Marie Claret, Évêque (✝ 1870)",
    "saintAnthonyOfEgyptAbbot": "Saint Antoine le Grand, Ermite en Egypte (✝ 356)",
    "saintAnthonyOfPaduaPriestAndDoctor": "Saint Antoine, Prêtre et Docteur de l’Église (✝ 1231)",
    "saintAnthonyZaccariaPriest": "Saint Antoine-Marie Zaccaria, Prêtre (✝ 1539)",
    "saintApollinaris": "Saint Apollinaire, Évêque (2ème s.)",
    "saintAthanasiusBishopAndDoctor": "Saint Athanase, Évêque, Docteur et Père de l’Église (✝ 373)",
    "saintAugustineOfCanterburyBishop": "Saint Augustin, Évêque de Cantorbéry en Angleterre (✝ 604)",
    "saintAugustineOfHippoBishopAndDoctorOfTheChurch": "Saint Augustin, Evêque d’Hippone, Docteur de l’Église (✝ 430)",
    "saintBarnabasTheApostle": "Saint Barnabé, Apôtre",
    "saintBartholomewTheApostle": "Saint Barthélemy, Apôtre",
    "saintBedeTheVenerablePriestAndDoctorSaintGregoryViiPopeSaintMaryMagdaleneDePazziVirgin": "Saint Bède le Vénérable, Prêtre et docteur de l’Église (✝ 735), ou Saint Grégoire VII, Pape (✝ 1085), ou Sainte Marie-Madeleine de Pazzi, Vierge de l’Ordre du Carmel (✝ 1607)",
    "saintBenedictOfNursiaAbbot": "Saint Benoît de Nursie, Patriarche des moines d’Occident, Fondateur de l’ordre des Bénédictins, Patron de l’Europe (✝ v. 547)",
    "saintBernadetteSoubirousVirgin": "Sainte Bernadette Soubirous, Vierge (✝ 1879)",
    "saintBernardineOfSienaPriest": "Saint Bernardin de Sienne, Prêtre (✝ 1444)",
    "saintBernardOfClairvauxAbbotAndDoctorOfTheChurch": "Saint Bernard de Clairvaux, Abbé, Docteur de l’Église (✝ 1153)",
    "saintBlaseBishopAndMartyrSaintAnsgarBishop": "Saint Blaise de Sébaste, Évêque et Martyr (✝ 316), ou Saint Anschaire de Brême, Évêque (✝ 865)",
    "saintBonaventureBishopAndDoctor": "Saint Bonaventure, Évêque d’Albano et Docteur de l’Église (✝ 1274)",
    "saintBonifaceBishopAndMartyr": "Saint Boniface, Évêque et Martyr (✝ 754)",
    "saintBridgetOfSwedenReligious": "Sainte Brigitte de Suède, Veuve puis Religieuse, Fondatrice de l’ordre du Saint-Sauveur, Copatronne de l’Europe (✝ 1373)",
    "saintBrotherMutienMarieReligious": "Saint Mutien Marie Wiaux, Frère des Ecoles Chrétiennes (✝ 1917)",
    "saintBrunoPriest": "Saint Bruno, Prêtre, Fondateur des Chartreux (✝ 1101)",
    "saintCaesariusOfArlesBishop": "Saint Césaire d’Arles, Évêque, Père de l’Eglise (✝ 542)",
    "saintCallistusIPopeAndMartyr": "Saint Calixte Ier, Pape et Martyr (✝ 222)",
    "saintCamillusDeLellisPriest": "Saint Camille de Lellis, Prêtre (✝ 1614)",
    "saintCamillusDeLellisPriestOrSaintHenryBishopAndMartyr": "Saint Camille de Lellis, Prêtre, ou Saint Henri, Évêque et Martyr",
    "saintCasimir": "Saint Casimir (✝ 1484)",
    "saintCatherineOfAlexandriaVirginAndMartyr": "Sainte Catherine d’Alexandrie, Vierge et Martyre (4ème s.)",
    "saintCatherineOfSienaVirginAndDoctorOfTheChurch": "Sainte Catherine de Sienne, Vierge et Docteur de l’Eglise, Patronne de l’Europe (✝ 1380)",
    "saintCeciliaVirginAndMartyr": "Sainte Cécile, Vierge et Martyre à Rome (✝ 230)",
    "saintCharbelMakhloufPriestAndHermit": "Saint Charbel Makhlouf, Moine Prêtre Maronite (✝ 1898)",
    "saintCharlesBorromeoBishop": "Saint Charles Borromée, Archevêque de Milan (✝ 1584)",
    "saintChristopherMagallanesAndCompanionsMartyrs": "Saints Cristóbal Magallanes, Prêtre, et ses 24 compagnons, Martyrs Mexicains (✝ 1927)",
    "saintClareVirgin": "Sainte Claire, Vierge",
    "saintClementIPopeAndMartyrSaintColumbanReligious": "Saint Clément Ier, Pape et Martyr (✝ 97), ou Saint Colomban, Religieux (✝ 615)",
    "saintClotilde": "Sainte Clotilde, Reine des Francs (✝ 545)",
    "saintCyrilOfAlexandriaBishopAndDoctor": "Saint Cyrille, Évêque d’Alexandrie et Docteur de l’Église (✝ 444)",
    "saintCyrilOfJerusalemBishopAndDoctor": "Saint Cyrille de Jérusalem, Évêque de Jérusalem, Docteur de l’Église (✝ 387)",
    "saintDamasusIPope": "Saint Damase Ier, Pape (✝ 384)",
    "saintDamienDeVeusterPriest": "Saint Père Damien, Prêtre et Missionnaire Picpus (✝ 1889)",
    "saintDenisAndCompanionsMartyrsSaintJohnLeonardiPriest": "Saint Denis, Évêque, et ses compagnons, martyrs à Paris (3ème s.), ou Saint Jean Léonardi, Prêtre (✝ 1609))",
    "saintDominicPriest": "Saint Dominique de Guzman, Prêtre, Fondateur de l’Ordre des Frères prêcheurs (✝ 1221)",
    "saintElizabethOfHungary": "Sainte Élisabeth de Hongrie (✝ 1231)",
    "saintElizabethOfPortugal": "Sainte Elisabeth du Portugal, Reine (✝ 1336)",
    "saintEphremDeaconAndDoctor": "Saint Ephrem, Diacre et Docteur de l’Église, (✝ 373)",
    "saintEugeneDeMazenodBishop": "Saint Eugène de Mazenod, Fondateur des Oblats de Marie-Immaculée, Évêque de Marseille (✝ 1861)",
    "saintEusebiusOfVercelliBishopSaintPeterJulianEymardPriest": "Saint Eusèbe de Verceil, Evêque (✝ 371), ou Saint Pierre-Julien Eymard, Prêtre, Fondateur des Pères du Saint-Sacrement (✝ 1868)",
    "saintFidelisOfSigmaringenPriestAndMartyr": "Saint Fidèle de Sigmaringen, Prêtre et Martyr (✝ 1622)",
    "saintFrancesOfRomeReligious": "Sainte Françoise Romaine, Religieuse (✝ 1440)",
    "saintFrancisDeSalesBishopAndDoctor": "Saint François de Sales, Evêque de Genève et Docteur de l’Église (✝ 1622)",
    "saintFrancisOfAssisi": "Saint François d’Assise, Fondateur de l’ordre des Frères mineurs (✝ 1226)",
    "saintFrancisOfPaolaHermit": "Saint François de Paule, Ermite, Fondateur de l’ordre des Minimes (✝ 1507)",
    "saintFrancisXavierPriest": "Saint François-Xavier, Prêtre, Jésuite Missionnaire (✝ 1552)",
    "saintFrancoisDeLavalBishop": "Saint François de Laval, Premier évêque de Québec (✝ 1708)",
    "saintGenevieveVirgin": "Sainte Geneviève, Vierge à Paris (✝ 500)",
    "saintGeorgeMartyrSaintAdalbertBishopAndMartyr": "Saint Georges, Martyr (✝ 303) ou Saint Adalbert, Évêque de Prague et Martyr (✝ 997)",
    "saintGertrudeOfNivellesVirgin": "Sainte Gertrude de Nivelles, Abbesse (✝ 659)",
    "saintGregoryTheGreatPopeAndDoctor": "Saint Grégoire le Grand, Pape et Docteur de l’Église (✝ 604)",
    "saintHedwigReligiousOrSaintMargaretMaryAlacoqueVirgin": "Sainte Edwige de Silésie, Veuve puis Religieuse (✝ 1243), ou Sainte Marguerite-Marie Alacoque, Visitandine à Paray-le-Monial (✝ 1690)",
    "saintHedwigReligiousSaintMargaretMaryAlacoqueVirgin": "Sainte Edwige de Silésie, Veuve puis Religieuse (✝ 1243), ou Sainte Marguerite-Marie Alacoque, Visitandine à Paray-le-Monial (✝ 1690)",
    "saintHenryBishopAndMartyr": "Saint Henri, Empereur Germanique (✝ 1024)",
    "saintHilaryOfPoitiersBishopAndDoctor": "Saint Hilaire de Poitiers, Évêque et Docteur de l’Église (✝ 367)",
    "saintHubertBishop": "Saint Hubert, Évêque (✝ 727)",
    "saintIgnatiusOfAntiochBishopAndMartyr": "Saint Ignace d’Antioche, Évêque et Martyr, Père et Docteur de l’Eglise (✝ 115)",
    "saintIgnatiusOfLoyolaPriest": "Saint Ignace de Loyola, Prêtre, Fondateur de la Compagnie de Jésus (✝ 1556)",
    "saintIrenaeusBishopAndMartyr": "Saint Irénée, Évêque et Martyr (✝ v. 201)",
    "saintIsidoreOfSevilleBishopAndDoctorOfTheChurch": "Saint Isidore de Séville, Docteur de l’Eglise, Évêque et Confesseur (✝ 636)",
    "saintIvoPriest": "Saint Yves Hélory, Prêtre et Juge en Bretagne (✝ 1303)",
    "saintJamesApostle": "Saint Jacques le Majeur, Apôtre (✝ 44)",
    "saintJaneFrancesDeChantalReligious": "Sainte Jeanne-Françoise de Chantal, Religieuse (✝ 1641)",
    "saintJanuariusBishopAndMartyr": "Saint Janvier, Évêque de Bénévent et Martyr (✝ 305)",
    "saintJeanVianneyTheCureOfArsPriest": "Saint Jean-Marie Vianney (Curé d’Ars), Prêtre (✝ 1859)",
    "saintJeromeEmilianiSaintJosephineBakhitaVirgin": "Saint Jérôme Émilien, Fondateur (✝ 1537), ou Sainte Joséphine Bakhita, Vierge et Religieuse (✝ 1947)",
    "saintJeromePriestAndDoctor": "Saint Jérôme, Père et Docteur de l’Église (✝ 420)",
    "saintJoanOfArcVirginSecondaryPatronessOfFrance": "Sainte Jeanne d’Arc, Vierge, Patronne Secondaires de la France (✝ 1431)",
    "saintJohnBaptistDeLaSallePriest": "Saint Jean-Baptiste de La Salle, Prêtre et Fondateur des Frères des Ecoles Chrétiennes (✝ 1719)",
    "saintJohnBerchmansReligious": "Saint Jean Berchmans, Jésuite Belge (✝ 1621)",
    "saintJohnBoscoPriest": "Saint Jean Bosco, Prêtre, Fondateur et Éducateur (✝ 1888)",
    "saintJohnChrysostomBishopAndDoctor": "Saint Jean Chrysostome, Évêque de Constantinople et Docteur de l’Église (✝ 407)",
    "saintJohnDamascenePriestAndDoctor": "Saint Jean Damascène, Prêtre et Docteur de l’Église (✝ 749)",
    "saintJohnEudesPriest": "Saint Jean Eudes, Prêtre (✝ 1680)",
    "saintJohnIPopeAndMartyr": "Saint Jean Ier, Pape et Martyr (✝ 526)",
    "saintJohnOfCapistranoPriest": "Saint Jean de Capistran, Prêtre de l’Ordre des Mineurs (✝ 1456)",
    "saintJohnOfGodReligious": "Saint Jean de Dieu, Religieux, Fondateur des Frères de la Charité (✝ 1550)",
    "saintJohnOfKantyPriest": "Saint Jean de Kenty, Prêtre (✝ 1473)",
    "saintJohnOfTheCrossPriestAndDoctor": "Saint Jean de la Croix, Prêtre et Docteur de l’Église (✝ 1591)",
    "saintJohnTheApostleAndEvangelist": "Saint Jean, Apôtre et Évangéliste",
    "saintJosaphatBishopAndMartyr": "Saint Josaphat Kuntsevych, Évêque Basilien et Martyr (✝ 1623)",
    "saintJosephSpouseOfTheBlessedVirginMaryPrincipalPatronOfCanada": "Saint Joseph, Époux de la Bienheureuse Vierge Marie, Principal Patron du Canada",
    "saintJosephTheWorker": "Saint Joseph, Artisan (1er s.)",
    "saintJuanDiegoCuauhtlatoatzin": "Saint Juan Diego Cuauhtlatoatzin (✝ 1548)",
    "saintJulianaOfLiegeVirgin": "Sainte Julienne de Cornillon, Religieuse Augustine (✝ 1258)",
    "saintJulieBilliartVirgin": "Sainte Julie Billiart, Religieuse, Fondatrice de l’Institut des Sœurs de Notre-Dame (✝ 1816)",
    "saintJustinMartyr": "Saint Justin, Martyr (✝ 165)",
    "saintKateriTekakwithaVirgin": "Sainte Kateri Tekakwitha, Vierge Amérindienne (✝ 1680)",
    "saintLambertBishopAndMartyr": "Saint Lambert, Évêque et Martyr (✝ 705)",
    "saintLawrenceOfBrindisiPriestAndDoctor": "Saint Laurent de Brindisi, Prêtre et Docteur de l’Église (✝ 1619)",
    "saintLawrenceOfRomeDeaconAndMartyr": "Saint Laurent de Rome, Diacre et Martyr (✝ 258)",
    "saintLeoTheGreatPopeAndDoctor": "Saint Léon le Grand, Pape et Docteur de l’Église",
    "saintLouisSaintJosephOfCalasanzPriest": "Saint Louis, Roi de France (✝ 1270), ou Saint Joseph de Calasanz, Prêtre (✝ 1648)",
    "saintLucyOfSyracuseVirginAndMartyr": "Sainte Lucie de Syracuse, Vierge et Martyre en Sicile (✝ v. 305)",
    "saintLukeTheEvangelist": "Saint Luc, Évangéliste",
    "saintMargaretOfScotlandSaintGertrudeTheGreatVirgin": "Sainte Marguerite d’Ecosse (✝ 1093), ou Sainte Gertrude, Vierge Moniale (✝ 1301)",
    "saintMargueriteBourgeoysVirgin": "Sainte Marguerite Bourgeoys, Religieuse, Fondatrice de la congrégation des Sœurs de Notre-Dame (✝ 1700)",
    "saintMargueriteDYouvilleReligious": "Sainte Marguerite d’Youville, Religieuse, Fondatrice des Sœurs de la Charité de Montréal (✝ 1771)",
    "saintMariaGorettiVirginAndMartyr": "Sainte Maria Goretti, Vierge et Martyre (✝ 1902)",
    "saintMarieOfTheIncarnationReligious": "Sainte Marie de l’Incarnation, Ursuline au Canada (✝ 1672)",
    "saintMarkTheEvangelist": "Saint Marc, Évangéliste",
    "saintMartha": "Sainte Marthe, Disciple du Christ (1er s.)",
    "saintMartinDePorresReligious": "Saint Martin de Porrès, Religieux Dominicain à Lima (✝ 1639)",
    "saintMartinIPopeAndMartyr": "Saint Martin Ier, Pape et Martyr (✝ 656)",
    "saintMartinOfToursBishop": "Saint Martin de Tours, Evêque (✝ 397)",
    "saintMaryMagdalene": "Sainte Marie-Madeleine, Disciple du Christ (1er s.)",
    "saintMatthewApostleAndEvangelist": "Saint Matthieu, Apôtre et Évangéliste",
    "saintMatthiasTheApostle": "Saint Matthias, Apôtre",
    "saintMaximilianMaryKolbePriestAndMartyr": "Saint Maximilien-Marie Kolbe, Prêtre et Martyr (✝ 1941)",
    "saintMonica": "Sainte Monique, Mère de Saint Augustin d’Hippone (✝ 387)",
    "saintNicholasBishop": "Saint Nicolas, Évêque de Myre (✝ v. 350)",
    "saintNorbertBishop": "Saint Norbert, Évêque (✝ 1134)",
    "saintPatrickBishop": "Saint Patrick, Évêque (✝ 461)",
    "saintPaulinusOfNolaBishopSaintsJohnFisherBishopAndThomasMoreMartyrs": "Saint Paulin, Évêque (✝ 431), ou Saints Jean Fisher, Évêque, et Thomas More, Martyrs (✝ 1535)",
    "saintPaulMikiAndCompanionsMartyrs": "Saints Paul Miki et ses compagnons, Martyrs au Japon (✝ 1597)",
    "saintPeterCanisiusPriestAndDoctor": "Saint Pierre Canisius, Prêtre et Docteur de l’Église (✝ 1597)",
    "saintPeterChanelPriestAndMartyrSaintLouisGrignonDeMontfortPriest": "Saint Pierre Chanel, Prêtre et Martyr (✝ 1841), ou Saint Louis-Marie Grignion de Montfort, Prêtre (✝ 1716)",
    "saintPeterChrysologusBishopAndDoctor": "Saint Pierre Chrysologue, Évêque de Ravenne et Docteur de l’Église (✝ 451)",
    "saintPeterClaverPriest": "Saint Pierre Claver, Prêtre Jésuite (✝ 1654)",
    "saintPeterDamianBishopAndDoctorOfTheChurch": "Saint Pierre Damien, Évêque d’Ostie, Docteur de l’Église (✝ 1072)",
    "saintPhilipNeriPriest": "Saint Philippe Néri, Prêtre (✝ 1595)",
    "saintPioOfPietrelcinaPadrePioPriest": "Saint Pio de Pietrelcina (Padre Pio), Prêtre Capucin (✝ 1968)",
    "saintPiusVPope": "Saint Pie V, Pape (✝ 1572)",
    "saintPiusXPope": "Saint Pie X, Pape (✝ 1914)",
    "saintPolycarpBishopAndMartyr": "Saint Polycarpe, Évêque et Martyre (✝ 167)",
    "saintPothinusBishopSaintBlAndinaVirginAndTheirCompanionsMartyrs": "Saint Pothin, Évêque, Sainte Blandine, Vierge, et leurs 46 compagnons, Martyrs à Lyon (✝ 177)",
    "saintRaymondOfPenyafortPriest": "Saint Raymond de Peñafort, Prêtre (✝ 1275)",
    "saintRemigiusBishop": "Saint Remi, Evêque de Reims (✝ 530)",
    "saintRitaOfCascia": "Sainte Rita da Cascia, Veuve puis Religieuse (✝ 1456)",
    "saintRobertBellarmineBishopAndDoctor": "Saint Robert Bellarmin, Jésuite, Évêque et Docteur de l’Eglise (✝ 1621)",
    "saintRomualdAbbot": "Saint Romuald, Anachorète et Père des moines Camaldules (✝ 1027)",
    "saintRoseOfLima": "Sainte Rose de Lima, Vierge (✝ 1617)",
    "saintsAugustineZhaoRongPriestAndCompanionsMartyrs": "Saints Augustin Zhao Rong et ses compagnons, Martyrs en Chine (entre 1648 et 1930)",
    "saintsBasilTheGreatAndGregoryNazianzenBishopsAndDoctors": "Saints Basile le Grand (✝ 379) et Grégoire de Naziance (✝ 390), Évêques et Docteurs de l’Église",
    "saintsCharlesLwangaAndCompanionsMartyrs": "Saints Charles Lwanga et ses douze compagnons, Martyrs (✝ 618)",
    "saintScholasticaVirgin": "Sainte Scolastique, Moniale, Sœur de Saint Benoît (✝ 543)",
    "saintsCorneliusPopeAndCyprianBishopMartyrs": "Saints Martyrs Corneille, Pape, et Cyprien, Évêque (3ème s.)",
    "saintsCosmasAndDamianMartyrs": "Saints Côme et Damien, Martyrs (3ème s.)",
    "saintsCyrilMonkAndMethodiusBishop": "Saints Cyrille, Moine, et Méthode, Évêque, Apôtres des Slaves au 9ème siècle, Copatrons de l’Europe",
    "saintsFabianPopeAndSebastianMartyrs": "Saint Fabien, Pape et Martyr (✝ 250), et Saint Sébastien, Martyr (✝ v. 284)",
    "saintSixtusIiPopeAndCompanionsMartyrsSaintCajetanPriest": "Saint Sixte II, Pape, et ses Diacres, Martyrs (✝ 258), ou Saint Gaétan de Thienne, Prêtre (✝ 1547)",
    "saintsJeanDeBrebeufAndIsaacJoguesPriestsAndCompanionsMartyrsSaintPaulOfTheCrossPriest": "Saints Jean de Brébeuf, Isaac Jogues, Prêtres Jésuites, et leurs compagnons, Martyrs (17ème siècle), ou Saint Paul de la Croix, Prêtre (✝ 1776)",
    "saintsJoachimAndAnne": "Saints Anne et Joachim, Mère et Père de la Vierge Marie (1er siècle)",
    "saintsJohnDeBrebeufIsaacJoguesPriestsAndCompanionsMartyrsSecondaryPatronsOfCanada": "Saints Jean de Brébeuf, Isaac Jogues, Prêtres Jésuites, et leurs compagnons, Martyrs, Seconds Patrons du Canada (17ème siècle)",
    "saintsMarcellinusAndPeterMartyrs": "Saints Martyrs Marcellin, Prêtre, et Pierre, Exorciste (✝ 304)",
    "saintsMichaelGabrielAndRaphaelArchangels": "Saints Michel, Gabriel and Raphaël, Archanges",
    "saintsNereusAndAchilleusMartyrsSaintPancrasMartyr": "Saints Nérée et Achillée, Martyrs à Rome (✝ v. 304), ou Saint Pancrace, Martyr à Rome (✝ v. 304)",
    "saintsPerpetuaAndFelicityMartyrs": "Saintes Perpétue et Félicité, Martyres à Carthage (✝ 203)",
    "saintsPhilipAndJamesApostles": "Saint Philippe et Saint Jacques le Mineur, Apôtres",
    "saintsPontianPopeAndHippolytusPriestMartyrs": "Saints Pontien, Pape, et Hippolyte, Prêtre de Rome, Martyrs (✝ 235)",
    "saintsSimonAndJudeApostles": "Saint Simon (le Zélote) et Saint Jude (Thaddée), Apôtres",
    "saintStanislausBishopAndMartyr": "Saint Stanislas, Evêque de Cracovie, Martyr (✝ 1079)",
    "saintStephenOfHungary": "Saint Etienne, Roi de Hongrie (✝ 1038)",
    "saintStephenTheFirstMartyr": "Saint Étienne, Diacre et Premier Martyr (✝ 35)",
    "saintsTimothyAndTitusBishops": "Saints Timothée et Tite, Évêques, Disciples et compagnons de Saint Paul (1er s.)",
    "saintSylvesterIPope": "Saint Sylvestre Ier, Pape (✝ 335)",
    "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr": "Sainte Thérèse-Bénédicte de la Croix (Edith Stein), Carmélite, Martyr en Pologne, Copatronne de l’Europe (✝ 1942)",
    "saintTeresaOfJesusVirginAndDoctorOfTheChurch": "Sainte Thérèse de Jésus (d’Avila), Vierge et Docteur de l’Église (✝ 1582)",
    "saintThereseOfTheChildJesusVirginAndDoctor": "Sainte Thérèse de l’Enfant-Jésus, Vierge et Docteur de l’Église (✝ 1897)",
    "saintThereseOfTheChildJesusVirginSecondaryPatronessOfFrance": "Sainte Thérèse de l’Enfant-Jésus, Docteur de l’Église, Seconde Patronne de la France (✝ 1897)",
    "saintThomasAquinasPriestAndDoctor": "Saint Thomas d’Aquin, Frère prêcheur, Docteur de l’Eglise (✝ 1274)",
    "saintThomasBecketBishopAndMartyr": "Saint Thomas Becket, Évêque et Martyr (✝ 1170)",
    "saintThomasTheApostle": "Saint Thomas, Apôtre",
    "saintTuribiusOfMogrovejoBishop": "Saint Alphonse Turibe de Mogrovejo, Évêque de Lima (✝ 1606)",
    "saintVincentDeaconAndMartyr": "Saint Vincent, Diacre et Martyr (✝ 304)",
    "saintVincentDePaulPriest": "Saint Vincent de Paul, Prêtre, Fondateur de la congrégation de la Mission et des Filles de la Charité (✝ 1660)",
    "saintVincentFerrerPriest": "Saint Vincent Ferrier, Prêtre de l’Ordre des Prêcheurs (✝ 1419)",
    "saintWenceslausMartyrSaintsLawrenceRuizAndCompanionsMartyrs": "Saint Venceslas, Martyr (✝ 929), ou Saints Laurent Ruiz et 15 compagnons, Martyrs à Nagasaki au Japon (✝ v. 1635)",
    "sevenHolyFoundersOfTheServiteOrder": "Saint Alexis Falconieri et les fondateurs des Servites (✝ 1310)",
    "shroveMonday": "Lundi gras",
    "shroveTuesday": "Mardi gras",
    "theBeheadingOfSaintJohnTheBaptistMartyr": "Martyre de Saint Jean-Baptiste",
    "theMostHolyNameOfJesus": "Saint Nom de Jésus",
    "visitationOfTheBlessedVirginMary": "Visitation de la Vierge Marie"
  }
};
exports["default"] = _default;
},{}],72:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "enCA", {
  enumerable: true,
  get: function get() {
    return _enCA["default"];
  }
});
Object.defineProperty(exports, "en", {
  enumerable: true,
  get: function get() {
    return _en["default"];
  }
});
Object.defineProperty(exports, "fr", {
  enumerable: true,
  get: function get() {
    return _fr["default"];
  }
});
Object.defineProperty(exports, "it", {
  enumerable: true,
  get: function get() {
    return _it["default"];
  }
});
Object.defineProperty(exports, "pl", {
  enumerable: true,
  get: function get() {
    return _pl["default"];
  }
});
Object.defineProperty(exports, "sk", {
  enumerable: true,
  get: function get() {
    return _sk["default"];
  }
});

var _enCA = _interopRequireDefault(require("./en-CA"));

var _en = _interopRequireDefault(require("./en"));

var _fr = _interopRequireDefault(require("./fr"));

var _it = _interopRequireDefault(require("./it"));

var _pl = _interopRequireDefault(require("./pl"));

var _sk = _interopRequireDefault(require("./sk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
},{"./en":70,"./en-CA":69,"./fr":71,"./it":73,"./pl":74,"./sk":75}],73:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _default = {
  "advent": {
    "season": "Avvento",
    "feria": "{{day}} della {{week}} settimana di Avvento",
    "sunday": "{{week}} Domenica di Avvento"
  },
  "christmastide": {
    "season": "Natale",
    "day": "{{day}} di Natale",
    "octave": "{{count}} giorno dell'Ottava di Natale",
    "sunday": "{{count}} Domenica di Natale"
  },
  "epiphany": {
    "season": "Epifania",
    "before": "{{day}} prima dell'Epifania",
    "after": "{{day}} dopo l'Epifania"
  },
  "ordinaryTime": {
    "season": "Tempo Ordinario",
    "feria": "{{day}} della {{week}} settimana del Tempo Ordinario",
    "sunday": "{{week}} Domenica del Tempo Ordinario"
  },
  "lent": {
    "season": "Quaresima",
    "feria": "{{day}} della {{week}} settimana di Quaresima",
    "sunday": "{{week}} Domenica di Quaresima",
    "day_after_ash_wed": "{{day}} dopo Mercoledí delle Ceneri"
  },
  "holyWeek": {
    "season": "Settimana Santa",
    "feria": "{{day}} della Settimana Santa"
  },
  "eastertide": {
    "season": "Pasqua",
    "feria": "{{day}} della {{week}} settimana di Pasqua",
    "sunday": "{{week}} Domenica di Pasqua",
    "octave": "{{day}} di Pasqua"
  },
  "celebrations": {
    "allSaints": "Tutti i Santi",
    "annunciation": "Annunciazione del Signore",
    "ascension": "Ascensione del Signore",
    "ashWednesday": "Mercoledí delle Ceneri",
    "assumption": "Assunzione della Beata Vergine Maria",
    "baptismOfTheLord": "Battesimo del Signore",
    "birthOfJohnTheBaptist": "Nativitá di San Giovanni Battista",
    "christmas": "Natale del Signore",
    "christTheKing": "Cristo Re dell'universo",
    "corpusChristi": "Santissimo Corpo e Sangue di Cristo",
    "divineMercySunday": "2º Domenica di Pasqua / Divina Misericordia",
    "easter": "Domenica di Pasqua",
    "epiphany": "Epifania del Signore",
    "goodFriday": "Venerdí Santo",
    "holyFamily": "Santa Famiglia di Gesú, Maria e Giuseppe",
    "holySaturday": "Sabato Santo / Vigilia di Pasqua",
    "holyThursday": "Giovedí Santo",
    "immaculateConception": "Immacolata Concezione della Beata Vergine Maria",
    "immaculateHeartOfMary": "Cuore Immacolato della Beata Vergine Maria",
    "josephHusbandOfMary": "San Giuseppe, sposo della Beata Vergine Maria",
    "maryMotherOfGod": "Maria Santissima Madre di Dio",
    "palmSunday": "Domenica delle Palme",
    "pentecostSunday": "Domenica di Pentecoste",
    "peterAndPaulApostles": "Santi Pietro e Paolo, apostoli",
    "presentationOfTheLord": "Presentazione del Signore",
    "sacredHeartOfJesus": "Sacratissimo Cuore di Gesù",
    "theExaltationOfTheHolyCross": "Esaltazione della Santa Croce",
    "transfiguration": "Trasfigurazione del Signore",
    "trinitySunday": "Santissima Trinitá"
  },
  "sanctoral": {
    "allSouls": "Commemorazione di tutti i fedeli defunti",
    "birthOfTheBlessedVirginMary": "Nativitá della Beata Vergine Maria",
    "chairOfSaintPeterApostle": "Cattedra di San Pietro apostolo",
    "conversionOfSaintPaulApostle": "Conversione di San Paolo apostolo",
    "dedicationOfTheBasilicaOfSaintMaryMajor": "Dedicazione della Basilica di Santa Maria Maggiore",
    "dedicationOfTheBasilicasOfSaintsPeterAndPaulApostles": "Dedicazione delle Basiliche dei Santi Pietro e Paolo apostoli",
    "dedicationOfTheLateranBasilica": "Dedicazione della basilica Lateranense",
    "firstMartyrsOfTheChurchOfRome": "Santi Primi Martiri della Chiesa Romana",
    "guardianAngels": "Santi Angeli Custodi",
    "holyInnocentsMartyrs": "Santi Innocenti, martiri",
    "holyNameOfTheBlessedVirginMary": "Santissimo Nome di Maria",
    "maryMotherOfTheChurch": "Beata Vergine Maria Madre della Chiesa",
    "ourLadyOfFatima": "Beata Vergine Maria di Fatima",
    "ourLadyOfGuadalupe": "Beata Vergine Maria di Guadalupe",
    "ourLadyOfLourdes": "Beata Vergine Maria di Lourdes",
    "ourLadyOfMountCarmel": "Beata Vergine Maria del Carmelo",
    "ourLadyOfSorrows": "Beata Vergine Maria Addolorata",
    "ourLadyOfTheRosary": "Beata Vergine Maria del Rosario",
    "popeSaintJohnPaulII": "San Giovanni Paolo II, papa",
    "popeSaintJohnXXIII": "San Giovanni XXIII, papa",
    "presentationOfTheBlessedVirginMary": "Presentazione della Beata Vergine Maria",
    "queenshipOfBlessedVirginMary": "Beata Vergine Maria regina",
    "saintAgathaVirginAndMartyr": "Sant'Agata, vergine e martire",
    "saintAgnesVirginAndMartyr": "Sant'Agnese, vergine e martire",
    "saintAlbertTheGreatBishopAndDoctor": "Sant'Alberto Magno, vescovo e dottore della Chiesa",
    "saintAloysiusGonzagaReligious": "San Luigi Gonzaga, religioso",
    "saintAlphonsusMariaDeLiguoriBishopAndDoctorOfTheChurch": "Sant'Alfonso Maria de Liguori, vescovo e dottore della Chiesa",
    "saintAmbroseBishopAndDoctor": "Sant'Ambrogio, vescovo e dottore della Chiesa",
    "saintAndrewDungLacAndCompanionsMartyrs": "Santi Andrea Dung-Lac, sacerdote e compagni, martiri",
    "saintAndrewKimTaegonPriestAndPaulChongHasangAndCompanionsMartyrs": "Sant Andrea Kim Taegon, Paolo Chong Hasang e compagni, martiri",
    "saintAndrewTheApostle": "Sant'Andrea, apostolo",
    "saintAngelaMericiVirgin": "Sant'Angela Merici, vergine",
    "saintAnselmOfCanterburyBishopAndDoctorOfTheChurch": "Sant'Anselmo, vescovo e dottore della Chiesa",
    "saintAnthonyMaryClaretBishop": "Sant'Antonio Marla Claret, vescovo",
    "saintAnthonyOfEgyptAbbot": "Sant'Antonio, abate",
    "saintAnthonyOfPaduaPriestAndDoctor": "Sant'Antonio di Padova, sacerdote e dottore della Chiesa",
    "saintAnthonyZaccariaPriest": "Sant'Antonio Maria Zaccaria, sacerdote",
    "saintApollinaris": "Sant'Apollinare, vescovo e martire",
    "saintAthanasiusBishopAndDoctor": "Sant'Atanasio, vescovo e dottore della Chiesa",
    "saintAugustineOfCanterburyBishop": "Sant'Agostino di Canterbury, vescovo",
    "saintAugustineOfHippoBishopAndDoctorOfTheChurch": "Sant'Agostino, vescovo e dottore della Chiesa",
    "saintBarnabasTheApostle": "San Barnaba, apostolo",
    "saintBartholomewTheApostle": "San Bartolomeo, apostolo",
    "saintBedeTheVenerablePriestAndDoctorSaintGregoryViiPopeSaintMaryMagdaleneDePazziVirgin": "San Beda Venerabile, sacerdote e dottore della Chiesa / San Gregorio VII, papa / Santa Maria Maddalena de’ Pazzi, vergine",
    "saintBenedictOfNursiaAbbot": "San Benedetto, abate, patrono d'Europa",
    "saintBernardineOfSienaPriest": "San Bernardino da Siena, sacerdote",
    "saintBernardOfClairvauxAbbotAndDoctorOfTheChurch": "San Bernardo, abate e dottore della Chiesa",
    "saintBlaseBishopAndMartyrSaintAnsgarBishop": "San Biagio, vescovo e martire / Sant’Ansgario, vescovo",
    "saintBonaventureBishopAndDoctor": "San Bonaventura, vescovo e dottore della Chiesa",
    "saintBonifaceBishopAndMartyr": "San Bonifacio, vescovo e martire",
    "saintBridgetOfSwedenReligious": "Santa Brigida, religiosa, patrona d'Europa",
    "saintBrunoPriest": "San Bruno, sacerdote",
    "saintCallistusIPopeAndMartyr": "San Callisto I, papa e martire",
    "saintCamillusDeLellisPriest": "San Camillo de Lellis, sacerdote",
    "saintCasimir": "San Casimiro",
    "saintCatherineOfAlexandriaVirginAndMartyr": "Santa Caterina di Alessandria, vergine e martire",
    "saintCatherineOfSienaVirginAndDoctorOfTheChurch": "Santa Caterina da Siena, vergine e dottore della Chiesa, patrona d'Italia e d'Europa",
    "saintCeciliaVirginAndMartyr": "Santa Cecilia, vergine e martire",
    "saintCharlesBorromeoBishop": "San Carlo Borromeo, vescovo",
    "saintChristopherMagallanesAndCompanionsMartyrs": "Santi Cristoforo Magallanes, sacerdote, e compagni, martiri",
    "saintClareVirgin": "Santa Chiara, vergine",
    "saintClementIPopeAndMartyrSaintColumbanReligious": "San Clemente I, papa e martire / San Colombano, abate",
    "saintCyrilOfAlexandriaBishopAndDoctor": "San Cirillo di Alessandria, vescovo e dottore della Chiesa",
    "saintCyrilOfJerusalemBishopAndDoctor": "San Cirillo di Gerusalemme, vescovo e dottore della Chiesa",
    "saintDamasusIPope": "San Damaso I, papa",
    "saintDenisAndCompanionsMartyrsSaintJohnLeonardiPriest": "San Dionigi, vescovo e compagni, martiri / San Giovanni Leonardi, sacerdote",
    "saintDominicPriest": "San Domenico, sacerdote",
    "saintElizabethOfHungary": "Sant'Elisabetta di Ungheria, religiosa",
    "saintElizabethOfPortugal": "Santa Elisabetta di Portogallo",
    "saintEphremDeaconAndDoctor": "Sant’Efrem, diacono e dottore della Chiesa",
    "saintEusebiusOfVercelliBishopSaintPeterJulianEymardPriest": "Sant'Eusebio di Vercelli, vescovo / San Pietro Giuliano Eymard, sacerdote",
    "saintFidelisOfSigmaringenPriestAndMartyr": "San Fedele da Sigmaringen, sacerdote e martire ",
    "saintFrancesOfRomeReligious": "Santa Francesca Romana, religiosa",
    "saintFrancisDeSalesBishopAndDoctor": "San Francesco di Sales, vescovo e dottore della Chiesa",
    "saintFrancisOfAssisi": "San Francesco d'Assisi, patrono d'Italia",
    "saintFrancisOfPaolaHermit": "San Francesco da Paola, eremita",
    "saintFrancisXavierPriest": "San Francesco Saverio, sacerdote",
    "saintGeorgeMartyrSaintAdalbertBishopAndMartyr": "San Giorgio, martire / Sant'Adalberto, vescovo e martire",
    "saintGregoryTheGreatPopeAndDoctor": "San Gregorio Magno, papa e dottore della Chiesa",
    "saintHedwigReligiousSaintMargaretMaryAlacoqueVirgin": "Santa Edvige, religiosa / Santa Margherita Maria Alacoque, vergine",
    "saintHenryBishopAndMartyr": "Sant'Enrico",
    "saintHilaryOfPoitiersBishopAndDoctor": "Sant’Ilario, vescovo e dottore della Chiesa",
    "saintIgnatiusOfAntiochBishopAndMartyr": "Sant'Ignazio di Antiochia, vescovo e martire",
    "saintIgnatiusOfLoyolaPriest": "Sant'Ignazio di Loyola, sacerdote",
    "saintIrenaeusBishopAndMartyr": "Sant'Ireneo, vescovo e martire",
    "saintIsidoreOfSevilleBishopAndDoctorOfTheChurch": "Sant'Isidoro, vescovo e dottore della Chiesa",
    "saintJamesApostle": "San Giacomo, apostolo",
    "saintJaneFrancesDeChantalReligious": "Santa Giovanna Francesca de Chantal, religiosa",
    "saintJanuariusBishopAndMartyr": "San Gennaro, vescovo e martire",
    "saintJeanVianneyTheCureOfArsPriest": "San Giovanni Maria Vianney, sacerdote",
    "saintJeromeEmilianiSaintJosephineBakhitaVirgin": "San Girolamo Emiliani / Santa Giuseppina Bakhita, vergine",
    "saintJeromePriestAndDoctor": "San Girolamo, sacerdote e dottore della Chiesa",
    "saintJohnBaptistDeLaSallePriest": "San Giovanni Battista de La Salle, sacerdote",
    "saintJohnBoscoPriest": "San Giovanni Bosco, sacerdote",
    "saintJohnChrysostomBishopAndDoctor": "San Giovanni Crisostomo, vescovo e dottore della Chiesa",
    "saintJohnDamascenePriestAndDoctor": "San Giovanni Damasceno, sacerdote e dottore della Chiesa",
    "saintJohnEudesPriest": "San Giovanni Eudes, sacerdote",
    "saintJohnIPopeAndMartyr": "San Giovanni I, papa e martire",
    "saintJohnOfCapistranoPriest": "San Giovanni da Capestrano, sacerdote",
    "saintJohnOfGodReligious": "San Giovanni di Dio, religioso",
    "saintJohnOfKantyPriest": "San Giovanni da Keti, sacerdote",
    "saintJohnOfTheCrossPriestAndDoctor": "San Giovanni della Croce, sacerdote e dottore della Chiesa",
    "saintJohnTheApostleAndEvangelist": "San Giovanni, apostolo ed evangelista",
    "saintJosaphatBishopAndMartyr": "San Giosafat, vescovo e martire",
    "saintJosephTheWorker": "San Giuseppe lavoratore",
    "saintJuanDiegoCuauhtlatoatzin": "San Giovanni Diego Cuauhtlatoatzin",
    "saintJustinMartyr": "San Giustino, martire",
    "saintLawrenceOfBrindisiPriestAndDoctor": "San Lorenzo da Brindisi, sacerdote e dottore della Chiesa",
    "saintLawrenceOfRomeDeaconAndMartyr": "San Lorenzo, diacono e martire",
    "saintLeoTheGreatPopeAndDoctor": "San Leone Magno, papa e dottore della Chiesa",
    "saintLouisSaintJosephOfCalasanzPriest": "San Ludovico / San Giuseppe Calasanzio, sacerdote",
    "saintLucyOfSyracuseVirginAndMartyr": "Santa Lucia, vergine e martire",
    "saintLukeTheEvangelist": "San Luca, evangelista",
    "saintMargaretOfScotlandSaintGertrudeTheGreatVirgin": "Santa Margherita di Scozia / Santa Geltrude, vergine",
    "saintMariaGorettiVirginAndMartyr": "Santa Maria Goretti, vergine e martire",
    "saintMarkTheEvangelist": "San Marco, evangelista",
    "saintMartha": "Santa Marta",
    "saintMartinDePorresReligious": "San Martino di Porres, religioso",
    "saintMartinIPopeAndMartyr": "San Martino I, papa e martire",
    "saintMartinOfToursBishop": "San Martino di Tours, vescovo",
    "saintMaryMagdalene": "Santa Maria Maddalena",
    "saintMatthewApostleAndEvangelist": "San Matteo, apostolo ed evangelista",
    "saintMatthiasTheApostle": "San Mattia, apostolo",
    "saintMaximilianMaryKolbePriestAndMartyr": "San Massimiliano Maria Kolbe, sacerdote e martire",
    "saintMonica": "Santa Monica",
    "saintNicholasBishop": "San Nicola, vescovo",
    "saintNorbertBishop": "San Norberto, vescovo",
    "saintPatrickBishop": "San Patrizio, vescovo",
    "saintPaulinusOfNolaBishopSaintsJohnFisherBishopAndThomasMoreMartyrs": "San Paolino di Nola, vescovo / Santi Giovanni Fisher, vescovo e Tommaso More, martiri",
    "saintPaulMikiAndCompanionsMartyrs": "San Paolo Miki sacerdote e compagni, martiri",
    "saintPeterCanisiusPriestAndDoctor": "San Pietro Canisio, sacerdote e dottore della Chiesa",
    "saintPeterChanelPriestAndMartyrSaintLouisGrignonDeMontfortPriest": "San Pietro Chanel, sacerdote e martire / San Luigi Maria Grignion de Montfort, sacerdote",
    "saintPeterChrysologusBishopAndDoctor": "San Pietro Crisologo, vescovo e dottore della Chiesa",
    "saintPeterClaverPriest": "San Pietro Claver, sacerdote",
    "saintPeterDamianBishopAndDoctorOfTheChurch": "San Pier Damiani, vescovo e dottore della Chiesa",
    "saintPhilipNeriPriest": "San Filippo Neri, sacerdote",
    "saintPioOfPietrelcinaPadrePioPriest": "San Pio da Pietrelcina, sacerdote",
    "saintPiusVPope": "San Pio V, papa",
    "saintPiusXPope": "San Pio X, papa",
    "saintPolycarpBishopAndMartyr": "San Policarpo, vescovo e martire",
    "saintRaymondOfPenyafortPriest": "San Raimondo di Peñafort, sacerdote",
    "saintRitaOfCascia": "Santa Rita da Cascia, religiosa",
    "saintRobertBellarmineBishopAndDoctor": "San Roberto Bellarmino, vescovo e dottore della Chiesa",
    "saintRomualdAbbot": "San Romualdo, abate",
    "saintRoseOfLima": "Santa Rosa da Lima, vergine",
    "saintsAugustineZhaoRongPriestAndCompanionsMartyrs": "Santi Agostino Zhao Rong, sacerdote, e compagni, martiri",
    "saintsBasilTheGreatAndGregoryNazianzenBishopsAndDoctors": "Santi Basilio Magno e Gregorio Nazianzeno, vescovi e dottori della Chiesa",
    "saintsCharlesLwangaAndCompanionsMartyrs": "San Carlo Lwanga e compagni, martiri",
    "saintScholasticaVirgin": "Santa Scolastica, vergine",
    "saintsCorneliusPopeAndCyprianBishopMartyrs": "Santi Cornelio, papa e Cipriano, vescovo, martiri",
    "saintsCosmasAndDamianMartyrs": "Santi Cosma e Damiano, martiri",
    "saintsCyrilMonkAndMethodiusBishop": "Santi Cirillo, monaco e Metodio, vescovo, patroni d'Europa",
    "saintsFabianPopeAndSebastianMartyrs": "San Fabiano, papa, e San Sebastiano, martire",
    "saintCharbelMakhloufPriestAndHermit": "San Charbel Makhluf, sacerdote",
    "saintSixtusIiPopeAndCompanionsMartyrsSaintCajetanPriest": "San Sisto II, papa e compagni, martiri / San Gaetano, sacerdote",
    "saintsJeanDeBrebeufAndIsaacJoguesPriestsAndCompanionsMartyrsSaintPaulOfTheCrossPriest": "Santi Giovanni de Brébeuf e Isacco Jogues, sacerdoti e compagni, martiri / San Paolo della Croce, sacerdote",
    "saintsJoachimAndAnne": "Santi Gioacchino e Anna, genitori della Beata Vergine Maria",
    "saintsMarcellinusAndPeterMartyrs": "Santi Marcellino e Pietro, martiri",
    "saintsMichaelGabrielAndRaphaelArchangels": "Santi Arcangeli Michele, Gabriele e Raffaele",
    "saintsNereusAndAchilleusMartyrsSaintPancrasMartyr": "Santi Nereo e Achilleo, martiri / San Pancrazio, martire",
    "saintsPerpetuaAndFelicityMartyrs": "Sante Perpetua e Felicita, martiri",
    "saintsPhilipAndJamesApostles": "Santi Filippo e Giacomo, apostoli",
    "saintsPontianPopeAndHippolytusPriestMartyrs": "Santi Ponziano, papa e Ippolito, sacerdote, martiri",
    "saintsSimonAndJudeApostles": "Santi Simone e Giuda, apostoli",
    "saintStanislausBishopAndMartyr": "Santo Stanislao, vescovo e martire",
    "saintStephenOfHungary": "Santo Stefano di Ungheria",
    "saintStephenTheFirstMartyr": "Santo Stefano, primo martire",
    "saintsTimothyAndTitusBishops": "Santi Timoteo e Tito, vescovi",
    "saintSylvesterIPope": "San Silvestro I, papa",
    "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr": "Santa Teresa Benedetta della Croce, vergine e martire, patrona d'Europa",
    "saintTeresaOfJesusVirginAndDoctorOfTheChurch": "Santa Teresa d'Avila, vergine e dottore della Chiesa",
    "saintThereseOfTheChildJesusVirginAndDoctor": "Santa Teresa di Gesu' Bambino, vergine e dottore della Chiesa",
    "saintThomasAquinasPriestAndDoctor": "San Tommaso d'Aquino, sacerdote e dottore della Chiesa",
    "saintThomasBecketBishopAndMartyr": "San Tommaso Becket, vescovo e martire",
    "saintThomasTheApostle": "San Tommaso, apostolo",
    "saintTuribiusOfMogrovejoBishop": "San Turibio de Mogrovejo, vescovo",
    "saintVincentDeaconAndMartyr": "San Vincenzo, diacono e martire",
    "saintVincentDePaulPriest": "San Vincenzo de' Paoli, sacerdote",
    "saintVincentFerrerPriest": "San Vincenzo Ferrer, sacerdote",
    "saintWenceslausMartyrSaintsLawrenceRuizAndCompanionsMartyrs": "San Venceslao, martire / Santi Lorenzo Ruiz e compagni, martiri",
    "sevenHolyFoundersOfTheServiteOrder": "Santi Sette Fondatori dei Servi della Beata Vergine Maria",
    "theBeheadingOfSaintJohnTheBaptistMartyr": "Martirio di San Giovanni Battista",
    "theMostHolyNameOfJesus": "Santissimo Nome di Gesú",
    "visitationOfTheBlessedVirginMary": "Visitazione della Beata Vergine Maria"
  }
};
exports["default"] = _default;
},{}],74:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _default = {
  "advent": {
    "season": "Adwentu",
    "feria": "{{day}} {{week}} tygodnia Adwentu",
    "sunday": "{{week}} Niedziela Adwentu"
  },
  "christmastide": {
    "season": "Narodzenia Pańskiego",
    "day": "{{day}} boże Narodzenie",
    "octave": "{{count}} dzień w oktawie Narodzenia Pańskiego",
    "sunday": "{{count}} Niedziela po Narodzeniu Pańskim"
  },
  "epiphany": {
    "season": "Objawienie Pańskie",
    "before": "{{day}} przed Objawieniem Pańskim",
    "after": "{{day}} po Objawieniu Pańskim"
  },
  "ordinaryTime": {
    "season": "Zwykła",
    "feria": "{{day}} {{week}} tygodnia zwykłego",
    "sunday": "{{week}} Niedziela zwykła"
  },
  "lent": {
    "season": "Postu",
    "feria": "{{day}} {{week}} tygodnia Wielkiego Postu",
    "sunday": "{{week}} Niedziela Wielkiego Postu",
    "day_after_ash_wed": "{{day}} po Popielcu"
  },
  "holyWeek": {
    "season": "Wielki Tydzień",
    "feria": "{{day}} wielkiego tygodnia"
  },
  "eastertide": {
    "season": "Wielkanoc",
    "feria": "{{day}} {{week}} tygodnia wielkanocnego",
    "sunday": "{{week}} Niedziela Wielkanocna",
    "octave": "{{day}} w oktawie Wielkanocy"
  },
  "celebrations": {
    "allSaints": "Wszystkich Świętych",
    "annunciation": "Zwiastowanie Pańskie",
    "ascension": "Wniebowstąpienie Pańskie",
    "ashWednesday": "Środa popielcowa",
    "assumption": "Wniebowzięcie Najświętszej Maryi Panny",
    "baptismOfTheLord": "Chrzest Pański",
    "birthOfJohnTheBaptist": "Narodzenie św. Jana Chrzciciela",
    "christmas": "Narodzenie Pańskie",
    "christTheKing": "Jezusa Chrystusa Króla Wszechświata",
    "corpusChristi": "Najświętszego Ciała i Krwi Chrystusa",
    "divineMercySunday": "2 Niedziela Wielkanocna czyli Miłosierdzia Bożego",
    "easter": "Niedziela Wielkanocna Zmartwychwstania Pańskiego",
    "epiphany": "Objawienie Pańskie",
    "goodFriday": "Wielki Piątek",
    "holyFamily": "Świętej Rodziny Jezusa, Maryi i Józefa",
    "holySaturday": "Wielka Sobota",
    "holyThursday": "Wielki Czwartek",
    "immaculateConception": "Niepokalane Poczęcie Najświętszej Maryi Panny",
    "immaculateHeartOfMary": "Niepokalanego Serca Najświętszej Maryi Panny",
    "josephHusbandOfMary": "Św. Józefa, Oblubieńca Najświętszej Maryi Panny",
    "maryMotherOfGod": "Świętej Bożej Rodzicielki Maryi",
    "palmSunday": "Niedziela Palmowa Męki Pańskiej",
    "pentecostSunday": "Niedziela Zesłania Ducha Świętego",
    "peterAndPaulApostles": "Świętych Apostołów Piotra i Pawła",
    "presentationOfTheLord": "Ofiarowanie Pańskie",
    "sacredHeartOfJesus": "Najświętszego Serca Pana Jezusa",
    "theExaltationOfTheHolyCross": "Podwyższenie Krzyża Świętego",
    "transfiguration": "Przemienienie Pańskie",
    "trinitySunday": "Niedziela Najświętszej Trójcy"
  },
  "sanctoral": {
    "allSouls": "Wspomnienie wszystkich wiernych zmarłych",
    "birthOfTheBlessedVirginMary": "Narodzenie Najświętszej Maryi Panny",
    "blessedAnielaSalawaVirgin": "Bł. Anieli Salawy, dziewicy",
    "blessedAntoniNowowiejskiBishopAndCompanionsMartyrs": "Błogosławionych męczenników Antoniego Juliana Nowowiejskiego, biskupa, i Towarzyszy",
    "blessedBogumilBishop": "Bł. Bogumiła, biskupa",
    "blessedBoleslawaMariaLamentVirginAndSaintAngelaMericiVirgin": "Bł. Bolesławy Marii Lament, dziewicy",
    "blessedBronislawaVirgin": "Bł. Bronisławy, dziewicy",
    "blessedCzeslawPriest": "Bł. Czesława, prezbitera",
    "blessedEdmundBojanowski": "Bł. Edmunda Bojanowskiego",
    "blessedHonoratKozminskiPriest": "Bł. Honorata Koźmińskiego, prezbitera",
    "blessedJakubStrzemieBishop": "Bł. Jakuba Strzemię, biskupa",
    "blessedJerzyMatulewiczBishop": "Bł. Jerzego Matulewicza, biskupa",
    "blessedJohnBeyzymPriest": "Bł. Jana Beyzyma, prezbitera",
    "blessedJohnMartinMoyePriest": "Bł. Jana Marcina Moyego, Kapłana",
    "blessedJolantaReligious": "Bł. Jolanty, zakonnicy",
    "blessedKarolinaKozkownaVirginAndMartyr": "Bł. Karoliny Kózkówny, dziewicy i męczennicy",
    "blessedMariaAssuntaPallottaVirgin": "Bł. Marii Assunty Pallotty, Dziewicy",
    "blessedMariaStellaAndCompanionsVirginsAndMartyrs": "Błogosławionych dziewic i męczennic Marii Stelli i Towarzyszek",
    "blessedMariaTeresaLedochowskaVirgin": "Bł. Marii Teresy Ledóchowskiej, dziewicy",
    "blessedMaryAngelaTruszkowskaVirgin": "Bł. Marii Angeli Truszkowskiej, dziewicy",
    "blessedMaryOfJesusTheGoodShepherdVirgin": "Bł. Marii od Pana Jezusa Dobrego Pasterza (Franciszki Siedliskiej), zakonnicy",
    "blessedMauriceTornayPriestAndMartyr": "Bł. Maurycego Tornaya, Kapłana i Męczennika",
    "blessedMichaelKozalBishopAndMartyr": "Bł. Michała Kozala, biskupa i męczennika",
    "blessedOdoricOfPordenonePriest": "Bł. Odoryka z Pordenone, Kapłana",
    "blessedRafalChylinskiPriest": "Bł. Rafała Chylińskiego, prezbitera",
    "blessedSalomeVirgin": "Bł. Salomei, zakonnicy",
    "blessedVincentKadlubekBishop": "Bł. Wincentego Kadłubka, biskupa",
    "blessedVincentLewoniukAndCompanionsMartyrsOfPratulin": "Błogosławionych męczenników Wincentego Lewoniuka i Towarzyszy",
    "blessedWladyslawOfGielniowPriest": "Bł. Władysława z Gielniowa, prezbitera",
    "chairOfSaintPeterApostle": "Katedry św. Piotra, Apostoła",
    "conversionOfSaintPaulApostle": "Nawrócenie św. Pawła, Apostoła",
    "dedicationOfTheBasilicaOfSaintMaryMajor": "Rocznica poświęcenia rzymskiej Bazyliki Najświętszej Maryi Panny",
    "dedicationOfTheBasilicasOfSaintsPeterAndPaulApostles": "Rocznica poświęcenia rzymskich bazylik świętych apostołów Piotra i Pawła",
    "dedicationOfTheLateranBasilica": "Rocznica poświęcenia Bazyliki Laterańskiej",
    "firstMartyrsOfTheChurchOfRome": "Świętych Pierwszych Męczenników Św. Kościoła Rzymskiego",
    "guardianAngels": "Świętych Aniołów Stróżów",
    "holyInnocentsMartyrs": "Św. Młodzianków, męczenników",
    "holyNameOfTheBlessedVirginMary": "Najświętszego Imienia Maryi",
    "maryMotherOfTheChurch": "Najświętszej Maryi Panny, Matki Kościoła",
    "ourLadyOfChina": "Najświętszej Maryi Panny z Chin",
    "ourLadyOfCzestochowa": "Najświętszej Maryi Panny Częstochowskiej",
    "ourLadyOfFatima": "Najświętszej Maryi Panny z Fatimy",
    "ourLadyOfGuadalupe": "Najświętszej Maryi Panny z Guadalupe",
    "ourLadyOfLoreto": "Najświętszej Maryi Panny Loretańskiej",
    "ourLadyOfLourdes": "Najświętszej Maryi Panny z Lourdes",
    "ourLadyOfMountCarmel": "Najświętszej Maryi Panny z Góry Karmel",
    "ourLadyOfSorrows": "Najświętszej Maryi Panny Bolesnej",
    "ourLadyOfTheRosary": "Najświętszej Maryi Panny Różańcowej",
    "ourLordJesusChristTheEternalHighPriest": "Jezusa Chrystusa, Najwyższego i Wiecznego Kapłana",
    "popeSaintJohnPaulII": "Św. Jana Pawła II, papieża",
    "popeSaintJohnXXIII": "Św. Jana XXIII, papieża",
    "presentationOfTheBlessedVirginMary": "Ofiarowanie Najświętszej Maryi Panny",
    "queenshipOfBlessedVirginMary": "Najświętszej Maryi Panny, Królowej",
    "saintAdalbertBishopAndMartyr": "Św. Wojciecha, biskupa i męczennika, głównego patrona Polski",
    "saintAgathaVirginAndMartyr": "Św. Agaty, dziewicy i męczennicy",
    "saintAgnesCaoGuiyingMartyr": "Św. Agnieszki Cao Guiying, Męczennicy",
    "saintAgnesVirginAndMartyr": "Św. Agnieszki, dziewicy i męczennicy",
    "saintAlbericCrescitelliPriestAndMartyr": "Św. Alberyka Crescitellego, Kapłana i Męczennika",
    "saintAlbertChmielowskiReligious": "Św. Brata Alberta Chmielowskiego, zakonnika",
    "saintAlbertTheGreatBishopAndDoctor": "Św. Alberta Wielkiego, biskupa i doktora Kościoła",
    "saintAloysiusGonzagaReligious": "Św. Alojzego Gonzagi, zakonnika",
    "saintAlphonsusMariaDeLiguoriBishopAndDoctorOfTheChurch": "Św. Alfonsa Marii Liguoriego, biskupa i doktora Kościoła",
    "saintAmbroseBishopAndDoctor": "Św. Ambrożego, biskupa i doktora Kościoła",
    "saintAndrewBobolaPriestAndMartyr": "Św. Andrzeja Boboli, prezbitera i męczennika",
    "saintAndrewDungLacAndCompanionsMartyrs": "Świętych męczenników Andrzeja Dung-Lac, prezbitera, i Towarzyszy",
    "saintAndrewKimTaegonPriestAndPaulChongHasangAndCompanionsMartyrs": "Świętych męczenników Andrzeja Kim Taegon, prezbitera, Pawła Chong Hasang i Towarzyszy",
    "saintAndrewTheApostle": "Św. Andrzeja, Apostoła",
    "saintAngelaMericiVirgin": "Św. Anieli Merici, dziewicy",
    "saintAnselmOfCanterburyBishopAndDoctorOfTheChurch": "Św. Anzelma, biskupa i doktora Kościoła",
    "saintAnthonyMaryClaretBishop": "Św. Antoniego Marii Clareta, biskupa",
    "saintAnthonyOfEgyptAbbot": "Św. Antoniego, opata",
    "saintAnthonyOfPaduaPriestAndDoctor": "Św. Antoniego z Padwy, prezbitera i doktora Kościoła",
    "saintAnthonyZaccariaPriest": "Św. Antoniego Marii Zaccarii, prezbitera",
    "saintApollinaris": "Św. Apolinarego, biskupa i męczennika",
    "saintAthanasiusBishopAndDoctor": "Św. Atanazego, biskupa i doktora Kościoła",
    "saintAugustineOfCanterburyBishop": "Św. Augustyna z Canterbury, biskupa",
    "saintAugustineOfHippoBishopAndDoctorOfTheChurch": "Św. Augustyna, biskupa i doktora Kościoła",
    "saintAugustineZhaoRongPriestAndCompanionsMartyrs": "Świętych męczenników Augustyna Zhao Rong, Kapłana i Towarzyszy",
    "saintAugustineZhaoRongPriestAndMartyr": "Św. Augustyna Zhao Rong, Kapłana i Męczennika",
    "saintBarbaraVirginAndMartyr": "Św. Barbary, dziewicy i męczennicy",
    "saintBarnabasTheApostle": "Św. Barnaby, Apostoła",
    "saintBartholomewTheApostle": "Św. Bartłomieja, Apostoła",
    "saintBedeTheVenerablePriestAndDoctorSaintGregoryViiPopeSaintMaryMagdaleneDePazziVirgin": "Św. Bedy Czcigodnego, prezbitera i doktora Kościoła/Św. Grzegorza VII, papieża/Św. Marii Magdaleny de Pazzi, dziewicy",
    "saintBenedictOfNursiaAbbot": "Św. Benedykta, opata, patrona Europy",
    "saintBernardineOfSienaPriest": "Św. Bernardyna ze Sieny, prezbitera",
    "saintBernardOfClairvauxAbbotAndDoctorOfTheChurch": "Św. Bernarda, opata i doktora Kościoła",
    "saintBlaseBishopAndMartyrSaintAnsgarBishop": "Św. Błażeja, biskupa i męczennika/Św. Ansgara, biskupa",
    "saintBonaventureBishopAndDoctor": "Św. Bonawentury, biskupa i doktora Kościoła",
    "saintBonifaceBishopAndMartyr": "Św. Bonifacego, biskupa i męczennika",
    "saintBridgetOfSwedenReligious": "Św. Brygidy, zakonnicy, patronki Europy",
    "saintBrunoBonifaceOfQuerfurtBishopAndMartyr": "Św. Brunona Bonifacego z Kwerfurtu, biskupa i męczennika",
    "saintBrunoPriest": "Św. Brunona, prezbitera",
    "saintCallistusIPopeAndMartyr": "Św. Kaliksta I, papieża i męczennika",
    "saintCamillusDeLellisPriest": "Św. Kamila de Lellis, prezbitera",
    "saintCamillusDeLellisPriestOrSaintHenryBishopAndMartyr": "Św. Kamila de Lellis, prezbitera/Św. Henryka",
    "saintCasimir": "Św. Kazimierza",
    "saintCatherineOfAlexandriaVirginAndMartyr": "Św. Katarzyny Aleksandryjskiej, dziewicy i męczennicy",
    "saintCatherineOfSienaVirginAndDoctorOfTheChurch": "Św. Katarzyny Sieneńskiej, dziewicy i doktora Kościoła, patronki Europye",
    "saintCeciliaVirginAndMartyr": "Św. Cecylii, dziewicy i męczennicy",
    "saintCharbelMakhloufPriestAndHermit": "Św. Sarbeliusza Makluf, prezbitera",
    "saintCharlesBorromeoBishop": "Św. Karola Boromeusza, biskupa",
    "saintChristopherMagallanesAndCompanionsMartyrs": "Świętych męczenników Krzysztofa Magallanesa, prezbitera, i Towarzyszy",
    "saintClareVirgin": "Św. Klary, dziewicy",
    "saintClementIPopeAndMartyrSaintColumbanReligious": "Św. Klemensa I, papieża i męczennika/Św. Kolumbana, zakonnika",
    "saintCyrilOfAlexandriaBishopAndDoctor": "Św. Cyryla Aleksandryjskiego, biskupa i doktora Kościoła",
    "saintCyrilOfJerusalemBishopAndDoctor": "Św. Cyryla Jerozolimskiego, biskupa i doktora Kościoła",
    "saintDamasusIPope": "Św. Damazego I, papieża",
    "saintDenisAndCompanionsMartyrsSaintJohnLeonardiPriest": "Świętych męczenników Dionizego, biskupa, i Towarzyszy/Św. Jana Leonardiego, prezbitera",
    "saintDominicPriest": "Św. Dominika, prezbitera",
    "saintElizabethOfHungary": "Św. Elżbiety Węgierskiej, zakonnicy",
    "saintElizabethOfPortugal": "Św. Elżbiety Portugalskiej",
    "saintEphremDeaconAndDoctor": "Św. Efrema, diakona i doktora Kościoła",
    "saintEusebiusOfVercelliBishopSaintPeterJulianEymardPriest": "Św. Euzebiusza z Vercelii, biskupa/Św. Piotra Juliani Eymarda, prezbitera",
    "saintFaustinaKowalskaVirginAndReligious": "Św. Faustyny Kowalskiej, dziewicy",
    "saintFidelisOfSigmaringenPriestAndMartyr": "Św. Fidelisa z Sigmaringen, prezbitera i męczennika",
    "saintFlorianMartyr": "Św. Floriana, męczennika",
    "saintFrancesOfRomeReligious": "Św. Franciszki Rzymianki, zakonnicy",
    "saintFrancisDeSalesBishopAndDoctor": "Św. Franciszka Salezego, biskupa i doktora Kościoła",
    "saintFrancisDiazPriestAndCompanionsMartyrs": "Świętych męczenników Franciszka Diaza, Kapłana i Towarzyszy",
    "saintFrancisFernandezDeCapillasPriestAndMartyr": "Św. Franciszka Fernandeza de Capillas, Kapłana i Męczennika",
    "saintFrancisOfAssisi": "Św. Franciszka z Asyżu",
    "saintFrancisOfPaolaHermit": "Św. Franciszka z Paoli, pustelnika",
    "saintFrancisXavierPriest": "Św. Franciszka Ksawerego, prezbitera",
    "saintGabrieltaurinDufresseBishopAndMartyr": "Św. Gabriel-Taurina Dufresse, Biskupa i Męczennika",
    "saintGeorgeMartyrSaintAdalbertBishopAndMartyr": "Św. Grzegorza, męczennika/Św. Wojciecha, biskupa i męczennika",
    "saintGregoryTheGreatPopeAndDoctor": "Św. Grzegorza Wielkiego, papieża i doktora Kościoła",
    "saintHedwigReligiousSaintMargaretMaryAlacoqueVirgin": "Św. Jadwigi Śląskiej/Św. Małgorzaty Marii Alacoque, dziewicy",
    "saintHenryBishopAndMartyr": "Św. Henryka, cesarza",
    "saintHilaryOfPoitiersBishopAndDoctor": "Św. Hilarego, biskupa i doktora Kościoła",
    "saintHyacinthPriest": "Św. Jacka, prezbitera",
    "saintIgnatiusOfAntiochBishopAndMartyr": "Św. Ignacego Antiocheńskiego, biskupa i męczennika",
    "saintIgnatiusOfLoyolaPriest": "Św. Ignacego z Loyoli, prezbitera",
    "saintIrenaeusBishopAndMartyr": "Św. Ireneusza, biskupa i męczennika",
    "saintIsidoreOfSevilleBishopAndDoctorOfTheChurch": "Św. Izydora, biskupa i doktora Kościoła",
    "saintJamesApostle": "Św. Jakuba, Apostoła",
    "saintJaneFrancesDeChantalReligious": "Św. Joanny Franciszki de Chantal, zakonnicy",
    "saintJanuariusBishopAndMartyr": "Św. Januarego, biskupa i męczennika",
    "saintJeanVianneyTheCureOfArsPriest": "Św. Jana Marii Vianneya, prezbitera",
    "saintJeromeEmilianiSaintJosephineBakhitaVirgin": "Św. Hieronima Emilianiego/Św. Józefiny Bakhity, dziewicy",
    "saintJeromePriestAndDoctor": "Św. Hieronima, prezbitera i doktora Kościoła",
    "saintJoachimHoMartyr": "Św. Joachima Ho, Męczennika",
    "saintJohnBaptistDeLaSallePriest": "Św. Jana Chrzciciela de la Salle, prezbitera",
    "saintJohnBoscoPriest": "Św. Jana Bosko, prezbitera",
    "saintJohnChrysostomBishopAndDoctor": "Św. Jana Chryzostoma, biskupa i doktora Kościoła",
    "saintJohnDamascenePriestAndDoctor": "Św. Jana Damasceńskiego, prezbitera i doktora Kościoła",
    "saintJohnEudesPriest": "Św. Jana Eudesa, prezbitera",
    "saintJohnGabrielPerboyrePriestAndMartyr": "Św. Jana Gabriela Perboyre'a, Kapłana i Męczennika",
    "saintJohnIPopeAndMartyr": "Św. Jana I, papieża i męczennika",
    "saintJohnOfCapistranoPriest": "Św. Jana Kapistrana, prezbitera",
    "saintJohnOfDuklaPriest": "Św. Jana z Dukli, prezbitera",
    "saintJohnOfGodReligious": "Św. Jana Bożego, zakonnika",
    "saintJohnOfKantyPriest": "Św. Jana Kantego, prezbitera",
    "saintJohnOfTheCrossPriestAndDoctor": "Św. Jana od Krzyża, prezbitera i doktora Kościoła",
    "saintJohnOfTrioraPriestAndMartyr": "Św. Jana z Triory, Kapłana i Męczennika",
    "saintJohnSarkanderPriestAndMartyrSaintZdzislawa": "Św. Jana Sarkandra, prezbitera i męczennika/Św. Zdzisławy",
    "saintJohnTheApostleAndEvangelist": "Św. Jana, Apostoła i Ewangelisty",
    "saintJosaphatBishopAndMartyr": "Św. Jozafata, biskupa i męczennika",
    "saintJosefBilczewskiBishop": "Św. Józefa Bilczewskiego, biskupa",
    "saintJosephTheWorker": "Św. Józefa, rzemieślnika",
    "saintJosephYuanPriestAndMartyr": "Św. Józefa Yuana, Kapłana i Męczennika",
    "saintJosephZhangDapengMartyr": "Św. Józefa Zhang Dapenga, Męczennika",
    "saintJuanDiegoCuauhtlatoatzin": "Św. Jana Diego Cuahtlatoatzin",
    "saintJustinMartyr": "Św. Justyna, męczennika",
    "saintKingaVirgin": "Św. Kingi, dziewicy",
    "saintLaurenceWangBingAndCompanionsMartyrsSaintJosephFreinademetzPriest": "Świętych męczenników Wawrzyńca Wang Binga i Towarzyszy albo Św. Józefa Freinademetza, Kapłana",
    "saintLawrenceBaiXiaomanMartyr": "Św. Wawrzyńa Bai Xiaomana, Męczennika",
    "saintLawrenceOfBrindisiPriestAndDoctor": "Św. Wawrzyńca z Brindisi, prezbitera i doktora Kościoła",
    "saintLawrenceOfRomeDeaconAndMartyr": "Św. Wawrzyńca, diakona i męczennika",
    "saintLeoManginPriestAndCompanionsMartyrs": "Świętych męczenników Leona Mangina, Kapłana i Towarzyszy",
    "saintLeoTheGreatPopeAndDoctor": "Św. Leona Wielkiego, papieża i doktora Kościoła",
    "saintLouisSaintJosephOfCalasanzPriest": "Św. Ludwika/Św. Józefa Kalasantego, prezbitera",
    "saintLucyOfSyracuseVirginAndMartyr": "Św. Łucji, dziewicy i męczennicy",
    "saintLucyYiZhenmeiVirginAndMartyr": "Św. Łucji Yi Zhenmei, Dziewicy i Męcznnicy",
    "saintLukeTheEvangelist": "Św. Łukasza, Ewangelisty",
    "saintMargaretOfScotlandSaintGertrudeTheGreatVirgin": "Św. Małgorzaty Szkockiej/Św. Gertrudy, dziewicy",
    "saintMariaGorettiVirginAndMartyr": "Św. Marii Goretti, dziewicy i męczennicy",
    "saintMarkTheEvangelist": "Św. Marka, Ewangelisty",
    "saintMartha": "Św. Marty",
    "saintMartinDePorresReligious": "Św. Marcina de Porres, zakonnika",
    "saintMartinIPopeAndMartyr": "Św. Marcina I, papieża i męczennika",
    "saintMartinOfToursBishop": "Św. Marcina z Tours, biskupa",
    "saintMartinWuXueshengAndCompanionsMartyrs": "Świętych męczenników Marcina Wu Xueshenga i Towarzyszy",
    "saintMaryMagdalene": "Św. Marii Magdaleny",
    "saintMatthewApostleAndEvangelist": "Św. Mateusza, Apostoła i Ewangelisty",
    "saintMatthiasTheApostle": "Św. Macieja, Apostoła",
    "saintMaximilianMaryKolbePriestAndMartyr": "Św. Maksymiliana Marii Kolbego, prezbitera i męczennika",
    "saintMelchiorGrodzieckiPriestAndMartyr": "Św. Melchiora Grodzieckiego, prezbitera i męczennika",
    "saintMonica": "Św. Moniki",
    "saintNicholasBishop": "Św. Mikołaja, biskupa",
    "saintNorbertBishop": "Św. Norberta, biskupa",
    "saintOttoOfBambergBishop": "Św. Ottona, biskupa",
    "saintPatrickBishop": "Św. Patryka, biskupa",
    "saintPaulChenChangpinAndCompanionsMartyrs": "Świętych męczenników Pawła Chen Changpina i Towarzyszy",
    "saintPaulinusOfNolaBishopSaintsJohnFisherBishopAndThomasMoreMartyrs": "Św. Paulina z Noli, biskupa/Świętych męczenników Jana Fishera, biskupa i Tomasza More’a",
    "saintPaulLiuHanzouPriestAndMartyr": "Św. Pawła Liu Hanzou, Kapłana i Męczennika",
    "saintPaulMikiAndCompanionsMartyrs": "Świętych męczenników Pawła Miki i Towarzyszy",
    "saintPeterCanisiusPriestAndDoctor": "Św. Piotra Kanizjusza, prezbitera i doktora Kościoła",
    "saintPeterChanelPriestAndMartyrSaintLouisGrignonDeMontfortPriest": "Św. Piotra Chanela, prezbitera i męczennika/Św. Ludwika Marii Grignion de Montfort, prezbitera",
    "saintPeterChrysologusBishopAndDoctor": "Św. Piotra Chryzologa, biskupa i doktora Kościoła",
    "saintPeterClaverPriest": "Św. Piotra Klawera, prezbitera",
    "saintPeterDamianBishopAndDoctorOfTheChurch": "Św. Piotra Damianiego, biskupa i doktora Kościoła",
    "saintPeterLiuMartyr": "Św. Piotra Liu, Męczennika",
    "saintPeterSanzBishopAndMartyr": "Św. Piotra Sanza, Biskupa i Męczennika",
    "saintPeterWuMartyr": "Św. Piotra Wu, Męczennika",
    "saintPhilipNeriPriest": "Św. Filipa Nereusza, prezbitera",
    "saintPioOfPietrelcinaPadrePioPriest": "Św. Pio z Pietrelciny, prezbitera",
    "saintPiusVPope": "Św. Piusa V, papieża",
    "saintPiusXPope": "Św. Piusa X, papieża",
    "saintPolycarpBishopAndMartyr": "Św. Polikarpa, biskupa i męczennika",
    "saintRafalKalinowskiPriest": "Św. Rafała Kalinowskiego, prezbiterat",
    "saintRaymondOfPenyafortPriest": "Św. Rajmunda z Penyafort, prezbitera",
    "saintRitaOfCascia": "Św. Rity z Cascii, zakonnicy",
    "saintRobertBellarmineBishopAndDoctor": "Św. Roberta Bellarmina, biskupa i doktora Kościoła",
    "saintRomualdAbbot": "Św. Romualda, opata",
    "saintRoseOfLima": "Św. Róży z Limy, dziewicy",
    "saintsAndrewZorardAndBenedictHermits": "Świętych pustelników Andrzeja Świerada i Benedykta",
    "saintsAugustineZhaoRongPriestAndCompanionsMartyrs": "Świętych męczenników Augustyna Zhao Rong, prezbitera, i Towarzyszy",
    "saintsBasilTheGreatAndGregoryNazianzenBishopsAndDoctors": "Świętych Bazylego Wielkiego i Grzegorza z Nazjanzu, biskupów i doktorów Kościoła",
    "saintsBenedyktJanMateuszIsaakAndKrystynMartyrs": "Świętych Benedykta, Jana, Mateusza, Izaaka i Krystyna, pierwszych męczenników Polski",
    "saintsCharlesLwangaAndCompanionsMartyrs": "Świętych męczenników Karola Lwangi i Towarzyszy",
    "saintScholasticaVirgin": "Św. Scholastyki, dziewicy",
    "saintsCorneliusPopeAndCyprianBishopMartyrs": "Świętych męczenników Korneliusza, papieża, i Cypriana, biskupa",
    "saintsCosmasAndDamianMartyrs": "Świętych męczenników Kosmy i Damiana",
    "saintsCyrilMonkAndMethodiusBishop": "Świętych Cyryla, mnicha i Metodego, biskupa, patronów Europy",
    "saintsFabianPopeAndSebastianMartyrs": "Św. Fabiana, papieża i męczennika/Św. Sebastiana, męczennika",
    "saintsGregoryGrassiFrancisFogollaAndAnthonyFantosatiBishopsAndCompanionsMartyrs": "Świętych męczenników Grzegorza Grassiego, Franciszka Fogolli i Antoniego Fantosatiego, Biskupów i Towarzyszy",
    "saintSimonOfLipnicaPriest": "Św. Szymona z Lipnicy, prezbitera",
    "saintSixtusIiPopeAndCompanionsMartyrsSaintCajetanPriest": "Świętych męczenników Sykstusa II, papieża, i Towarzyszy/Św. Kajetana, prezbitera",
    "saintsJeanDeBrebeufAndIsaacJoguesPriestsAndCompanionsMartyrsSaintPaulOfTheCrossPriest": "Świętych męczenników Jana de Brebeuf, Izaaka Jogues’a, prezbiterów oraz Towarzyszy/Św. Pawła od Krzyża, prezbitera",
    "saintsJoachimAndAnne": "Świętych Rodziców NMP Joachima i Anny",
    "saintsLouisVersigliaBishopAndCallistusCaravarioPriestMartyrs": "Świętych Alojzego Versiglii, Biskupa i Kaliksta Caravaria, Kapłana",
    "saintsMarcellinusAndPeterMartyrs": "Świętych męczenników Marcelina i Piotra",
    "saintsMichaelGabrielAndRaphaelArchangels": "Świętych Archaniołów Michała, Gabriela i Rafała",
    "saintsNereusAndAchilleusMartyrsSaintPancrasMartyr": "Świętych męczenników Nereusza i Achillesa/Św. Pankracego, męczennika",
    "saintsPerpetuaAndFelicityMartyrs": "Świętych męczennic Perpetuy i Felicyty",
    "saintsPhilipAndJamesApostles": "Świętych Apostołów Filipa i Jakuba",
    "saintsPontianPopeAndHippolytusPriestMartyrs": "Świętych męczenników Poncjana, papieża i Hipolita, prezbiteras",
    "saintsSimonAndJudeApostles": "Świętych Apostołów Szymona i Judy Tadeusza",
    "saintStanislausBishopAndMartyr": "Św. Stanisława, biskupa i męczennika, głównego patrona Polski",
    "saintStanislausKazimierczykPriest": "Św. Stanisława Kazimierczyka, prezbitera",
    "saintStanislausKostkaReligious": "Św. Stanisława Kostki, zakonnika, patrona Polski",
    "saintStephenOfHungary": "Św. Stefana Węgierskiego",
    "saintStephenTheFirstMartyr": "Św. Szczepana, pierwszego męczennika",
    "saintsTimothyAndTitusBishops": "Świętych biskupów Tymoteusza i Tytusa",
    "saintSylvesterIPope": "Św. Sylwestra I, papieża",
    "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr": "Św. Teresy Benedykty od Krzyża, dziewicy i męczennicy, patronki Europy",
    "saintTeresaOfJesusVirginAndDoctorOfTheChurch": "Św. Teresy od Jezusa, dziewicy i doktora Kościoła",
    "saintThereseOfTheChildJesusVirginAndDoctor": "Św. Teresy od Dzieciątka Jezus, dziewicy i doktora Kościoła",
    "saintThomasAquinasPriestAndDoctor": "Św. Tomasza z Akwinu, prezbitera i doktora Kościoła",
    "saintThomasBecketBishopAndMartyr": "Św. Tomasza Becketa, biskupa i męczennika",
    "saintThomasTheApostle": "Św. Tomasza, Apostoła",
    "saintTuribiusOfMogrovejoBishop": "Św. Turybiusza z Mongrovejo, biskupa",
    "saintUrsulaLedochowskaVirgin": "Św. Urszuli Ledóchowskiej, dziewicy",
    "saintVincentDeaconAndMartyr": "Św. Wincentego, diakona i męczennika",
    "saintVincentDePaulPriest": "Św. Wincentego à Paulo, prezbitera",
    "saintVincentFerrerPriest": "Św. Wincentego Ferreriusza, prezbitera",
    "saintVincentPallottiPriest": "Św. Wincentego Pallottiego, prezbitera",
    "saintWenceslausMartyrSaintsLawrenceRuizAndCompanionsMartyrs": "Św. Wacława, męczennika/Świętych męczenników Wawrzyńca Ruiz i Towarzyszy",
    "saintZygmuntGorazdowskiPriest": "Św. Zygmunta Gorazdowskiego, prezbitera",
    "saintZygmuntSzczesnyFelinskiBishop": "Św. Zygmunta Szczęsnego Felińskiego, biskupa",
    "sevenHolyFoundersOfTheServiteOrder": "Świętych siedmiu założycieli Zakonu Serwitów Najświętszej Maryi Panny",
    "sevenMartyredNunsFromTheFranciscanMissionariesOfMary": "Siedmiu męcznnic ze Zgromadzenia Franciszkanek Misjonarek Maryi",
    "theBeheadingOfSaintJohnTheBaptistMartyr": "Męczeństwo św. Jana Chrzciciela",
    "theMostHolyNameOfJesus": "Najświętszego Imienia Jezus",
    "visitationOfTheBlessedVirginMary": "Nawiedzenie Najświętszej Maryi Panny"
  }
};
exports["default"] = _default;
},{}],75:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _default = {
  "advent": {
    "season": "Adventné obdobie",
    "feria": "{{day}} po {{week}}. adventnej nedeli",
    "sunday": "{{week}} adventná nedeľa"
  },
  "christmastide": {
    "season": "Vianočné obdobie",
    "day": "{{day}} vo Vianočnom období",
    "octave": "{{count}} deň v oktáve narodenia Pána",
    "sunday": "{{count}} nedeľa po narodení Pána"
  },
  "epiphany": {
    "season": "Zjavenie Pána",
    "before": "{{day}} vo vianočnom období",
    "after": "{{day}} po Zjavení Pána"
  },
  "ordinaryTime": {
    "season": "Cezročné obdobie",
    "feria": "{{day}} {{week}} týždňa v Cezročnom období",
    "sunday": "{{week}} nedeľa v Cezročnom období"
  },
  "lent": {
    "season": "Pôstne obdobie",
    "feria": "{{day}} po {{week}}. pôstnej nedeli",
    "sunday": "{{week}} pôstna nedeľa",
    "day_after_ash_wed": "{{day}} po Popolcovej strede"
  },
  "holyWeek": {
    "season": "Veľký týždeň",
    "feria": "{{day}} Veľkého týždňa"
  },
  "eastertide": {
    "season": "Veľkonočné obdobie",
    "feria": "{{day}} po {{week}} veľkonočnej nedeli",
    "sunday": "{{week}} veľkonočná nedeľa",
    "octave": "Veľkonočný {{day}}"
  },
  "celebrations": {
    "allSaints": "Všetkých svätých",
    "annunciation": "Zvestovanie Pána",
    "ascension": "Nanebovstúpenie Pána",
    "ashWednesday": "Popolcová streda",
    "assumption": "Nanebovzatie Panny Márie",
    "baptismOfTheLord": "Krst Krista Pána",
    "birthOfJohnTheBaptist": "Narodenie svätého Jána Krstiteľa",
    "christmas": "Narodenie Pána",
    "christTheKing": "Krista Kráľa",
    "corpusChristi": "Najsvätejšieho Kristovho Tela a Krvi",
    "divineMercySunday": "Nedeľa Božieho milosrdenstva",
    "easter": "Nedeľa Pánovho zmŕtvychvstania",
    "epiphany": "Zjavenie Pána",
    "goodFriday": "Veľký piatok",
    "guardianAngelOfPortugal": "Anjela strážcu Portugalska",
    "holyFamily": "Svätej rodiny Ježiša, Márie a Jozefa",
    "holySaturday": "Biela sobota",
    "holyThursday": "Zelený štvrtok",
    "immaculateConception": "Nepoškvrnené počatie Panny Márie",
    "immaculateHeartOfMary": "Nepoškvrneného Srdca Panny Márie",
    "josephHusbandOfMary": "Svätého Jozefa, ženícha Panny Márie",
    "maryMotherOfGod": "Panny Márie Bohorodičky",
    "palmSunday": "Kvetná nedeľa",
    "pentecostSunday": "Zoslanie Ducha Svätého",
    "peterAndPaulApostles": "Svätých Petra a Pavla, apoštolov",
    "presentationOfTheLord": "Obetovanie Pána",
    "sacredHeartOfJesus": "Najsvätejšieho Srdca Ježišovho",
    "theExaltationOfTheHolyCross": "Povýšenie Svätého kríža",
    "transfiguration": "Premenenie Pána",
    "trinitySunday": "Najsvätejšej Trojice"
  },
  "sanctoral": {
    "205BlessedMartyrsOfJapan": "205 blahoslavených mučeníkov Japonska",
    "allSaintsOfIreland": "Všetkých svätých Írska",
    "allSaintsOfWales": "Všetkých svätých Walesu",
    "allSouls": "Všetkých verných zosnulých",
    "birthOfTheBlessedVirginMary": "Narodenie Panny Márie",
    "blessedAlbertinaBerkenbrockVirginAndMartyr": "Blahoslavenej Albertiny Berkenbrockovej, panny a mučenice",
    "blessedAloysiusStepinacBishopAndMartyr": "Blahoslaveného Alojza Stepinaca, biskupa a mučeníka",
    "blessedAndreGrassetPriestAndMartyr": "Blahoslaveného Andreja Grasseta, kňaza a mučeníka",
    "blessedAnielaSalawaVirgin": "Blahoslavenej Angely Salawej, panny",
    "blessedAntoniNowowiejskiBishopAndCompanionsMartyrs": "Blahoslaveného Antona Nowowiejskeho, biskupa, a spoločníkov, mučeníkovi",
    "blessedAugustinKazoticBishopAndMartyr": "Blahoslaveného Augustína Kažotića, biskupa a mučeníka",
    "blessedBartholomewOfTheMartyrsBishop": "Blahoslaveného Bartolomeja od mučeníkov, biskup",
    "blessedBartolomeLaurelReligiousAndMartyr": "Blahoslaveného Bartolomeja Laurela, rehoľníka a mučeníka",
    "blessedBogumilBishop": "Blahoslaveného Bohumila, biskupa",
    "blessedBoleslawaMariaLamentVirginAndSaintAngelaMericiVirgin": "Blahoslavenej Boleslavy Márie Lamentovej, Panny/Svätej Angely Merici, panny",
    "blessedBronislawaVirgin": "Blahoslavenej Bronislavy, panny",
    "blessedBronislawMarkiewiczPriest": "Blahoslaveného Bronislava Markiewicza, kňaza",
    "blessedCarlosManuelRodriguez": "Blahoslaveného Karla Emanuela Rodrígueza Santiaga",
    "blessedCatherineOfSaintAugustineVirgin": "Blahoslavenej Kataríny od sv. Augustína, panny",
    "blessedCeferinoNamuncura": "Blahoslaveného Zefirína Namuncurá",
    "blessedCeslausAndSaintHyacinthPriests": "Blahoslaveného Česlava a svätého Hyacinta, kňazov",
    "blessedCharlesSpinolaPriestAndMartyr": "Blahoslaveného Karola Spinolu, kňaza a mučeníka",
    "blessedColumbaMarmionPriest": "Blahoslaveného Columbu Marmiona, kňaza",
    "blessedCzeslawPriest": "Blahoslaveného Česlava, kňaza",
    "blessedDinaBelangerVirgin": "Blahoslavenej Diny Belangerovej, panny",
    "blessedDominicOfTheMotherOfGodDominicBarberiPriest": "Blahoslaveného Dominika od Matky Božej Barberi, kňaza",
    "blessedEdmundBojanowski": "Blahoslaveného Edmunda Bojanowského",
    "blessedEdmundIgnatiusRiceReligious": "Blahoslaveného Edmunda Ignáca Rica, rehoľníka",
    "blessedElisabethHesselbaldVirgin": "Blessed Elisabeth Hesselbald, Virgin",
    "blessedEmilieTavernierGamelinReligious": "Blahoslavenej Márie Emílie Tavernier Gamelinovej, rehoľnice",
    "blessedFredericJanssoonePriest": "Blahoslaveného Frederika Janssoona, kňaza",
    "blessedGeorgeMatulewiczBishop": "Blahoslaveného Juraja Matulaitisa, biskupa",
    "blessedGisela": "Blahoslavenej Gizely Uhorskej, rehoľnice",
    "blessedGoncaloDeAmarantePriest": "Blahoslaveného Gonçala de Amarante, kňaza",
    "blessedGoncaloDeLagosPriest": "Blahoslaveného Gonçala de Lagos, kňaza",
    "blessedGraziaOfCattaro": "Blahoslavenej Grácie Kotorskej",
    "blessedHemmingBishop": "Blahoslaveného Hemminga, biskupa",
    "blessedHenrySusoPriest": "Blahoslaveného Henricha Susa, kňaza",
    "blessedHonoratKozminskiPriest": "Blahoslaveného Honoráta Kożmińského, kňaza",
    "blessedHroznataMartyr": "Blahoslaveného Hroznatu, mučeníka",
    "blessedInacioDeAzevedoPriestAndCompanionsMartyrs": "Blahoslaveného Ignáca de Azevedo, kňaza, a spoločníkov, mučeníkov",
    "blessedInnocentXiPope": "Blahoslaveného Inocenta XI., pápeža",
    "blessedIrishMartyrs": "Blahoslavených írskych mučeníkov",
    "blessedIstvanSandorMartyr": "Blahoslaveného Štefana Šándora, mučeníka",
    "blessedIvanMerz": "Blahoslaveného Ivana Merza",
    "blessedJacintaAndFranciscoMarto": "Svätých Hyacinty a Františka Martovcov",
    "blessedJakubStrzemieBishop": "Blahoslaveného Jakuba Strzemię, biskupa",
    "blessedJerzyMatulewiczBishop": "Blahoslaveného Juraja Matulaitisa, biskupa",
    "blessedJoanOfPortugalVirgin": "Blahoslavenej Jany Portugalskej, panny",
    "blessedJohnBeyzymPriest": "Blahoslaveného Jána Beyzyma, kňaza",
    "blessedJohnHenryNewmanPriest": "Blahoslaveného Johna Henryho Newmana, kňaza",
    "blessedJolantaReligious": "Blahoslavenej Jolany, rehoľnice",
    "blessedJosephVazPriest": "Blahoslaveného Jozefa Vaza, kňaza",
    "blessedJuniperoSerraPriest": "Blahoslaveného Junipera Serru, kňaza",
    "blessedKarlOfAustria": "Blahoslaveného Karola Habsburského",
    "blessedKarolinaKozkownaVirginAndMartyr": "Blahoslavenej Karolíny Kozkownej, panny a mučenice",
    "blessedKuriakoseEliasChavaraPriest": "Blahoslaveného Kyriaka Eliáša Čavaru, kňaza",
    "blessedLauraVicunaVirgin": "Blahoslavenej Laury Vicuñe, panny",
    "blessedLouisZephirinMoreauBishop": "Blahoslaveného Ľudovíta Zefirína Moreau, biskupa",
    "blessedMarcelinaDarowskaReligious": "Blahoslavenej Marcelíny Darowskej, rehoľnice",
    "blessedMariaAdeodataPisaniVirgin": "Blahoslavenej Márie Adeodaty Pisaniovej, panny",
    "blessedMariaDoloresRodriguezSopenaVirgin": "Blahoslavenej Márie Dolores Rodríguez Sopeñe, panny",
    "blessedMariaStellaAndCompanionsVirginsAndMartyrs": "Blahoslavenej Márie Stelly a spoločníčok, pannien a mučeníc",
    "blessedMariaTeresaLedochowskaVirgin": "Blahoslavenej Márie Terezy Ledochowskej, panny",
    "blessedMariaTheresaChiramelVirgin": "Blahoslavenej Márie Terézie Chiramelovej, panny",
    "blessedMarieAnneBlondinVirgin": "Blahoslavenej Márie Anny Blondinovej, panny",
    "blessedMarieLeonieParadisVirgin": "Blahoslavenej Márie Leónie Paradisovej, panny",
    "blessedMarieRoseDurocherVirgin": "Blahoslavenej Márie Durocherovej, panny",
    "blessedMaryAngelaTruszkowskaVirgin": "Blahoslavenej Márie Angely Truszkowskej, panny",
    "blessedMaryOfJesusCrucifiedPetkovicVirgin": "Blahoslavenej Márie od ukrižovaného Ježiša Petković, panny",
    "blessedMaryOfJesusTheGoodShepherdVirgin": "Blahoslavenej Márie od Ježiša Dobrého Pastiera, panny",
    "blessedMichaelKozalBishopAndMartyr": "Blahoslaveného Michaela Kozala, biskupa a mučeníka",
    "blessedMiguelAgustinProPriestAndMartyr": "Blahoslaveného Michaela Pro, kňaza a mučeníka",
    "blessedNazariaIgnaciaMarchReligious": "Blahoslavenej Nazárie Ignácie March Mesa (Nazárie od Svätého Terézie od Ježiša), rehoľnice",
    "blessedNazjuFalzon": "Blahoslaveného Ignáca Falzona",
    "blessedNicolasStenoBishop": "Blahoslaveného Nicolasa Stena, biskupa",
    "blessedOleksiyZarytskyiPriestAndMartyr": "Blahoslaveného Alexeja Zarytského, kňaza a mučeníka",
    "blessedOsannaOfCattaroVirgin": "Blahoslavenej Hosanny Kotorskej, panny",
    "blessedPeterKibePriestAndCompanionsMartyrs": "Blahoslaveného Petra Kibeho, kňaza, a spoločníkov, mučeníkov",
    "blessedPeterToRotMartyr": "Blahoslaveného Petra To Rota, mučeníka",
    "blessedPiusIxPope": "Blahoslaveného Pia IX., pápeža",
    "blessedRafalChylinskiPriest": "Blahoslaveného Rafaela Chylinského, kňaza",
    "blessedSalomeVirgin": "Blahoslavenej Salomey Poľskej, panny",
    "blessedSanchaAndMafaldaVirginsOrBlessedTheresaOfPOrtugalReligious": "Blahoslavených Sanche a Mafaldy, panny, alebo blahoslavenej Terezy Portugalskej, rehoľnice",
    "blessedsAndreDeSoveralAndAmbrosioFranciscoFerroPriestsAndMartyrs": "Blahoslavených Andreja de Soverala a Ambróza Františka Ferra, mučeníka",
    "blessedSaraSalkahaziVirginAndMartyr": "Blahoslavenej Sáry Salkaháziovej, panny a mučenice",
    "blessedsCarlosSpinolaAndJeronimoDeAngelisPriestsAndMartyrs": "blahoslavených Karla Spinolu a Hieronyma de Angelis, kňazov a mučeníkov",
    "blessedSebastianDeAparicioReligious": "Blahoslaveného Šebastiána de Aparicio, Religious",
    "blessedsNykytaBudkaAndVasylVelychkowskyBishopsAndMartyrs": "Blahoslavených Nikity Budku a Vasiľa Velichkovského, biskupov a mučeníkov",
    "blessedsPedroZunigaAndLuisFloresPriestsAndMartyrs": "Blahoslavených Petra de Zúñigu a Ľudovíta Floresa, kňazov a mučeníkov",
    "blessedTheodoreRomzhaBishopAndMartyr": "Blahoslaveného Teodora Romžu, biskupa a mučeníka",
    "blessedVilmosAporBishopAndMartyr": "Blahoslaveného Vilmosa Apora, biskupa a mučeníka",
    "blessedVincentKadlubekBishop": "Blahoslaveného Vincenta Kadlubka, biskupa",
    "blessedVincentLewoniukAndCompanionsMartyrsOfPratulin": "Blahoslaveného Vincenta Lewoniuka a spoločníkov, mučeníkov",
    "blessedVladimirGhikaPriestAndMartyr": "Blahoslaveného Vladimíra Ghiku, kňaza a mučeníka",
    "blessedWladyslawBladzinskiPriestAndCompanionsMartyrs": "Blahoslaveného Vladislava Błądzińskiho, kňaza, a spoločníkov, mučeníkov",
    "blessedWladyslawOfGielniowPriest": "Blahoslaveného Vladislava z Gielniowa, kňaza",
    "blessedZdenkaSchelingovaVirginAndMartyr": "Blahoslavenej Zdenky Schelingovej, panny a mučenice",
    "chairOfSaintPeterApostle": "Katedra svätého Petra, apoštola",
    "conversionOfSaintPaulApostle": "Obrátenie svätého Pavla, apoštola",
    "dedicationOfAParticularChurch": "Výročie posviacky chrámov, ktorých deň posviacky je neznámy",
    "dedicationOfTheBasilicaOfSaintMaryMajor": "Výročie posviacky Hlavnej mariánskej baziliky v Ríme",
    "dedicationOfTheBasilicasOfSaintsPeterAndPaulApostles": "Výročie posviacky bazilík svätého Petra a svätého Pavla, apoštolov",
    "dedicationOfTheLateranBasilica": "Výročie posviacky Lateránskej baziliky",
    "discoveryOfTheHiddenChristians": "Objavenia skrytých kresťanov",
    "findingOfTheHolyCross": "Nájdenie Svätého kríža",
    "firstMartyrsOfTheChurchOfRome": "Prvých svätých mučeníkov Cirkvi v Ríme",
    "guardianAngels": "Svätých anjelov strážcov",
    "holyInnocentsMartyrs": "Svätých Neviniatok, mučeníkov",
    "holyNameOfTheBlessedVirginMary": "Najsvätejšieho mena Panny Márie",
    "hungarianSaintsAndBlesseds": "Maďarských svätých a blahoslavených",
    "immaculateConceptionOfTheBlessedVirginMaryPrincipalPatronessOfThePhilippines": "Nepoškvrneného počatia Panny Márie, hlavná Patrónka Filipín",
    "maryMotherOfTheChurch": "Preblahoslavenej Panny Márie, Matky Cirkvi",
    "mostHolyNameOfJesusOrOurLadyOfBethlehem": "Najsvätejšieho mena Ježiš alebo Panny Márie Betlehemskej",
    "ourLadyHelpOfChristians": "Panny Márie, Pomocnice kresťanov",
    "ourLadyMediatrix": "Panny Márie, Prostrednice všetkých milostí",
    "ourLadyMediatrixOfAllGrace": "Panny Márie, Prostrednice všetkých milostí",
    "ourLadyMotherOfChristianUnity": "Panny Márie, Matky jednoty kresťanov",
    "ourLadyMotherOfDivineProvidencePatronessOfPuertoRico": "Panny Márie, Matky Božej Prozreteľnosti, Patrónky Portorika",
    "ourLadyMotherOfMercy": "Panny Márie Ostrobramskej",
    "ourLadyOfAparecidaPatronessOfBrazil": "Panna Mária z Aparecidy, Patrónka Brazílie",
    "ourLadyOfBistrica": "Panny Márie z Marije Bistrice",
    "ourLadyOfCzestochowa": "Panny Márie Čenstochovskej",
    "ourLadyOfFatima": "Blahoslavenej Panny Márie Fatimskej",
    "ourLadyOfGoodCounsel": "Panny Márie Dobrej Rady",
    "ourLadyOfGuadalupe": "Preblahoslavenej Panny Márie Guadalupskej",
    "ourLadyOfHungary": "Patrónka Maďarov",
    "ourLadyOfItati": "Panny Márie Itatskej",
    "ourLadyOfKnock": "Panny Márie z Knock",
    "ourLadyOfLanka": "Panny Márie z Lanky",
    "ourLadyOfLebanon": "Panny Márie z Lebanonu",
    "ourLadyOfLoreto": "Preblahoslavenej Panny Márie Loretánskej",
    "ourLadyOfLourdes": "Preblahoslavenej Panny Márie Lurdskej",
    "ourLadyOfLujanPatronessOfArgentina": "Panny Marie Lujánska",
    "ourLadyOfMadhu": "Panny Márie z Madhu",
    "ourLadyOfMercy": "Panny Márie milosrdenstva",
    "ourLadyOfMountCarmel": "Preblahoslavenej Panny Márie Karmelskej",
    "ourLadyOfMountCarmelMotherAndQueenOfChile": "Panny Márie Karmelskej, Matky a Kráľovnej Chile",
    "ourLadyOfPeace": "Panny Márie pokoja",
    "ourLadyOfPerpetualHelpOrBlessedLeonidFeodorovPriestAndMartyr": "Panny Márie ustavičnej pomoci alebo blahoslaveného Leonida Fjodorova, kňaza a mučeníka",
    "ourLadyOfSorrows": "Sedembolestnej Panny Márie, patrónky Slovenska",
    "ourLadyOfTheGateOfDawn": "Panny Márie Ostrobramskej",
    "ourLadyOfThePillar": "Panny Márie del Pilar",
    "ourLadyOfTheRosary": "Ružencovej Panny Márie",
    "ourLadyOfTheValley": "Our Lady of The Valley",
    "ourLadyOfVladimir": "Vladimírskej Bohorodičky",
    "ourLadyOfWalsingham": "Walsinghamskej Panny Márie",
    "ourLadyQueenOfPeace": "Panny Márie Kráľovnej pokoja",
    "ourLadyQueenOfPoland": "Panny Márie, Kráľovnej Poľska",
    "ourLordJesusChristTheEternalHighPriest": "Nášho Pána Ježiša Krista, najvyššieho a večného kňaza",
    "ourLordOfMiracles": "Panny Márie zázrakov",
    "popeSaintJohnPaulII": "Svätého Jána Pavla II., pápeža",
    "popeSaintJohnXXIII": "Svätého Jána XXIII., pápeža",
    "presentationOfTheBlessedVirginMary": "Obetovanie Panny Márie",
    "queenshipOfBlessedVirginMary": "Panny Márie Kráľovnej",
    "saintAdalbertBishopAndMartyr": "Svätého Vojtecha, biskupa a mučeníka",
    "saintAdalbertBishopAndMartyrSaintFidelisOfSigmaringenPriestAndMartyr": "Svätého Vojtecha, biskupa a mučeníka/Svätého Fidéla zo Sigmaringenu, kňaza a mučeníka",
    "saintAelredOfRievaulx": "Svätého Aelreda z Rievaulx",
    "saintAengusOengusBishopAndAbbot": "Svätého Aengusa (Óengusa), biskupa a opáta",
    "saintAgathaVirginAndMartyr": "Svätej Agáty, panny a mučenice",
    "saintAgnesOfBohemiaVirgin": "Svätej Anežky Českej, panny",
    "saintAgnesVirginAndMartyr": "Svätej Agnesy, panny a mučenice",
    "saintAidanBishop": "Svätého Aidana, biskupa",
    "saintAidanBishopAndTheSaintsOfLindisfarne": "Svätého Aidana, biskupa, a lindisfarnských svätých",
    "saintAidanOfLindisfarneBishopAndMissionary": "Svätého Aidana Lindisfarnského, biskupa a misionára",
    "saintAilbeBishop": "Svätého Ailba, biskupa",
    "saintAlbanMartyr": "Svätého Albána, mučeníka",
    "saintAlbertChmielowskiReligious": "Svätého Alberta Chmielowského, rehoľníka",
    "saintAlbertoHurtadoPriest": "Svätého Alberta Hurtada, kňaza",
    "saintAlbertTheGreatBishopAndDoctor": "Svätého Alberta Veľkého, biskupa a učiteľa Cirkvi",
    "saintAloysiusGonzagaReligious": "Svätého Alojza Gonzágu, rehoľníka",
    "saintAlphonsaOfTheImmaculateConceptionVirgin": "Svätej Alfonzy od Nepoškvrneného počatia, panny",
    "saintAlphonsusMariaDeLiguoriBishopAndDoctorOfTheChurch": "Svätého Alfonza Máriu de’ Liguori, biskupa a učiteľa Cirkvi",
    "saintAmandMissionary": "Svätého Milana, biskupa",
    "saintAmbroseBishopAndDoctor": "Svätého Ambróza, biskupa a učiteľa Cirkvi",
    "saintAndreBessetteReligious": "Svätého Andreja Alfréda Bessetta, rehoľníka",
    "saintAndrewApostle": "Saint Andrew, Apostle",
    "saintAndrewBobolaPriestAndMartyr": "Svätého Andreja Bobolu, kňaza a mučeníka",
    "saintAndrewDungLacAndCompanionsMartyrs": "Svätého Ondreja Dung-Laka, kňaza, a spoločníkov, mučeníkov",
    "saintAndrewKimTaegonPriestAndPaulChongHasangAndCompanionsMartyrs": "Svätých Ondreja Kima Taegona, kňaza, Pavla Chonga Hasanga a spoločníkov, mučeníkov",
    "saintAndrewTheApostle": "Svätého Ondreja, apoštola",
    "saintAndrewTheApostlePatronOfRussia": "Svätého Ondreja, apoštola, patrón Ruska",
    "saintAngelaMericiVirgin": "Svätej Angely Merici, panny",
    "saintAnnePatronOfQuebecAndSaintJoachimParentsOfTheBlessedVirginMary": "Svätých Anny, patrónky Quebecu, a Joachima, rodičov Panny Márie",
    "saintAnnoIiBishop": "Svätého Anna II., biskupa",
    "saintAnselmOfCanterburyBishopAndDoctorOfTheChurch": "Svätého Anzelma, biskupa a učiteľa Cirkvi",
    "saintAnthonyMaryClaretBishop": "Svätého Antona Máriu Clareta, biskupa",
    "saintAnthonyOfEgyptAbbot": "Svätého Antona, opáta",
    "saintAnthonyOfLisbonPriestAndDoctorOfTheChurch": "Svätého Antona Paduánskeho, kňaza a učiteľa Cirkvi",
    "saintAnthonyOfPaduaPriestAndDoctor": "Svätého Antona Paduánskeho, kňaza a učiteľa Cirkvi",
    "saintAnthonyOfSaintAnneGalvaoFreiGalvaoPriest": "Svätého Antona de Sant’Ana Galvão (brata Galvão), kňaza",
    "saintAnthonyOfTheCavesMonk": "Svätého Antona Pečerského, mnícha",
    "saintAnthonyZaccariaPriest": "Svätého Antona Márie Zaccariu, kňaza",
    "saintApollinaris": "Svätého Apolinára, biskupa a mučeníka",
    "saintAsaphBishop": "Svätého Asafa, biskupa",
    "saintAsicusBishop": "Svatého Azika, biskupa",
    "saintAthanasiusBishopAndDoctor": "Svätého Atanáza, biskupa a učiteľa Cirkvi",
    "saintAugustineOfCanterburyBishop": "Svätého Augustína z Canterbury, biskupa",
    "saintAugustineOfHippoBishopAndDoctorOfTheChurch": "Svätého Augustína, biskupa a učiteľa Cirkvi",
    "saintBarbaraVirginAndMartyr": "Svätej Barbory, panny a mučenice",
    "saintBarbaraVirginAndMartyrOrBlessedAdolphKolpingPriest": "Svätej Barbory, panny a mučenice, alebo blahoslaveného Adolfa Kolpinga, kňaza",
    "saintBarnabasTheApostle": "Svätého Barnabáša, apoštola",
    "saintBartholomewTheApostle": "Svätého Bartolomeja, apoštola",
    "saintBeatriceOfSilvaVirgin": "Svätej Beatrix da Silva, panny",
    "saintBedeTheVenerablePriestAndDoctor": "Svätého Bédu Ctihodného, kňaza a učiteľa Cirkvi",
    "saintBedeTheVenerablePriestAndDoctorSaintGregoryViiPopeSaintMaryMagdaleneDePazziVirgin": "Svätého Bédu Ctihodného, kňaza a učiteľa Cirkvi/Svätého Gregora VII., pápeža/Svätej Márie Magdalény de’ Pazzi, panny",
    "saintBenedictOfNursiaAbbot": "Svätého Benedikta, opáta, spolupatróna Európy",
    "saintBennoOfMeissenBishop": "Svätého Benna z Meißenu, biskupa",
    "saintBernadetteSoubirousVirgin": "Svätej Bernadety Soubirousovej, panny",
    "saintBernardineOfSienaPriest": "Svätého Bernardína Sienského, kňaza",
    "saintBernardOfClairvauxAbbotAndDoctorOfTheChurch": "Svätého Bernarda, opáta a učiteľa Cirkvi",
    "saintBeunoAbbot": "Svätého Beuna (Bona), opát",
    "saintBlaseBishopAndMartyrSaintAnsgarBishop": "Svätého Blažeja, biskupa a mučeníka, a svätého Oskára, biskupa",
    "saintBonaventureBishopAndDoctor": "Svätého Bonaventúru, biskupa a učiteľa Cirkvi",
    "saintBonifaceBishopAndMartyr": "Svätého Bonifáca, biskupa a mučeníka",
    "saintBrendanAbbot": "Svätého Brendana, opáta",
    "saintBridgetOfSwedenReligious": "Svätej Brigity, rehoľnice, patrónky Európy",
    "saintBrigidVirgin": "Svätej Brigity Írskej, panny",
    "saintBrotherMutienMarieReligious": "Svätého brata Mutien-Marie, rehoľníka",
    "saintBrunoBonifaceOfQuerfurtBishopAndMartyr": "Svätého Bruna Bonifáca z Querfurtu, biskupa a mučeníka",
    "saintBrunoPriest": " Svätého Bruna, kňaza",
    "saintCaesariusOfArlesBishop": "Svätého Cézara z Arles, biskupa",
    "saintCallistusIPopeAndMartyr": "Svätého Kalixta I., pápeža a mučeníka",
    "saintCamillusDeLellisPriest": "Svätého Kamila de Lellis, kňaza",
    "saintCamillusDeLellisPriestOrSaintHenryBishopAndMartyr": "Svätého Kamila de Lellis, kňaza, alebo svätého Henricha",
    "saintCaniceAbbot": "Svätého Canica, opáta",
    "saintCanuteMartyr": "Svätého Kanuta, mučeníka",
    "saintCarthageBishopMochuta": "Svätého Kartága (Mo Chutu), biskupa",
    "saintCasimir": "Svätého Kazimíra",
    "saintCatherineOfAlexandriaVirginAndMartyr": "Svätej Kataríny Alexandrijskej, panny a mučenice",
    "saintCatherineOfSienaVirginAndDoctorOfTheChurch": "Svätej Kataríny Sienskej, panny a učiteľky Cirkvi, patrónky Európy",
    "saintCeallachCelsusBishop": "Svätého Ceallacha (Celza), biskupa",
    "saintCeciliaVirginAndMartyr": "Svätej Cecílie, panny a mučenice",
    "saintCharbelMakhloufPriestAndHermit": "Svätého Sarbela Makhlūfa, kňaza",
    "saintCharlesBorromeoBishop": "Svätého Karola Boromejského, biskupa",
    "saintChristopherMagallanesAndCompanionsMartyrs": "Svätého Krištofa Magallanesa, kňaza, a spoločníkov, mučeníkov",
    "saintChristopherMartyr": "Svätého Ḱrištofa, mučeníka",
    "saintCiaranAbbot": "Svätého Kiarána, opáta",
    "saintClareVirgin": "Svätej Kláry, panny",
    "saintClementIPopeAndMartyrSaintColumbanReligious": "Svätého Klementa I., pápeža a mučeníka/Svätého Kolumbána, opáta",
    "saintClementMaryHofbauerPriest": "Svätého Klementa Márie Hofbauera, kňaza",
    "saintClementOfOhridAndGorazdBishopsAndCompanions": "Svätého Klimenta Ochridského a Gorazda, biskupov, a spoločníkov",
    "saintClotilde": "Svätej Klotildy",
    "saintColmanOfCloyneBishop": "Svätého Kolomana z Cloyne, biskupa",
    "saintColmanOfDromoreBishop": "Svätého Kolomana z Dromore, biskupa",
    "saintColmanOfKilmacduaghBishop": "Svätého Kolomana z Kilmacduagh, biskupa",
    "saintColumba": "Svätého Kolumbu, opáta",
    "saintColumbaAbbotAndMissionary": "Svätého Kolumbu, opáta a misionára",
    "saintColumbanAbbotAndMissionary": "Svätého Kolumbana, opáta a misionára",
    "saintComgallAbbot": "Svätého Comgalla, opáta",
    "saintConlethBishop": "Svätého Konleta, biskupa",
    "saintConradOfParzhamReligious": "Svätého Konráda z Parzhamu, rehoľníka",
    "saintCorbinianBishop": "Svätého Korbiniána, biskupa",
    "saintCuthbertBishop": "Svätého Cuthbert, biskupa",
    "saintCyrilOfAlexandriaBishopAndDoctor": "Svätého Cyrila Alexandrijského, biskupa a učiteľa Cirkvi",
    "saintCyrilOfJerusalemBishopAndDoctor": "Svätého Cyrila Jeruzalemského, biskupa a učiteľa Cirkvi",
    "saintDamasusIPope": "Svätého Damaza I., pápeža",
    "saintDamienDeVeusterPriest": "Svätého Damiána De Veuster, kňaza a mučeníka",
    "saintDavidBishop": "Svätého Dávida z Menevie, biskupa",
    "saintDavidLewisPriestAndMartyr": "Svätého Dávida Lewisa, kňaza a mučeníka",
    "saintDavnetVirgin": "Svätej Davnety, panny",
    "saintDeclanBishop": "Svätého Deklana, biskupa",
    "saintDeiniolBishop": "Svätého Deiniola (Daniela), biskupa",
    "saintDemetrius": "Svätého Demetra Solúnskeho, mučeníka",
    "saintDenisAndCompanionsMartyrsSaintJohnLeonardiPriest": "Svätého Dionýza, biskupa, a spoločníkov, mučeníkov/Svätého Jána Leonardiho, kňaza",
    "saintDenisAndCompanionsMartyrsSaintJohnLeonardiPriestBlessedJohnNewmanBishop": "Svätého Dionýza, biskupa, a spoločníkov, mučeníkov/Svätého Jána Leonardiho, kňaza/Blahoslaveného Johna Henryho Newmana, kňaza",
    "saintDionysiusTheAreopagite": "Svätého Dionýza Areopagitu, biskupa a mučeníka",
    "saintDominicPriest": "Svätého Dominika, kňaza",
    "saintDominicPriest/SaintSixtusIiPopeAndCompanionsMartyrsSaintCajetanPriest": "Svätého Dominika, kňaza/Svätých Sixta II., pápeža, a jeho spoločníkov, mučeníkov/Svätého Kajetána, kňaza",
    "saintDubriciusBishop": "Svätého Dubrícia, biskupa",
    "saintEdmundCampionPriestAndMartyr": "Svätého Edmunda Kampiána, kňaza a mučeníka",
    "saintEdmundOfAbingdonBishopOrSaintMargaretOfScotland": "Svätého Edmundá z Abingdonu, biskupa, alebo svätej Margity Škótskej",
    "saintEdwardTheConfessor": "Svätého Eduarda Vyznávača",
    "saintElijahProphet": "Svätého Eliáša, proroka",
    "saintElizabethAnnSetonReligious": "Svätej Alžbety Anny Setonovej, rehoľnice",
    "saintElizabethOfHungary": "Svätej Alžbety Uhorskej, rehoľnice",
    "saintElizabethOfHungarySaintHildaAbbessSaintHughOfLincolnBishop": "Saint Elizabeth of Hungary, Religious/Saint Hilda, Abbess/Saint Hugh of Lincoln, Bishop",
    "saintElizabethOfPortugal": "Svätej Alžbety Portugalskej",
    "saintEmeric": "Svätého Imricha",
    "saintEndaAbbot": "Svätého Endu, opáta",
    "saintEphraemDeaconDoctorOrSaintColumbaColumCilleAbbot": "Svätého Efréma, diakona a učiteľa Cirkvi, alebo svätého Kolumbu, opáta",
    "saintEphremDeaconAndDoctor": "Svätého Efréma, diakona a učiteľa Cirkvi",
    "saintEricIxMartyr": "Saint Eric IX., Martyr",
    "saintEtheldredaAudreyVirgin": "Svätej Eteldredy, panny",
    "saintEugeneDeMazenodBishop": "Svätého Eugena de Mazenod, biskupa",
    "saintEugeneEoghanBishop": "Svätého Eugena (Eoghana), biskupa",
    "saintEulaliaOfMeridaVirginAndMartyr": "Svätej Eulálie z Meridy, panny a mučenice",
    "saintEulogiusOfCordobaBishop": "Svätého Eulógia z Córdoby, biskupa",
    "saintEusebiusOfVercelliBishopSaintPeterJulianEymardPriest": "Svätého Euzébia Vercellského, biskupa/Svätého Petra Juliána Eymarda, kňaza",
    "saintEysteinnBishop": "Svätého Eysteina Erlendssona, biskupa",
    "saintEzekielMorenoBishop": "Svätého Ezechiela Morena, biskupa",
    "saintEzequielMorenoBishop": "Svätého Ezechiela Morena, biskupa",
    "saintFachananOfKilfenoraBishop": "Svätého Fachanana z Kilfenora, biskupa",
    "saintFachtnaBishop": "Svatého Fachtnu, biskupa",
    "saintFaustinaKowalskaVirginAndReligious": "Svätej Faustíny Kowalskej, panny",
    "saintFelipeDeJesusPriestAndMartyr": "Svätého Filipa od Ježiša, kňaza a mučeníka",
    "saintFerdinand": "Svätého Ferdinanda",
    "saintFergalBishopAndMissionary": "Svätého Fergala (Virgila), biskupa a misionára",
    "saintFiacreMonk": "Svätého Fiakra, mnícha",
    "saintFidelisOfSigmaringenPriestAndMartyr": "Svätého Fidéla zo Sigmaringenu, kňaza a mučeníka",
    "saintFinbarrBishop": "Svätého Finbarra, biskupa",
    "saintFinnianOfClonardBishop": "Svätého Finniana z Clonardu, biskupa",
    "saintFintan": "Svätého Fintana",
    "saintFlannanBishop": "Svätého Flannana, biskupa",
    "saintFlorianAndHisCompanionsMartyrs": "Svätých Floriána a jeho spoločníkov, mučeníkov",
    "saintFlorianMartyr": "Svätého Floriána, mučeníka",
    "saintFrancesOfRomeReligious": "Svätej Františky Rímskej, rehoľnice",
    "saintFrancesXavierCabriniVirgin": "Svätej Františky Xaviery Cabriniovej, panny",
    "saintFrancisBorgiaPriest": "Svätého Františka Borgiu, kňaza",
    "saintFrancisDeSalesBishopAndDoctor": "Svätého Františka Saleského, biskupa a učiteľa Cirkvi",
    "saintFrancisOfAssisi": "Svätého Františka Assiského",
    "saintFrancisOfPaolaHermit": "Svätého Františka z Paoly, pustovníka",
    "saintFrancisSolanusPriest": "Svätého Františka Solana, kňaza",
    "saintFrancisXavierPriest": "Svätého Františka Xaverského, kňaza",
    "saintFrancoisDeLavalBishop": "Svätého Františka de Montmorency-Laval, biskupa",
    "saintFridolinOfSackingenMonk": "Svätého Fridolína, opáta",
    "saintFructuosusSaintMartinOfDumeAndSaintGeraldBishops": "Svätých Fruktuóza z Bragy, Martin z Dumia a Geralda z Bragy, biskupov",
    "saintFursaAbbotAndMissionary": "Svätého Fursu, opát a misionár",
    "saintGallAbbotAndMissionary": "Svätého Gála, kňaza",
    "saintGenevieveVirgin": "Svätej Genovévy, panny",
    "saintGeorgeMartyr": "Svätého Juraja, mučeníka",
    "saintGeorgeMartyrSaintAdalbertBishopAndMartyr": "Svätého Juraja, mučeníka/Svätého Vojtecha, biskupa a mučeníka",
    "saintGeorgePrecaPriest": "Svätého Juraja Precu, kňaza",
    "saintGerardBishop": "Svätého Gerarda, biskupa",
    "saintGermanusOfAuxerreBishop": "Svätého Germána z Auxerre, biskupa",
    "saintGertrudeOfNivellesAbbess": "Svätej Gertrúdy z Nivelles, opátky",
    "saintGertrudeOfNivellesVirgin": "Svätej Gertrúdy z Nivelles, panny",
    "saintGertrudeTheGreatVirgin": "Svätej Gertrúdy, panny",
    "saintGobnaitVirgin": "Svätej Gobnaity, panny",
    "saintGonsaloGarciaMartyr": "Svätého Gonsala Garciu, mučeníka",
    "saintGorazdAndCompanions": "Svätého Gorazda a spoločníkov",
    "saintGotthardBishop": "Svätého Gottharda, biskupa",
    "saintGregoryTheGreatPopeAndDoctor": "Svätého Gregora Veľkého, pápeža a učiteľa Cirkvi",
    "saintHectorValdivielsoSaezMartyr": "Svätého Héctora Valdivielsa Sáeza (Benedikta od Ježiša), mučeníka",
    "saintHedwigOfPoland": "Svätej Hedvigy Poľskej",
    "saintHedwigOfSilesia": "Svätej Hedvigy, rehoľnice",
    "saintHedwigReligiousOrSaintMargaretMaryAlacoqueVirgin": "Svätej Hedvigy, rehoľnice, alebo svätej Margity Márie Alacoque, panny",
    "saintHedwigReligiousSaintMargaretMaryAlacoqueVirgin": "Svätej Hedvigy, rehoľnice/Svätej Margity Márie Alacoque, panny",
    "saintHelena": "Svätej Heleny",
    "saintHemmaOfGurk": "Svätej Emy z Gurku",
    "saintHenryBishopAndMartyr": "Svätého Henricha",
    "saintHermannJosephPriest": "Svätého Hermana Jozefa, kňaza",
    "saintHermenegildMartyr": "Svätého Hermenegilda, mučeníka",
    "saintHilaryOfPoitiersBishopAndDoctor": "Svätého Hilára, biskupa, učiteľa Cirkvi",
    "saintHildegardOfBingenAbbessAndDoctor": "Svätej Hildegardy z Bingenu, opátky a mučenice",
    "saintHubertBishop": "Svätého Huberta, biskupa",
    "saintHubertOfLiegeBishopOrSaintPirminAbbotAndBishop": "Svätého Huberta of Liége, biskupa, alebo svätého Primina, opáta a biskupa",
    "saintHyacinthPriest": "Svätého Hyacinta Poľského, kňaza",
    "saintIgnatiusOfAntiochBishopAndMartyr": "Svätého Ignáca Antiochijského, biskupa a mučeníka",
    "saintIgnatiusOfLoyolaPriest": "Svätého Ignáca z Loyoly, kňaza",
    "saintIldephonsusOfToledoBishop": "Svätého Ildefonza z Toleda, biskupa",
    "saintIlltudAbbot": "Svätého Illtuda, opáta",
    "saintIrenaeusBishopAndMartyr": "Svätého Ireneja, biskupa a mučeníka",
    "saintIrene": "Svätej Ireny",
    "saintIsidoreOfSevilleBishopAndDoctorOfTheChurch": "Svätého Izidora, biskupa a učiteľa Cirkvi",
    "saintIsidoreTheFarmer": "Svätého Izidora z Madridu, roľníka",
    "saintItaVirgin": "Svätej Ity, panny",
    "saintIvoPriest": "Svätého Ivo, kňaza",
    "saintJamesApostle": "Svätého Jakuba, apoštola",
    "saintJamesApostlePatronOfSpain": "Svätého Jakuba, apoštola, patrón Španielska",
    "saintJaneFrancesDeChantalReligious": "Svätej Jany Františky de Chantal, rehoľnice",
    "saintJanuariusBishopAndMartyr": "Svätého Januára, biskupa a mučeníka",
    "saintJarlathBishop": "Svätého Jarláta, biskupa",
    "saintJeanVianneyTheCureOfArsPriest": "Svätého Jána Márie Vianneya, kňaza",
    "saintJeromeEmilianiSaintJosephineBakhitaVirgin": "Svätého Hieronyma Emilianiho/Svätej Jozefíny Bakhity, panny",
    "saintJeromePriestAndDoctor": "Svätého Hieronyma, kňaza a učiteľa Cirkvi",
    "saintJoanOfArcVirginSecondaryPatronessOfFrance": "Svätej Jany z Arku, panny, sekundárnej patrónky Francúzska",
    "saintJoaquinaVedruna": "Svätej Joaquiny od svätého Františka z Assisi, rehoľnice",
    "saintJohnBaptistDeLaSallePriest": "Svätého Jána Krstiteľa de la Salle, kňaza",
    "saintJohnBerchmansReligious": "Svätého Jána Berchmansa, rehoľníka",
    "saintJohnBoscoPriest": "Svätého Jána Boska, kňaza",
    "saintJohnCassianPriest": "Svätého Ján Kassiána, kňaza",
    "saintJohnChrysostomBishopAndDoctor": "Svätého Jána Zlatoústeho, biskupa a učiteľa Cirkvi",
    "saintJohnDamascenePriestAndDoctor": "Svätého Jána Damascénskeho, kňaza a učiteľa Cirkvi",
    "saintJohnDamascenePriestAndDoctorOrSaintBarbaraVirginAndMartyr": "Svätého Jána Damascénskeho, kňaza a učiteľa Cirkvi, alebo svätej Barbory, panny a mučenice",
    "saintJohnDeBritoPriestAndMartyr": "Svätého Jána de Brito, kňaza a mučeníka",
    "saintJohnEudesPriest": "Svätého Jána Eudes, kňaza",
    "saintJohnIPopeAndMartyr": "Svätého Jána I., pápeža a mučeníka",
    "saintJohnJonesPriestAndMartyr": "Svätého Jána Jonesa, kňaza a mučeníka",
    "saintJohnMaciasReligious": "Svätého Jána Macíasa, rehoľníka",
    "saintJohnNepomucenePriestAndMartyr": "Svätého Jána Nepomuckého, kňaza a mučeníka",
    "saintJohnNeumannBishop": "Svätého Jána Nepomuckého Neumanna, biskupa",
    "saintJohnOfAvilaPriest": "Svätého Jána z Ávily, kňaza",
    "saintJohnOfCapistranoPriest": "Svätého Jána Kapistránskeho, kňaza",
    "saintJohnOfDuklaPriest": "Svätého Jána z Dukly, kňaza",
    "saintJohnOfGodPriest": "Svätého Jána z Boha, rehoľníka",
    "saintJohnOfGodReligious": "Svätého Jána z Boha, rehoľníka",
    "saintJohnOfKantyPriest": "Svätého Jána Kentského, kňaza",
    "saintJohnOfTheCrossDoctorOfTheChurch": "Svätého Jána z Kríža, kňaza a učiteľa Cirkvi",
    "saintJohnOfTheCrossPriestAndDoctor": "Svätého Jána z Kríža, kňaza a učiteľa Cirkvi",
    "saintJohnOgilvie": "Svätého Jána Ogilvie",
    "saintJohnRobertsPriestAndMartyr": "Svätého Jána Robertsa, kňaza a mučeníka",
    "saintJohnSarkanderPriestAndMartyrSaintZdzislawa": "Svätého Jána Sarkandera, kňaza a mučeníka/Svätej Zdislavy",
    "saintJohnTheApostleAndEvangelist": "Svätého Jána, apoštola a evanjelistu",
    "saintJosaphatBishopAndMartyr": "Svätého Jozafáta, biskupa a mučeníka",
    "saintJoseDeAnchietaPriest": "Svätého Jozefa de Anchietu, kňaza",
    "saintJosefBilczewskiBishop": "Svätého Jozefa Bilczewského, biskupa",
    "saintJoseMariaDeYermoPriest": "Svätého Jozefa Márie de Yerma, kňaza",
    "saintJosemariaEscrivaDeBalaguerPriest": "Svätého Josemaríe Escrivá de Balaguer, kňaza",
    "saintJosephSpouseOfTheBlessedVirginMaryPrincipalPatronOfCanada": "Svätého Jozefa, ženícha Panny Márie, hlavný patrón Kanady",
    "saintJosephTheWorker": "Svätého Jozefa, robotníka",
    "saintJozefBilczewskiBishop": "Svätého Jozefa Bilczewski, biskupa",
    "saintJozefSebastianPelczar": "Svätého Jozefa Sebastiána Pelczara, biskupa",
    "saintJuanDiego": "Svätého Jána Didaka (Juana Diega) Cuauhtlatoatzina",
    "saintJuanDiegoCuauhtlatoatzin": "Svätého Jána Didaka Cuauhtlatoatzina",
    "saintJulianaOfLiegeVirgin": "Svätej Juliány z Liége, panny",
    "saintJulieBilliartVirgin": "Svätej Júlie Billiart, panny",
    "saintJustinMartyr": "Svätého Justína, mučeníka",
    "saintKateriTekakwithaVirgin": "Svätej Kataríny Tekakwithy, panny",
    "saintKatharineDrexelVirgin": "Svätej Kataríny Drexelovej, panny",
    "saintKentigern": "Svätého Munga",
    "saintKevinAbbot": "Svätého Kevina, opáta",
    "saintKieranBishop": "Svätého Ciarána, biskup",
    "saintKilianBishopAndCompanionsMartyrs": "Svätého Kiliána, biskupa, a spoločníkov, mučeníkov",
    "saintKillianBishopAndMartyr": "Svätého Killiana, biskupa a mučeníka",
    "saintKingaVirgin": "Svätej Kingy, panny",
    "saintLadislaus": "Svätého Ladislava",
    "saintLambertBishopAndMartyr": "Svätého Lamberta z Maastrichtu, biskupa a mučeníka",
    "saintLaurenceOTooleBishop": "Svätého Vavrinec O’Toole, biskupa",
    "saintLawrenceOfBrindisiPriestAndDoctor": "Svätého Vavrinca z Brindisi, kňaza a učiteľa Cirkvi",
    "saintLawrenceOfRomeDeaconAndMartyr": "Svätého Vavrinca, diakona a mučeníka",
    "saintLeanderBishop": "Svätého Leandra zo Sevilly, biskupa",
    "saintLeobaAbbess": "Svätej Leoby, opátky",
    "saintLeoIxPopeOrBlessedMarcelCalloMartyr": "Svätého Lea IX., pápeža, alebo blahoslaveného Marcela Calla, mučeníka Leo IX, Pope Or Blessed Marcel Callo, Martyr",
    "saintLeonardOfNoblacHermit": "Svätého Leonarda z Noblatu, pustovníka",
    "saintLeopoldIII": "Svätého Leopolda III., pápeža",
    "saintLeopoldMandicPriest": "Svätého Leopolda Bogdana Mandića, kňaza a rehoľníka",
    "saintLeoTheGreatPopeAndDoctor": "Svätého Leva Veľkého, pápeža a učiteľa Cirkvi",
    "saintLorenzoRuizAndCompanionsMartyrs": "Svätého Vavrinca Ruiza a spoločníkov, mučeníkov",
    "saintLouisBertrandPriest": "Svätého Ľudovíta Bertranda, kňaza a rehoľníka",
    "saintLouisGrignonDeMontfortPriest": "Svätého Ľudovíta Márie Grignona de Montfort, kňaza",
    "saintLouisSaintJosephOfCalasanzPriest": "Svätého Ľudovíta/Svätého Jozefa Kalazanského, kňaza",
    "saintLuciusOfChurBishopAndMartyr": "Svätého Lucia z Chur, biskupa a mučeníka",
    "saintLucyOfSyracuseVirginAndMartyr": "Svätej Lucie, panny a mučenice",
    "saintLudgerBishop": "Svätého Ludgera z Münsteru, biskupa",
    "saintLudmilaMartyr": "Svätej Ľudmily, mučenice",
    "saintLuigiOrionePriest": "Svätého Alojza Orione, kňaza",
    "saintLukeTheEvangelist": "Svätého Lukáša, evanjelistu",
    "saintLydiaOfPhilippi": "Svätej Lýdie z Filíp",
    "saintMacartanBishop": "Svätého Makartána, biskupa",
    "saintMacNissiBishop": "Svätého Mac Nissiho, biskupa",
    "saintMaelruainMaolruainVirgin": "Svätej Máel Ruainy (Maolruainy), biskupa a opáta",
    "saintMagnusMartyr": "Svätého Magnusa Erlendssona, mučeníka",
    "saintMalachyBishop": "Svätého Malachiáša, biskupa",
    "saintMarcellinChampagnatPriest": "Svätého Marcelína Champagnata, kňaza",
    "saintMargaretMaryAlacoque": "Svätej Margity Márie Alacoque, panny",
    "saintMargaretOfAntiochVirginAndMartyr": "Svätej Margity Antiochijskej, panny a mučenice",
    "saintMargaretOfHungary": "Svätej Margity Uhorskej, rehoľnice",
    "saintMargaretOfScotland": "Svätej Margity Škótskej",
    "saintMargaretOfScotlandSaintGertrudeTheGreatVirgin": "Svätej Margity Škótskej/Svätej Gertrúdy, panny",
    "saintMargueriteBourgeoysVirgin": "Svätej Margaréty Bourgeoys, panny",
    "saintMargueriteDYouvilleReligious": "Svätej Margaréty d’Youville, rehoľnice",
    "saintMariaDeJesusSacramentadoVenegasVirgin": "Svätej Márie od Ježiša v Najsvätejšej Sviatosti, Panny",
    "saintMariaGorettiVirginAndMartyr": "Svätej Márie Goretti, panny a mučenice",
    "saintMariaMicaelaOfTheBlessedSacramentVirgin": "Svätej Márie Michaely od Najsvätejšej Sviatosti, rehoľnice",
    "saintMarianaDeJesusDeParedesVirgin": "Svätej Márie Anny od Ježiša (de Paredes), panny",
    "saintMarieOfTheIncarnationReligious": "Svätej Márie od Vtelenia, rehoľnice",
    "saintMarina": "Svätej Maríny",
    "saintMarkApostle": "Svätého Marka, apoštola",
    "saintMarkoKrizinPriestAndMartyr": "Svätého Marka Križina, kňaza a mučeníka",
    "saintMarkTheEvangelist": "Svätého Marka, evanjelistu",
    "saintMaroun": "Svätého Maróna, pustovníka",
    "saintMartha": "Svätej Marty",
    "saintMartinDePorresReligious": "Svätého Martina de Porres, rehoľníka",
    "saintMartinIPopeAndMartyr": "Svätého Martina I., pápeža a mučeníka",
    "saintMartinOfToursBishop": "Svätého Martina z Tours, biskupa",
    "saintMaryMacKillopVirgin": "Svätej Márie MacKillopovej, Panny",
    "saintMaryMagdalene": "Svätej Márie Magdalény",
    "saintMaryOfTheCrossVirgin": "Svätej Márie od Kríža, panny",
    "saintMatilda": "Svätej Matildy",
    "saintMatthewApostleAndEvangelist": "Svätého Matúša, apoštola a evanjelistu",
    "saintMatthiasTheApostle": "Svätého Mateja, apoštola",
    "saintMauriceAndCompanionsMartyrs": "Svätého Maurícia a spoločníkov, mučeníkov",
    "saintMaurusBishop": "Svätého Maura, biskupa",
    "saintMaximilianMaryKolbePriestAndMartyr": "Svätého Maximiliána Máriu Kolbeho, kňaza a mučeníka",
    "saintMeinradMartyr": "Svätého Meinrada, mučeníka",
    "saintMelBishop": "Svätého Mela, biskupa",
    "saintMelchiorGrodzieckiPriestAndMartyr": "Svätého Melichara Grodzieckého, kňaza a mučeníka",
    "saintMiguelFebresCorderoReligious": "Svätého Michala Febresa Cordera, rehoľníka",
    "saintMolaiseLaisrenLaserianBishop": "Svätého Molaise (Laisrena, Laseriana), biskupa",
    "saintMonica": "Svätej Moniky",
    "saintMoninneVirgin": "Svätej Moninny, panny",
    "saintMuiredachBishopSaintAttractaVirginOrSaintLeliaVirgin": "Svätého Muredacha, biskupa, alebo svätej Atrakty, panny, alebo svätej Lelie, panny",
    "saintMunchinBishop": "Svätého Munchina, biskupa",
    "saintNicholasBishop": "Svätého Mikuláša, biskupa",
    "saintNicholasOfFlueHermit": "Svätého Mikuláša z Flüe, pustovníka",
    "saintNikolaTavelicPriestAndMartyr": "Svätého Nikolu Tavelića, kňaza a mučeníka",
    "saintNinian": "Svätého Niniána ",
    "saintNorbertBishop": "Svätého Norberta, biskupa",
    "saintNunoDeSantaMaria": "Svätého Nuna od Svätej Panny",
    "saintOdileOfAlsaceAbbess": "Svätej Otílie, opátky",
    "saintOlafIiMartyr": "Svätého Olafa II., mučeníka",
    "saintOlga": "Svätej Oľgy",
    "saintOliverPlunketBishopAndMartyr": "Svätého Olivera Plunketa, biskupa a mučeníka",
    "saintOliverPlunkettBishopAndMartyr": "Svätého Olivera Plunketta, biskupa a mučeníka",
    "saintOtteranMonk": "Svätého Otterána, mnícha",
    "saintOttoOfBambergBishop": "Svätého Ota z Bambergu, biskupa",
    "saintPantaleon": "Svätého Pantaleóna",
    "saintPaschalBaylon": "Svätého Paschala Baylóna, rehoľníka",
    "saintPatrickBishop": "Svätého Patrika, biskupa",
    "saintPaulinaOfTheAgonizingHeartOfJesusVirgin": "Svätej Paulíny trpiaceho Srdca Ježišovho, panny",
    "saintPaulinusOfNolaBishopSaintsJohnFisherBishopAndThomasMoreMartyrs": "Svätého Pavlína z Noly, biskupa/Svätých Jána Fishera, biskupa, a Tomáša Mórusa, mučeníkov",
    "saintPaulinusOfTrierBishop": "Svätého Paulína z Trevíra, biskupa",
    "saintPaulinusOfYorkBishop": "Svätého Paulína z Yorku, biskupa",
    "saintPaulMikiAndCompanionsMartyrs": "Svätého Pavla Mikiho a spoločníkov, mučeníkov",
    "saintPaulOfTheCrossPriest": "Svätého Pavla z Kríža, kňaza",
    "saintPedroCalungsodMartyr": "Svätého Petra Calungsoda, mučeníka",
    "saintPelagiusMartyr": "Svätého Pelágia z Córdoby, mučeníka",
    "saintPeterCanisiusPriestAndDoctor": "Svätého Petra Kanízia, kňaza a učiteľa Cirkvi",
    "saintPeterChanelPriestAndMartyrSaintLouisGrignonDeMontfortPriest": "Svätého Petra Chanela, kňaza a mučeníka/Svätého Ľudovíta Márie Grignion de Montfort, kňaza",
    "saintPeterChrysologusBishopAndDoctor": "Svätého Petra Chryzológa, biskupa a učiteľa Cirkvi",
    "saintPeterClaverPriest": "Svätého Petra Clavera, kňaza",
    "saintPeterDamianBishopAndDoctorOfTheChurch": "Svätého Petra Damianiho, biskupa a učiteľa Cirkvi",
    "saintPeterOfAlcantaraPriest": "Saint Peter of Alkantary, kňaza",
    "saintPhilipNeriPriest": "Svätého Filipa Neriho, kňaza",
    "saintPioOfPietralcina": "Svätého Pia z Pietrelčiny, kňaza",
    "saintPioOfPietrelcinaPadrePioPriest": "Svätého Pia z Pietrelčiny, kňaza",
    "saintPiusVPope": "Svätého Pia V., pápeža",
    "saintPiusXPope": "Svätého Pia X., pápeža",
    "saintPolycarpBishopAndMartyr": "Svätého Polykarpa, biskupa a mučeníka",
    "saintPothinusBishopSaintBlAndinaVirginAndTheirCompanionsMartyrs": "Svätých Potína, biskupa, Blandíny, panny, a ich spoločníkov, mučeníkov",
    "saintProcopiusAbbot": "Svätého Prokopa, opáta",
    "saintPubliusBishop": "Svätého Publia, biskupa",
    "saintQuirinusOfSescia": "Svätého Kvirína zo Sisaku",
    "saintRabanusMaurusBishop": "Svätého Rabana Maura, biskupa",
    "saintRadimBishop": "Svätého Radima, biskupa",
    "saintRafaelGuizarYValenciaBishop": "Svätého Rafaela Guízara, biskupa",
    "saintRafalKalinowskiPriest": "Svätého Rafael Kalinowského, kňaza",
    "saintRafqaRebeccaVirgin": "Svätej Rafky (Rebeky), panny",
    "saintRaymondOfPenyafortPriest": " Svätého Rajmunda z Peňafortu, kňaza",
    "saintRemigiusBishop": "Svätého Remígia, biskupa",
    "saintRichardGwynMartyr": "Svätého Richarda Gwyna, mučeníka",
    "saintRichardOfChichesterBishop": " Svätého Richarda z Chichesteru, biskupa",
    "saintRitaOfCascia": "Svätej Rity z Cascie, rehoľnice",
    "saintRobertBellarmineBishopAndDoctor": "Svätého Róberta Bellarmína, biskupa a učiteľa Cirkvi",
    "saintRocco": "Svätého Rocha, pútnika",
    "saintRoch": "Svätého Rochusa",
    "saintRomualdAbbot": "Svätého Romualda, opáta",
    "saintRoseOfLima": "Svätej Ruženy Limskej, panny",
    "saintRosePhilippineDuchesneVirgin": "Svätej Ruženy Filipíny Duchesne, panny",
    "saintsAlbanJuliusAndAaronMartyrs": "Svätého Albána, Júlia and Árona, mučeníkov",
    "saintsAndrewZoerardusAndBenedictHermits": "Svätých Andreja-Svorada a Benedikta, pustovníkov",
    "saintsAndrewZorardAndBenedictHermits": "Svätých Andreja-Svorada a Benedikta, pustovníkov",
    "saintsAugustineZhaoRongPriestAndCompanionsMartyrs": "Svätých Augustína Zhao Rong, kňaza, a spoločníkov, mučeníkov",
    "saintsBasilTheGreatAndGregoryNazianzenBishopsAndDoctors": "Svätých Bazila Veľkého a Gregora Nazianzského, biskupov a učiteľov Cirkvi",
    "saintsBenedyktJanMateuszIsaakAndKrystynMartyrs": "Svätých Benedikta, Jána, Mateja, Izáka a Kristína (Piatich bratov pustovníkov), mučeníkov",
    "saintsBorisAndGlebMartyrs": "Svätých Borisa a Gleba, mučeníkov",
    "saintsCanuteEricAndOlafMartyrs": "Svätých Kanuta, Erika a Olafa, mučeníkov",
    "saintsChadAndCeddBishop": "Svätých Chada a Cedda, biskupov",
    "saintsCharlesLwangaAndCompanionsMartyrs": "Svätých Karola Lwangu a spoločníkov, mučeníkov",
    "saintScholasticaVirgin": "Svätej Školastiky, panny",
    "saintsConradAndGebhardOfConstanceBishops": "Svätých Konráda a Gebharda z Kostnice, biskupov",
    "saintsCorneliusPopeAndCyprianBishopMartyrs": "Svätých Kornélia, pápeža, a Cypriána, biskupa, mučeníkov",
    "saintsCosmasAndDamian": "Svätých Kozmu a Damiána, mučeníkov",
    "saintsCosmasAndDamianMartyrs": "Svätých Kozmu a Damiána, mučeníkov",
    "saintsCyrilMonkAndMethodiusBishop": "Svätých Cyrila a Metoda, slovanských vierozvestov",
    "saintSenanBishop": "Svätého Senana, biskupa",
    "saintSeverinusOfNoricumMonk": "Svätého Severína z Norika, kňaza",
    "saintsFabianPopeAndSebastianMartyrs": "Svätých Fabiána, pápeža, a Šebastiána, mučeníkov",
    "saintsFelipeDeJesusPaulMikiAndCompanionsMartyrs": "Svätého Filipa od Ježiša, Pavla Mikiho a spoločníkov, mučeníkov",
    "saintsFructuosusBishopAndAuguriusAndEulogiusDeaconsMartyrs": "Svätých Fruktuóza z Bragy, biskupa, a Augúria a Eulógia, diakonov, mučeníkov",
    "saintsHenryAndCunigunde": "Svätého Henricha a Kunigundy",
    "saintSigismundMartyr": "Svätého Žigmunda Burgundského, mučeníka",
    "saintSimonOfLipnicaPriest": "Svätého Šimona z Lipnice, kňaza",
    "saintSixtusIiPopeAndCompanionsMartyrsSaintCajetanPriest": "Svätých Sixta II., pápeža, a jeho spoločníkov, mučeníkov/Svätého Kajetána, kňaza",
    "saintsJeanDeBrebeufAndIsaacJoguesPriestsAndCompanionsMartyrsSaintPaulOfTheCrossPriest": "Svätých Jána de Brébeuf a Izáka Joguesa, kňazov, a ich spoločníkov, mučeníkov/Svätého Pavla z Kríža, kňaza",
    "saintsJoachimAndAnne": "Svätých Joachima a Anny, rodičov Panny Márie",
    "saintsJohnFisherBishopAndThomasMoreMartyrs": "Svätých Jána Fishera, biskupa, a Tomáša Mórusa, mučeníkov",
    "saintsLawrenceRuizAndCompanionsMartyrs": "Svätého Vavrinca Ruiza a spoločníkov, mučeníkov",
    "saintsMarcellinusAndPeterMartyrs": "Svätých Marcelína a Petra, mučeníkov",
    "saintsMargaretClitherowAnneLineAndMargaretWardMartyrs": "Svätej Margity Clitherowová, Anny Linová a Margity Wardová, mučeníc",
    "saintsMarkoKrizinMelicharGrodeckiAndStephenPongracPriestsAndMartyrs": "Svätých troch košických mučeníkov – Marka Križina, Melichara Grodzieckeho a Štefana Pongrácza, kňazov a mučeníkov",
    "saintsMichaelGabrielAndRaphaelArchangels": "Svätých Michala, Gabriela a Rafaela, archanjelov",
    "saintsNereusAndAchilleusMartyrsSaintPancrasMartyr": "Svätých Nerea a Achila, mučeníkov/Svätého Pankráca, mučeníka",
    "saintSoledadTorresAcostaVirgin": "Svätej Márie Soledad Torres y Acosty, panny",
    "saintsPedroBautistaPaulMikiAndCompanionsMartyrs": "Svätého Petra Bautistu, Pavla Mikiho a spoločníkov, mučeníkov",
    "saintsPerpetuaAndFelicityMartyrs": "Svätej Perpetuy a Felicity, mučeníc",
    "saintsPhilipAndJamesApostles": "Svätých Filipa a Jakuba, apoštolov",
    "saintsPhilipEvansAndJohnLloydPriestsAndMartyrs": "Svätých Filipa Evansa a Jána Lloyda, kňazov a mučeníkov",
    "saintsPontianPopeAndHippolytusPriestMartyrs": "Svätých Ponciána, pápeža, a Hipolyta, kňaza, mučeníkov",
    "saintSpyridon": "Svätého Spyridóna Trimifuntského, biskupa",
    "saintsRoqueGonzalezAlfonsoRodriguezOlmedoAndJuanDelCastilloPriestsAndMartyrs": "Svätého Rochusa Gonzáleza, Alfonza Rodrígueza Olmeda a Jána del Castilla, kňazov a mučeníkov",
    "saintsRupertAndVirgiliusOfSalzburgBishops": "Svätých Ruperta a Virgila zo Salzburgu, biskupov",
    "saintsSimonAndJudeApostles": "Svätých Šimona a Júdu, apoštolov",
    "saintStanislausBishopAndMartyr": "Svätého Stanislava, biskupa a mučeníka",
    "saintStanislausKazimierczykPriest": "Svätého Stanislava Kazimierczyka, kňaza",
    "saintStanislausKostkaReligious": "Svätého Stanislava Kostku, rehoľníka",
    "saintStephenOfHungary": "Svätého Štefana Uhorského",
    "saintStephenTheFirstMartyr": "Svätého Štefana, prvého mučeníka",
    "saintsTimothyAndTitusBishops": "Svätých Timoteja a Títa, biskupov",
    "saintSunnivaVirginAndMartyr": "Svätej Sunnivy, panny a mučenice",
    "saintSwithunBishop": "Svätého Swithuna, biskupa",
    "saintSylvesterIPope": "Svätého Silvestra I., pápeža",
    "saintTeiloBishop": "Svätého Teila (Teliava), biskupa",
    "saintTeresaBenedictaOfTheCrossEdithSteinVirginAndMartyr": "Svätej Terézie Benedikty z Kríža (Edity Steinovej), panny a mučenice, spolupatrónky Európy",
    "saintTeresaOfCalcuttaReligious": "Svätej Terézie z Kalkaty (Matky Terezy), panny a rehoľnice",
    "saintTeresaOfJesusJornetEIbarsVirgin": "Svätej Terezy od Ježiša Jornet e Ibars, panny",
    "saintTeresaOfJesusVirginAndDoctorOfTheChurch": "Svätej Terézie od Ježiša (z Ávily), panny a učiteľky Cirkvi",
    "saintTeresaOfLosAndesVirgin": "Svätej Terézie z Los Andes, panny",
    "saintTheodoreOfCanterburyBishop": "Svätého Teodora z Canterbury, biskupa",
    "saintTheodosiusOfTheCavesAbbot": "Svätého Teodóza Pečerského, opáta",
    "saintTheotoniusPriest": "Svätého Teotónia, kňaza",
    "saintThereseOfTheChildJesusVirginAndDoctor": "Svätej Terézie od Dieťaťa Ježiša (z Lisieux), panny a učiteľky Cirkvi",
    "saintThereseOfTheChildJesusVirginSecondaryPatronessOfFrance": "Svätej Terézie od Dieťaťa Ježiša (z Lisieux), panny a učiteľky Cirkvi, sekundárnej patrónky Francúzska",
    "saintThomasAquinasPriestAndDoctor": "Svätého Tomáša Akvinského, kňaza a učiteľa Cirkvi",
    "saintThomasBecketBishopAndMartyr": "Svätého Tomáša Becketa, biskupa a mučeníka",
    "saintThomasOfVillanovaBishop": "Svätého Tomáša z Villanovy, biskupa",
    "saintThomasRokuzayemonPriestAndCompanionsMartyrs": "Svätého Tomáša Rokuzayemona, kňaza, a spoločníkov, mučeníkov",
    "saintThomasTheApostle": "Svätého Tomáša, apoštola",
    "saintThorfinnBishop": "Svätého Torfina Hamarského, biskupa",
    "saintThorlacBishop": "Svätého Torlaka, biskupa",
    "saintTuribiusOfMogrovejoBishop": "Svätého Turibia de Mongrovejo, biskupa",
    "saintUlrichOfAugsburg": "Svätého Ulricha, biskupa",
    "saintUrsulaAndCompanionsVirginsAndMartyrs": "Svätej Uršule a spoločníčok, panien a mučeníc",
    "saintUrsulaLedochowskaVirgin": "Svätej Uršule Ledochowskej, panny",
    "saintValentineOfRaetiaBishop": "Svätého Valentína z Raetie, biskupa",
    "saintVincentDeaconAndMartyr": "Svätého Vincenta, diakona a mučeníka",
    "saintVincentDeaconAndMartyrOrSaintMarianneCopeVirgin": "Svätého Vincenta zo Saragossy, diakona a mučeníka, alebo svätej Marianny z Molokai, rehoľnice",
    "saintVincentDePaulPriest": "Svätého Vincenta de Paul, kňaza",
    "saintVincentFerrerPriest": "Svätého Vincenta Ferrera, kňaza",
    "saintVincentPallottiPriest": "Svätého Vincenta Pallottiho, kňaza",
    "saintVitusMartyr": "Svätého Víta, mučeníka",
    "saintVladimirTheGreat": "Svätého Vladimíra Veľkého",
    "saintWalburgaAbbess": "Svätej Valburgy, opátky",
    "saintWenceslausMartyr": "Svätého Václava, mučeníka",
    "saintWenceslausMartyrSaintsLawrenceRuizAndCompanionsMartyrs": "Svätého Václava, mučeníka/Svätého Vavrinca Ruiza a spoločníkov, mučeníkov",
    "saintWendelinAbbot": "Svätého Vendelína, opáta",
    "saintWilfridBishop": "Svätého Vilfrida, biskupa",
    "saintWillibaldBishop": "Svätého Willibalda, biskupa",
    "saintWillibrordBishop": "Svätého Willibrorda, biskupa",
    "saintWinefrideVirgin": "Svätej Winefridy, panny",
    "saintWolfgangBishop": "Svätého Wolfganga z Regensburgu, biskupa",
    "saintWolfgangOfRegensburgBishop": "Svätého Wolfganga z Regensburgu, biskupa",
    "saintWulstanBishop": "Svätého Vulstana, biskupa",
    "saintZdislava": "Svätej Zdislavy",
    "saintZygmuntGorazdowskiPriest": "Svätého Žigmunda Gorazdowského, kňaza",
    "saintZygmuntSzczesnyFelinskiBishop": "Svätého Zygmunta Szczęsného Felińskiho, biskupa",
    "santoNinoInfantJesus": "Svätého Dieťaťa z Cebu",
    "sevenHolyFoundersOfTheServiteOrder": "Siedmich svätých zakladateľov rehole Služobníkov Panny Márie",
    "shipwreckOfSaintPaulApostle": "Vraku lode svätého Pavla, apoštola",
    "shroveMonday": "Fašiangový pondelok",
    "shroveTuesday": "Fašiangový utorok",
    "stDunstanArchbishopOfCanterbury": "Svätého Dunstana z Canterbury, biskupa",
    "theBeheadingOfSaintJohnTheBaptistMartyr": "Mučenícka smrť svätého Jána Krstiteľa",
    "theEnglishMartyrs": "Svätých anglických mučeníkov",
    "theFiveWoundsOfTheLord": "Piatich Rán Krista Pána",
    "theMostHolyNameOfJesus": "Najsvätejšieho mena Ježiš",
    "theSixWelshMartyrsAndCompanions": "Šiestich waleských mučeníkov a spoločníkov",
    "transferOfTheRelicsOfSaintStephen": "Presunu ostatkov svätého Štefana Uhorského",
    "vietnameseMartyrs": "Vietnamských mučeníkov",
    "visitationOfTheBlessedVirginMary": "Návšteva Panny Márie",
    "waitangiDay": "Deň Waitangi"
  }
};
exports["default"] = _default;
},{}],76:[function(require,module,exports){
/*
This is a front end script which changes the colours of elements according to
the current liturgical colour.
*/

// Imports.
const RomCal = require("romcal");

// A helper function.
function recolorElements(className, field, color) {
    const elements = document.querySelectorAll("."+className);

    elements.forEach(element => { element.style[field] = color; });
}

// A helper function.
function convertRawColor(rawColor) {
    if (rawColor === "RED") return "red";
    else if (rawColor === "ROSE") return "deeppink";
    else if (rawColor === "PURPLE") return "purple";
    else if (rawColor === "GREEN") return "green";
    else if (rawColor === "WHITE") return "gold";
    else if (rawColor === "GOLD") return "gold";

    throw new Error("Unrecognised liturgical color: "+rawColor);
}

// The class in question.
class ColorChanger {
    constructor() {
        this.litColor = "gold";
        this.liturgicalColor = this.getLiturgicalColor();
    }

    getLiturgicalColor() {
        const calendar = RomCal.calendarFor();
        const today = new Date();
        const todayAtMidnight =
            new Date(Date.UTC(
                today.getFullYear(), today.getMonth(), today.getDate()
            ));
        const moment = todayAtMidnight.toISOString();
        let result;

        for (let i = 0; i < calendar.length; i++) {
            if (calendar[i].moment === moment) {
                result = 
                    convertRawColor(
                        calendar[i].data.meta.liturgicalColor.key
                    );
                return result;
            }
        }

        throw new Error("No matching color found.");
    }

    recolorElements(className, field) {
        const elements = document.querySelectorAll("."+className);

        elements.forEach(element => {
            element.style[field] = this.liturgicalColor;

            if (
                (this.liturgicalColor === "yellow") &&
                (field === "background-color")
            ) {
                element.style.textShadow = "1px 1px black";
            }
        });
    }

    recolor() {
        this.recolorElements("liturgical-background", "background-color");
        this.recolorElements("liturgical-border", "border-color");
    }
}

// Let's get cracking...
const colorChanger = new ColorChanger();
colorChanger.recolor();

},{"romcal":62}]},{},[76]);
